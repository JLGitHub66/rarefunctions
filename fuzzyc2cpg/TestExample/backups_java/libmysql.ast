IdentifierDeclStatement:null
	IdentifierDecl:append_wild(char *to, char *end, const char *wild)
		IdentifierDeclType:void ( char * to , char * end , const char * wild )
		Identifier:append_wild
IdentifierDeclStatement:null
	IdentifierDecl:mysql_client_init
		IdentifierDeclType:bool
		Identifier:mysql_client_init
IdentifierDeclStatement:null
	IdentifierDecl:org_my_init_done
		IdentifierDeclType:bool
		Identifier:org_my_init_done
ClassDefStatement:struct MYSQL_STMT_EXT {  MEM_ROOT fields_mem_root;}
IdentifierDeclStatement:null
	IdentifierDecl:result
		IdentifierDeclType:int
		Identifier:result
IdentifierDeclStatement:null
	IdentifierDecl:*env
		IdentifierDeclType:char *
		Identifier:env
IdentifierDeclStatement:null
	IdentifierDecl:MY_ATTRIBUTE
		IdentifierDeclType:serv_ptr
		Identifier:MY_ATTRIBUTE
IdentifierDeclStatement:null
	IdentifierDecl:*env
		IdentifierDeclType:char *
		Identifier:env
IdentifierDeclStatement:null
	IdentifierDecl:mysql_unix_port
		IdentifierDeclType:ifdef _WIN32
		Identifier:mysql_unix_port
FunctionDef:mysql_server_end ()
	CompoundStatement:
		IfStatement:if (!mysql_client_init)
			Condition:!mysql_client_init
				UnaryOperationExpression:!mysql_client_init
					UnaryOperator:!
					Identifier:mysql_client_init
			ReturnStatement:return;
		ExpressionStatement:mysql_client_plugin_deinit()
			CallExpression:mysql_client_plugin_deinit()
				Callee:mysql_client_plugin_deinit
					Identifier:mysql_client_plugin_deinit
				ArgumentList:
		ExpressionStatement:finish_client_errs()
			CallExpression:finish_client_errs()
				Callee:finish_client_errs
					Identifier:finish_client_errs
				ArgumentList:
		ExpressionStatement:vio_end()
			CallExpression:vio_end()
				Callee:vio_end
					Identifier:vio_end
				ArgumentList:
		Statement:/* If library called my_init(), free memory allocated by it */
		IfStatement:if (!org_my_init_done)
			Condition:!org_my_init_done
				UnaryOperationExpression:!org_my_init_done
					UnaryOperator:!
					Identifier:org_my_init_done
			CompoundStatement:
				ExpressionStatement:my_end(0)
					CallExpression:my_end(0)
						Callee:my_end
							Identifier:my_end
						ArgumentList:0
							Argument:0
								Constant:0
		ExpressionStatement:mysql_client_init = org_my_init_done = 0
			AssignmentExpression:mysql_client_init = org_my_init_done = 0
				Identifier:mysql_client_init
				AssignmentExpression:org_my_init_done = 0
					Identifier:org_my_init_done
					Constant:0
	ReturnType:void STDCALL
	Identifier:mysql_server_end
	ParameterList:
FunctionDef:mysql_thread_init ()
	CompoundStatement:
		ReturnStatement:return my_thread_init();
			CallExpression:my_thread_init()
				Callee:my_thread_init
					Identifier:my_thread_init
				ArgumentList:
	ReturnType:bool STDCALL
	Identifier:mysql_thread_init
	ParameterList:
FunctionDef:mysql_thread_end ()
	CompoundStatement:
		ExpressionStatement:my_thread_end()
			CallExpression:my_thread_end()
				Callee:my_thread_end
					Identifier:my_thread_end
				ArgumentList:
	ReturnType:void STDCALL
	Identifier:mysql_thread_end
	ParameterList:
FunctionDef:append_wild (char *to , char *end , const char *wild)
	CompoundStatement:
		ExpressionStatement:end -= 5
			AssignmentExpression:end -= 5
				Identifier:end
				Constant:5
		Statement:/* Some extra */
		IfStatement:if (wild && wild[0])
			Condition:wild && wild[0]
				AndExpression:wild && wild[0]
					Identifier:wild
					ArrayIndexing:wild[0]
						Identifier:wild
						Constant:0
			CompoundStatement:
				ExpressionStatement:to = my_stpcpy(to, " like '")
					AssignmentExpression:to = my_stpcpy(to, " like '")
						Identifier:to
						CallExpression:my_stpcpy(to, " like '")
							Callee:my_stpcpy
								Identifier:my_stpcpy
							ArgumentList:to
								Argument:to
									Identifier:to
								Argument:" like '"
									Constant:" like '"
				WhileStatement:while (*wild && to < end)
					Condition:*wild && to < end
						AndExpression:*wild && to < end
							UnaryOperationExpression:*wild
								UnaryOperator:*
								Identifier:wild
							RelationalExpression:to < end
								Identifier:to
								Identifier:end
					CompoundStatement:
						IfStatement:if (*wild == '\\' || *wild == '\'')
							Condition:*wild == '\\' || *wild == '\''
								OrExpression:*wild == '\\' || *wild == '\''
									EqualityExpression:*wild == '\\'
										UnaryOperationExpression:*wild
											UnaryOperator:*
											Identifier:wild
										Constant:'\\'
									EqualityExpression:*wild == '\''
										UnaryOperationExpression:*wild
											UnaryOperator:*
											Identifier:wild
										Constant:'\''
							ExpressionStatement:*to++ = '\\'
								AssignmentExpression:*to++ = '\\'
									UnaryOperationExpression:*to++
										UnaryOperator:*
										PostIncDecOperationExpression:to++
											Identifier:to
											IncDec:++
									Constant:'\\'
						ExpressionStatement:*to++ = *wild++
							AssignmentExpression:*to++ = *wild++
								UnaryOperationExpression:*to++
									UnaryOperator:*
									PostIncDecOperationExpression:to++
										Identifier:to
										IncDec:++
								UnaryOperationExpression:*wild++
									UnaryOperator:*
									PostIncDecOperationExpression:wild++
										Identifier:wild
										IncDec:++
				IfStatement:if (*wild)
					Condition:*wild
						UnaryOperationExpression:*wild
							UnaryOperator:*
							Identifier:wild
					Statement:/* Too small buffer */
				ExpressionStatement:*to++ = '%'
					AssignmentExpression:*to++ = '%'
						UnaryOperationExpression:*to++
							UnaryOperator:*
							PostIncDecOperationExpression:to++
								Identifier:to
								IncDec:++
						Constant:'%'
				Statement:/* Nicer this way */
				ExpressionStatement:to[0] = '\''
					AssignmentExpression:to[0] = '\''
						ArrayIndexing:to[0]
							Identifier:to
							Constant:0
						Constant:'\''
				ExpressionStatement:to[1] = 0
					AssignmentExpression:to[1] = 0
						ArrayIndexing:to[1]
							Identifier:to
							Constant:1
						Constant:0
	ReturnType:static void
	Identifier:append_wild
	ParameterList:char *to , char *end , const char *wild
		Parameter:char *to
			ParameterType:char *
			Identifier:to
		Parameter:char *end
			ParameterType:char *
			Identifier:end
		Parameter:const char *wild
			ParameterType:const char *
			Identifier:wild
IdentifierDeclStatement:null
	IdentifierDecl:*env
		IdentifierDeclType:ifndef DBUG_OFF char *
		Identifier:env
IdentifierDeclStatement:null
	IdentifierDecl:buff[80]
		IdentifierDeclType:char [ 80 ]
		Identifier:buff
FunctionDef:mysql_change_user (MYSQL *mysql , const char *user , const char *passwd , const char *db)
	CompoundStatement:
		IdentifierDeclStatement:int rc;
			IdentifierDecl:rc
				IdentifierDeclType:int
				Identifier:rc
		IdentifierDeclStatement:CHARSET_INFO *saved_cs = mysql->charset;
			IdentifierDecl:*saved_cs = mysql->charset
				IdentifierDeclType:CHARSET_INFO *
				Identifier:saved_cs
				AssignmentExpression:*saved_cs = mysql->charset
					Identifier:saved_cs
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
		IdentifierDeclStatement:char *saved_user = mysql->user;
			IdentifierDecl:*saved_user = mysql->user
				IdentifierDeclType:char *
				Identifier:saved_user
				AssignmentExpression:*saved_user = mysql->user
					Identifier:saved_user
					PtrMemberAccess:mysql->user
						Identifier:mysql
						Identifier:user
		IdentifierDeclStatement:char *saved_passwd = mysql->passwd;
			IdentifierDecl:*saved_passwd = mysql->passwd
				IdentifierDeclType:char *
				Identifier:saved_passwd
				AssignmentExpression:*saved_passwd = mysql->passwd
					Identifier:saved_passwd
					PtrMemberAccess:mysql->passwd
						Identifier:mysql
						Identifier:passwd
		IdentifierDeclStatement:char *saved_db = mysql->db;
			IdentifierDecl:*saved_db = mysql->db
				IdentifierDeclType:char *
				Identifier:saved_db
				AssignmentExpression:*saved_db = mysql->db
					Identifier:saved_db
					PtrMemberAccess:mysql->db
						Identifier:mysql
						Identifier:db
		ExpressionStatement:DBUG_ENTER("mysql_change_user")
			CallExpression:DBUG_ENTER("mysql_change_user")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_change_user"
					Argument:"mysql_change_user"
						Constant:"mysql_change_user"
		Statement:/* Get the connection-default character set. */
		IfStatement:if (mysql_init_character_set(mysql))
			Condition:mysql_init_character_set(mysql)
				CallExpression:mysql_init_character_set(mysql)
					Callee:mysql_init_character_set
						Identifier:mysql_init_character_set
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
			CompoundStatement:
				ExpressionStatement:mysql->charset = saved_cs
					AssignmentExpression:mysql->charset = saved_cs
						PtrMemberAccess:mysql->charset
							Identifier:mysql
							Identifier:charset
						Identifier:saved_cs
				ExpressionStatement:DBUG_RETURN(true)
					CallExpression:DBUG_RETURN(true)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:true
							Argument:true
								Identifier:true
		Statement:/*    Use an empty string instead of NULL.    Alloc user and password on heap because mysql_reconnect()    calls mysql_close() on success.  */
		ExpressionStatement:mysql->user = my_strdup(PSI_NOT_INSTRUMENTED, user ? user : "", MYF(MY_WME))
			AssignmentExpression:mysql->user = my_strdup(PSI_NOT_INSTRUMENTED, user ? user : "", MYF(MY_WME))
				PtrMemberAccess:mysql->user
					Identifier:mysql
					Identifier:user
				CallExpression:my_strdup(PSI_NOT_INSTRUMENTED, user ? user : "", MYF(MY_WME))
					Callee:my_strdup
						Identifier:my_strdup
					ArgumentList:PSI_NOT_INSTRUMENTED
						Argument:PSI_NOT_INSTRUMENTED
							Identifier:PSI_NOT_INSTRUMENTED
						Argument:user ? user : ""
							ConditionalExpression:user ? user : ""
								Condition:user
									Identifier:user
								Identifier:user
								Constant:""
						Argument:MYF(MY_WME)
							CallExpression:MYF(MY_WME)
								Callee:MYF
									Identifier:MYF
								ArgumentList:MY_WME
									Argument:MY_WME
										Identifier:MY_WME
		ExpressionStatement:mysql->passwd =      my_strdup(PSI_NOT_INSTRUMENTED, passwd ? passwd : "", MYF(MY_WME))
			AssignmentExpression:mysql->passwd =      my_strdup(PSI_NOT_INSTRUMENTED, passwd ? passwd : "", MYF(MY_WME))
				PtrMemberAccess:mysql->passwd
					Identifier:mysql
					Identifier:passwd
				CallExpression:my_strdup(PSI_NOT_INSTRUMENTED, passwd ? passwd : "", MYF(MY_WME))
					Callee:my_strdup
						Identifier:my_strdup
					ArgumentList:PSI_NOT_INSTRUMENTED
						Argument:PSI_NOT_INSTRUMENTED
							Identifier:PSI_NOT_INSTRUMENTED
						Argument:passwd ? passwd : ""
							ConditionalExpression:passwd ? passwd : ""
								Condition:passwd
									Identifier:passwd
								Identifier:passwd
								Constant:""
						Argument:MYF(MY_WME)
							CallExpression:MYF(MY_WME)
								Callee:MYF
									Identifier:MYF
								ArgumentList:MY_WME
									Argument:MY_WME
										Identifier:MY_WME
		ExpressionStatement:mysql->db = 0
			AssignmentExpression:mysql->db = 0
				PtrMemberAccess:mysql->db
					Identifier:mysql
					Identifier:db
				Constant:0
		ExpressionStatement:rc = run_plugin_auth(mysql, 0, 0, 0, db)
			AssignmentExpression:rc = run_plugin_auth(mysql, 0, 0, 0, db)
				Identifier:rc
				CallExpression:run_plugin_auth(mysql, 0, 0, 0, db)
					Callee:run_plugin_auth
						Identifier:run_plugin_auth
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:0
							Constant:0
						Argument:0
							Constant:0
						Argument:0
							Constant:0
						Argument:db
							Identifier:db
		ExpressionStatement:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
			CallExpression:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
				Callee:MYSQL_TRACE_STAGE
					Identifier:MYSQL_TRACE_STAGE
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:READY_FOR_COMMAND
						Identifier:READY_FOR_COMMAND
		Statement:/*    The server will close all statements no matter was the attempt    to change user successful or not.  */
		ExpressionStatement:mysql_detach_stmt_list(&mysql->stmts, "mysql_change_user")
			CallExpression:mysql_detach_stmt_list(&mysql->stmts, "mysql_change_user")
				Callee:mysql_detach_stmt_list
					Identifier:mysql_detach_stmt_list
				ArgumentList:&mysql->stmts
					Argument:&mysql->stmts
						UnaryOperationExpression:&mysql->stmts
							UnaryOperator:&
							PtrMemberAccess:mysql->stmts
								Identifier:mysql
								Identifier:stmts
					Argument:"mysql_change_user"
						Constant:"mysql_change_user"
		IfStatement:if (rc == 0)
			Condition:rc == 0
				EqualityExpression:rc == 0
					Identifier:rc
					Constant:0
			CompoundStatement:
				Statement:/* Free old connect information */
				ExpressionStatement:my_free(saved_user)
					CallExpression:my_free(saved_user)
						Callee:my_free
							Identifier:my_free
						ArgumentList:saved_user
							Argument:saved_user
								Identifier:saved_user
				ExpressionStatement:my_free(saved_passwd)
					CallExpression:my_free(saved_passwd)
						Callee:my_free
							Identifier:my_free
						ArgumentList:saved_passwd
							Argument:saved_passwd
								Identifier:saved_passwd
				ExpressionStatement:my_free(saved_db)
					CallExpression:my_free(saved_db)
						Callee:my_free
							Identifier:my_free
						ArgumentList:saved_db
							Argument:saved_db
								Identifier:saved_db
				Statement:/* alloc new connect information */
				ExpressionStatement:mysql->db = db ? my_strdup(PSI_NOT_INSTRUMENTED, db, MYF(MY_WME)) : 0
					AssignmentExpression:mysql->db = db ? my_strdup(PSI_NOT_INSTRUMENTED, db, MYF(MY_WME)) : 0
						PtrMemberAccess:mysql->db
							Identifier:mysql
							Identifier:db
						ConditionalExpression:db ? my_strdup(PSI_NOT_INSTRUMENTED, db, MYF(MY_WME)) : 0
							Condition:db
								Identifier:db
							CallExpression:my_strdup(PSI_NOT_INSTRUMENTED, db, MYF(MY_WME))
								Callee:my_strdup
									Identifier:my_strdup
								ArgumentList:PSI_NOT_INSTRUMENTED
									Argument:PSI_NOT_INSTRUMENTED
										Identifier:PSI_NOT_INSTRUMENTED
									Argument:db
										Identifier:db
									Argument:MYF(MY_WME)
										CallExpression:MYF(MY_WME)
											Callee:MYF
												Identifier:MYF
											ArgumentList:MY_WME
												Argument:MY_WME
													Identifier:MY_WME
							Constant:0
		ExpressionStatement:DBUG_RETURN(rc)
			CallExpression:DBUG_RETURN(rc)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:rc
					Argument:rc
						Identifier:rc
	ReturnType:bool STDCALL
	Identifier:mysql_change_user
	ParameterList:MYSQL *mysql , const char *user , const char *passwd , const char *db
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:const char *user
			ParameterType:const char *
			Identifier:user
		Parameter:const char *passwd
			ParameterType:const char *
			Identifier:passwd
		Parameter:const char *db
			ParameterType:const char *
			Identifier:db
IdentifierDeclStatement:null
	IdentifierDecl:*getpwuid(uid_t)
		IdentifierDeclType:struct passwd * ( uid_t )
		Identifier:getpwuid
IdentifierDeclStatement:null
	IdentifierDecl:*getlogin(void)
		IdentifierDeclType:char * ( void )
		Identifier:getlogin
FunctionDef:read_user_name (char *name)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("read_user_name")
			CallExpression:DBUG_ENTER("read_user_name")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"read_user_name"
					Argument:"read_user_name"
						Constant:"read_user_name"
		IfStatement:if (geteuid() == 0)
			Condition:geteuid() == 0
				EqualityExpression:geteuid() == 0
					CallExpression:geteuid()
						Callee:geteuid
							Identifier:geteuid
						ArgumentList:
					Constant:0
			ExpressionStatement:(void)my_stpcpy(name, "root")
				CastExpression:(void)my_stpcpy(name, "root")
					CastTarget:void
					CallExpression:my_stpcpy(name, "root")
						Callee:my_stpcpy
							Identifier:my_stpcpy
						ArgumentList:name
							Argument:name
								Identifier:name
							Argument:"root"
								Constant:"root"
		Statement:/* allow use of surun */
		ExpressionStatement:DBUG_VOID_RETURN
			Identifier:DBUG_VOID_RETURN
	ReturnType:void
	Identifier:read_user_name
	ParameterList:char *name
		Parameter:char *name
			ParameterType:char *
			Identifier:name
FunctionDef:read_user_name (char *name)
	CompoundStatement:
		IdentifierDeclStatement:char *str = getenv("USER");
			IdentifierDecl:*str = getenv("USER")
				IdentifierDeclType:char *
				Identifier:str
				AssignmentExpression:*str = getenv("USER")
					Identifier:str
					CallExpression:getenv("USER")
						Callee:getenv
							Identifier:getenv
						ArgumentList:"USER"
							Argument:"USER"
								Constant:"USER"
		Statement:/* ODBC will send user variable */
		ExpressionStatement:strmake(name, str ? str : "ODBC", USERNAME_LENGTH)
			CallExpression:strmake(name, str ? str : "ODBC", USERNAME_LENGTH)
				Callee:strmake
					Identifier:strmake
				ArgumentList:name
					Argument:name
						Identifier:name
					Argument:str ? str : "ODBC"
						ConditionalExpression:str ? str : "ODBC"
							Condition:str
								Identifier:str
							Identifier:str
							Constant:"ODBC"
					Argument:USERNAME_LENGTH
						Identifier:USERNAME_LENGTH
	ReturnType:void
	Identifier:read_user_name
	ParameterList:char *name
		Parameter:char *name
			ParameterType:char *
			Identifier:name
FunctionDef:handle_local_infile (MYSQL *mysql , const char *net_filename)
	CompoundStatement:
		IdentifierDeclStatement:bool result = 1;
			IdentifierDecl:result = 1
				IdentifierDeclType:bool
				Identifier:result
				AssignmentExpression:result = 1
					Identifier:result
					Constant:1
		IdentifierDeclStatement:uint packet_length = MY_ALIGN(mysql->net.max_packet - 16, IO_SIZE);
			IdentifierDecl:packet_length = MY_ALIGN(mysql->net.max_packet - 16, IO_SIZE)
				IdentifierDeclType:uint
				Identifier:packet_length
				AssignmentExpression:packet_length = MY_ALIGN(mysql->net.max_packet - 16, IO_SIZE)
					Identifier:packet_length
					CallExpression:MY_ALIGN(mysql->net.max_packet - 16, IO_SIZE)
						Callee:MY_ALIGN
							Identifier:MY_ALIGN
						ArgumentList:mysql->net.max_packet - 16
							Argument:mysql->net.max_packet - 16
								AdditiveExpression:mysql->net.max_packet - 16
									MemberAccess:mysql->net.max_packet
										PtrMemberAccess:mysql->net
											Identifier:mysql
											Identifier:net
										Identifier:max_packet
									Constant:16
							Argument:IO_SIZE
								Identifier:IO_SIZE
		IdentifierDeclStatement:NET *net = &mysql->net;
			IdentifierDecl:*net = &mysql->net
				IdentifierDeclType:NET *
				Identifier:net
				AssignmentExpression:*net = &mysql->net
					Identifier:net
					UnaryOperationExpression:&mysql->net
						UnaryOperator:&
						PtrMemberAccess:mysql->net
							Identifier:mysql
							Identifier:net
		IdentifierDeclStatement:int readcount;
			IdentifierDecl:readcount
				IdentifierDeclType:int
				Identifier:readcount
		IdentifierDeclStatement:void *li_ptr;
			IdentifierDecl:*li_ptr
				IdentifierDeclType:void *
				Identifier:li_ptr
		Statement:/* pass state to local_infile functions */
		IdentifierDeclStatement:char *buf;
			IdentifierDecl:*buf
				IdentifierDeclType:char *
				Identifier:buf
		Statement:/* buffer to be filled by local_infile_read */
		IdentifierDeclStatement:struct st_mysql_options *options = &mysql->options;
			IdentifierDecl:*options = &mysql->options
				IdentifierDeclType:struct st_mysql_options *
				Identifier:options
				AssignmentExpression:*options = &mysql->options
					Identifier:options
					UnaryOperationExpression:&mysql->options
						UnaryOperator:&
						PtrMemberAccess:mysql->options
							Identifier:mysql
							Identifier:options
		ExpressionStatement:DBUG_ENTER("handle_local_infile")
			CallExpression:DBUG_ENTER("handle_local_infile")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"handle_local_infile"
					Argument:"handle_local_infile"
						Constant:"handle_local_infile"
		Statement:/* check that we've got valid callback functions */
		IfStatement:if (!(options->local_infile_init && options->local_infile_read &&        options->local_infile_end && options->local_infile_error))
			Condition:!(options->local_infile_init && options->local_infile_read &&        options->local_infile_end && options->local_infile_error)
				UnaryOperationExpression:!(options->local_infile_init && options->local_infile_read &&        options->local_infile_end && options->local_infile_error)
					UnaryOperator:!
					AndExpression:options->local_infile_init && options->local_infile_read &&        options->local_infile_end && options->local_infile_error
						PtrMemberAccess:options->local_infile_init
							Identifier:options
							Identifier:local_infile_init
						AndExpression:options->local_infile_read &&        options->local_infile_end && options->local_infile_error
							PtrMemberAccess:options->local_infile_read
								Identifier:options
								Identifier:local_infile_read
							AndExpression:options->local_infile_end && options->local_infile_error
								PtrMemberAccess:options->local_infile_end
									Identifier:options
									Identifier:local_infile_end
								PtrMemberAccess:options->local_infile_error
									Identifier:options
									Identifier:local_infile_error
			CompoundStatement:
				Statement:/* if any of the functions is invalid, set the default */
				ExpressionStatement:mysql_set_local_infile_default(mysql)
					CallExpression:mysql_set_local_infile_default(mysql)
						Callee:mysql_set_local_infile_default
							Identifier:mysql_set_local_infile_default
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
		Statement:/* copy filename into local memory and allocate read buffer */
		Statement:if
		Statement:(
		Statement:!
		Statement:(
		Statement:buf
		Statement:=
		Statement:pointer_cast
		Statement:<
		Statement:char
		Statement:*
		Statement:>
		Statement:(
		Statement:my_malloc
		Statement:(
		Statement:PSI_NOT_INSTRUMENTED
		Statement:,
		Statement:packet_length
		Statement:,
		Statement:MYF
		Statement:(
		Statement:0
		Statement:)
		Statement:)
		Statement:)
		Statement:)
		Statement:)
		CompoundStatement:
			ExpressionStatement:set_mysql_error(mysql, CR_OUT_OF_MEMORY, unknown_sqlstate)
				CallExpression:set_mysql_error(mysql, CR_OUT_OF_MEMORY, unknown_sqlstate)
					Callee:set_mysql_error
						Identifier:set_mysql_error
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:CR_OUT_OF_MEMORY
							Identifier:CR_OUT_OF_MEMORY
						Argument:unknown_sqlstate
							Identifier:unknown_sqlstate
			ExpressionStatement:DBUG_RETURN(1)
				CallExpression:DBUG_RETURN(1)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:1
						Argument:1
							Constant:1
		Statement:/* initialize local infile (open file, usually) */
		IfStatement:if ((*options->local_infile_init)(&li_ptr, net_filename,                                    options->local_infile_userdata))
			Condition:(*options->local_infile_init)(&li_ptr, net_filename,                                    options->local_infile_userdata)
				CallExpression:(*options->local_infile_init)(&li_ptr, net_filename,                                    options->local_infile_userdata)
					Callee:*options->local_infile_init
						UnaryOperationExpression:*options->local_infile_init
							UnaryOperator:*
							PtrMemberAccess:options->local_infile_init
								Identifier:options
								Identifier:local_infile_init
					ArgumentList:&li_ptr
						Argument:&li_ptr
							UnaryOperationExpression:&li_ptr
								UnaryOperator:&
								Identifier:li_ptr
						Argument:net_filename
							Identifier:net_filename
						Argument:options->local_infile_userdata
							PtrMemberAccess:options->local_infile_userdata
								Identifier:options
								Identifier:local_infile_userdata
			CompoundStatement:
				ExpressionStatement:MYSQL_TRACE(SEND_FILE, mysql, (0, NULL))
					CallExpression:MYSQL_TRACE(SEND_FILE, mysql, (0, NULL))
						Callee:MYSQL_TRACE
							Identifier:MYSQL_TRACE
						ArgumentList:SEND_FILE
							Argument:SEND_FILE
								Identifier:SEND_FILE
							Argument:mysql
								Identifier:mysql
							Argument:0, NULL
								Expression:0, NULL
									Constant:0
									Identifier:NULL
				ExpressionStatement:(void)my_net_write(net, (const uchar *)"", 0)
					CastExpression:(void)my_net_write(net, (const uchar *)"", 0)
						CastTarget:void
						CallExpression:my_net_write(net, (const uchar *)"", 0)
							Callee:my_net_write
								Identifier:my_net_write
							ArgumentList:net
								Argument:net
									Identifier:net
								Argument:(const uchar *)""
									CastExpression:(const uchar *)""
										CastTarget:const uchar *
										Constant:""
								Argument:0
									Constant:0
				Statement:/* Server needs one packet */
				ExpressionStatement:net_flush(net)
					CallExpression:net_flush(net)
						Callee:net_flush
							Identifier:net_flush
						ArgumentList:net
							Argument:net
								Identifier:net
				ExpressionStatement:MYSQL_TRACE(PACKET_SENT, mysql, (0))
					CallExpression:MYSQL_TRACE(PACKET_SENT, mysql, (0))
						Callee:MYSQL_TRACE
							Identifier:MYSQL_TRACE
						ArgumentList:PACKET_SENT
							Argument:PACKET_SENT
								Identifier:PACKET_SENT
							Argument:mysql
								Identifier:mysql
							Argument:0
								Constant:0
				ExpressionStatement:my_stpcpy(net->sqlstate, unknown_sqlstate)
					CallExpression:my_stpcpy(net->sqlstate, unknown_sqlstate)
						Callee:my_stpcpy
							Identifier:my_stpcpy
						ArgumentList:net->sqlstate
							Argument:net->sqlstate
								PtrMemberAccess:net->sqlstate
									Identifier:net
									Identifier:sqlstate
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				ExpressionStatement:net->last_errno = (*options->local_infile_error)(        li_ptr, net->last_error, sizeof(net->last_error) - 1)
					AssignmentExpression:net->last_errno = (*options->local_infile_error)(        li_ptr, net->last_error, sizeof(net->last_error) - 1)
						PtrMemberAccess:net->last_errno
							Identifier:net
							Identifier:last_errno
						CallExpression:(*options->local_infile_error)(        li_ptr, net->last_error, sizeof(net->last_error) - 1)
							Callee:*options->local_infile_error
								UnaryOperationExpression:*options->local_infile_error
									UnaryOperator:*
									PtrMemberAccess:options->local_infile_error
										Identifier:options
										Identifier:local_infile_error
							ArgumentList:li_ptr
								Argument:li_ptr
									Identifier:li_ptr
								Argument:net->last_error
									PtrMemberAccess:net->last_error
										Identifier:net
										Identifier:last_error
								Argument:sizeof(net->last_error) - 1
									AdditiveExpression:sizeof(net->last_error) - 1
										SizeofExpression:sizeof(net->last_error)
											Sizeof:sizeof
											PtrMemberAccess:net->last_error
												Identifier:net
												Identifier:last_error
										Constant:1
				Statement:MYSQL_TRACE
				Statement:(
				Statement:ERROR
				Statement:,
				Statement:mysql
				Statement:,
				Statement:(
				Statement:)
				Statement:)
				ExpressionStatement:
				GotoStatement:goto err;
					Identifier:err
		Statement:/* read blocks of data from local infile callback */
		WhileStatement:while ((readcount =              (*options->local_infile_read)(li_ptr, buf, packet_length)) > 0)
			Condition:(readcount =              (*options->local_infile_read)(li_ptr, buf, packet_length)) > 0
				RelationalExpression:(readcount =              (*options->local_infile_read)(li_ptr, buf, packet_length)) > 0
					AssignmentExpression:readcount =              (*options->local_infile_read)(li_ptr, buf, packet_length)
						Identifier:readcount
						CallExpression:(*options->local_infile_read)(li_ptr, buf, packet_length)
							Callee:*options->local_infile_read
								UnaryOperationExpression:*options->local_infile_read
									UnaryOperator:*
									PtrMemberAccess:options->local_infile_read
										Identifier:options
										Identifier:local_infile_read
							ArgumentList:li_ptr
								Argument:li_ptr
									Identifier:li_ptr
								Argument:buf
									Identifier:buf
								Argument:packet_length
									Identifier:packet_length
					Constant:0
			CompoundStatement:
				ExpressionStatement:MYSQL_TRACE(SEND_FILE, mysql,                ((size_t)readcount, (const unsigned char *)buf))
					CallExpression:MYSQL_TRACE(SEND_FILE, mysql,                ((size_t)readcount, (const unsigned char *)buf))
						Callee:MYSQL_TRACE
							Identifier:MYSQL_TRACE
						ArgumentList:SEND_FILE
							Argument:SEND_FILE
								Identifier:SEND_FILE
							Argument:mysql
								Identifier:mysql
							Argument:(size_t)readcount, (const unsigned char *)buf
								Expression:(size_t)readcount, (const unsigned char *)buf
									CastExpression:(size_t)readcount
										CastTarget:size_t
										Identifier:readcount
									CastExpression:(const unsigned char *)buf
										CastTarget:const unsigned char *
										Identifier:buf
				IfStatement:if (my_net_write(net, (uchar *)buf, readcount))
					Condition:my_net_write(net, (uchar *)buf, readcount)
						CallExpression:my_net_write(net, (uchar *)buf, readcount)
							Callee:my_net_write
								Identifier:my_net_write
							ArgumentList:net
								Argument:net
									Identifier:net
								Argument:(uchar *)buf
									CastExpression:(uchar *)buf
										CastTarget:uchar *
										Identifier:buf
								Argument:readcount
									Identifier:readcount
					CompoundStatement:
						ExpressionStatement:DBUG_PRINT(          "error",          ("Lost connection to MySQL server during LOAD DATA of local file"))
							CallExpression:DBUG_PRINT(          "error",          ("Lost connection to MySQL server during LOAD DATA of local file"))
								Callee:DBUG_PRINT
									Identifier:DBUG_PRINT
								ArgumentList:"error"
									Argument:"error"
										Constant:"error"
									Argument:"Lost connection to MySQL server during LOAD DATA of local file"
										Constant:"Lost connection to MySQL server during LOAD DATA of local file"
						ExpressionStatement:set_mysql_error(mysql, CR_SERVER_LOST, unknown_sqlstate)
							CallExpression:set_mysql_error(mysql, CR_SERVER_LOST, unknown_sqlstate)
								Callee:set_mysql_error
									Identifier:set_mysql_error
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
									Argument:CR_SERVER_LOST
										Identifier:CR_SERVER_LOST
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
						GotoStatement:goto err;
							Identifier:err
				ExpressionStatement:MYSQL_TRACE(PACKET_SENT, mysql, (static_cast<size_t>(readcount)))
					CallExpression:MYSQL_TRACE(PACKET_SENT, mysql, (static_cast<size_t>(readcount)))
						Callee:MYSQL_TRACE
							Identifier:MYSQL_TRACE
						ArgumentList:PACKET_SENT
							Argument:PACKET_SENT
								Identifier:PACKET_SENT
							Argument:mysql
								Identifier:mysql
							Argument:static_cast<size_t>(readcount)
								RelationalExpression:static_cast<size_t>(readcount)
									Identifier:static_cast
									RelationalExpression:size_t>(readcount)
										Identifier:size_t
										Identifier:readcount
		Statement:/* Send empty packet to mark end of file */
		ExpressionStatement:MYSQL_TRACE(SEND_FILE, mysql, (0, NULL))
			CallExpression:MYSQL_TRACE(SEND_FILE, mysql, (0, NULL))
				Callee:MYSQL_TRACE
					Identifier:MYSQL_TRACE
				ArgumentList:SEND_FILE
					Argument:SEND_FILE
						Identifier:SEND_FILE
					Argument:mysql
						Identifier:mysql
					Argument:0, NULL
						Expression:0, NULL
							Constant:0
							Identifier:NULL
		IfStatement:if (my_net_write(net, (const uchar *)"", 0) || net_flush(net))
			Condition:my_net_write(net, (const uchar *)"", 0) || net_flush(net)
				OrExpression:my_net_write(net, (const uchar *)"", 0) || net_flush(net)
					CallExpression:my_net_write(net, (const uchar *)"", 0)
						Callee:my_net_write
							Identifier:my_net_write
						ArgumentList:net
							Argument:net
								Identifier:net
							Argument:(const uchar *)""
								CastExpression:(const uchar *)""
									CastTarget:const uchar *
									Constant:""
							Argument:0
								Constant:0
					CallExpression:net_flush(net)
						Callee:net_flush
							Identifier:net_flush
						ArgumentList:net
							Argument:net
								Identifier:net
			CompoundStatement:
				ExpressionStatement:set_mysql_error(mysql, CR_SERVER_LOST, unknown_sqlstate)
					CallExpression:set_mysql_error(mysql, CR_SERVER_LOST, unknown_sqlstate)
						Callee:set_mysql_error
							Identifier:set_mysql_error
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:CR_SERVER_LOST
								Identifier:CR_SERVER_LOST
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				GotoStatement:goto err;
					Identifier:err
		ExpressionStatement:MYSQL_TRACE(PACKET_SENT, mysql, (0))
			CallExpression:MYSQL_TRACE(PACKET_SENT, mysql, (0))
				Callee:MYSQL_TRACE
					Identifier:MYSQL_TRACE
				ArgumentList:PACKET_SENT
					Argument:PACKET_SENT
						Identifier:PACKET_SENT
					Argument:mysql
						Identifier:mysql
					Argument:0
						Constant:0
		IfStatement:if (readcount < 0)
			Condition:readcount < 0
				RelationalExpression:readcount < 0
					Identifier:readcount
					Constant:0
			CompoundStatement:
				ExpressionStatement:net->last_errno = (*options->local_infile_error)(        li_ptr, net->last_error, sizeof(net->last_error) - 1)
					AssignmentExpression:net->last_errno = (*options->local_infile_error)(        li_ptr, net->last_error, sizeof(net->last_error) - 1)
						PtrMemberAccess:net->last_errno
							Identifier:net
							Identifier:last_errno
						CallExpression:(*options->local_infile_error)(        li_ptr, net->last_error, sizeof(net->last_error) - 1)
							Callee:*options->local_infile_error
								UnaryOperationExpression:*options->local_infile_error
									UnaryOperator:*
									PtrMemberAccess:options->local_infile_error
										Identifier:options
										Identifier:local_infile_error
							ArgumentList:li_ptr
								Argument:li_ptr
									Identifier:li_ptr
								Argument:net->last_error
									PtrMemberAccess:net->last_error
										Identifier:net
										Identifier:last_error
								Argument:sizeof(net->last_error) - 1
									AdditiveExpression:sizeof(net->last_error) - 1
										SizeofExpression:sizeof(net->last_error)
											Sizeof:sizeof
											PtrMemberAccess:net->last_error
												Identifier:net
												Identifier:last_error
										Constant:1
				Statement:MYSQL_TRACE
				Statement:(
				Statement:ERROR
				Statement:,
				Statement:mysql
				Statement:,
				Statement:(
				Statement:)
				Statement:)
				ExpressionStatement:
				GotoStatement:goto err;
					Identifier:err
		ExpressionStatement:result = 0
			AssignmentExpression:result = 0
				Identifier:result
				Constant:0
		Statement:/* Ok */
		Label:err:
			Identifier:err
		Statement:/* free up memory allocated with _init, usually */
		ExpressionStatement:(*options->local_infile_end)(li_ptr)
			CallExpression:(*options->local_infile_end)(li_ptr)
				Callee:*options->local_infile_end
					UnaryOperationExpression:*options->local_infile_end
						UnaryOperator:*
						PtrMemberAccess:options->local_infile_end
							Identifier:options
							Identifier:local_infile_end
				ArgumentList:li_ptr
					Argument:li_ptr
						Identifier:li_ptr
		ExpressionStatement:my_free(buf)
			CallExpression:my_free(buf)
				Callee:my_free
					Identifier:my_free
				ArgumentList:buf
					Argument:buf
						Identifier:buf
		ExpressionStatement:DBUG_RETURN(result)
			CallExpression:DBUG_RETURN(result)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:result
					Argument:result
						Identifier:result
	ReturnType:endifbool
	Identifier:handle_local_infile
	ParameterList:MYSQL *mysql , const char *net_filename
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:const char *net_filename
			ParameterType:const char *
			Identifier:net_filename
ClassDefStatement:struct default_local_infile_data {  int fd;  int error_num;  const char *filename;  char error_msg[LOCAL_INFILE_ERROR_LEN];}
IdentifierDeclStatement:null
	IdentifierDecl:*data
		IdentifierDeclType:default_local_infile_data *
		Identifier:data
IdentifierDeclStatement:null
	IdentifierDecl:tmp_name[FN_REFLEN]
		IdentifierDeclType:char [ FN_REFLEN ]
		Identifier:tmp_name
IdentifierDeclStatement:null
	IdentifierDecl:errbuf[MYSYS_STRERROR_SIZE]
		IdentifierDeclType:char [ MYSYS_STRERROR_SIZE ]
		Identifier:errbuf
FunctionDef:default_local_infile_read (void *ptr , char *buf , uint buf_len)
	CompoundStatement:
		IdentifierDeclStatement:int count;
			IdentifierDecl:count
				IdentifierDeclType:int
				Identifier:count
		IdentifierDeclStatement:default_local_infile_data *data = (default_local_infile_data *)ptr;
			IdentifierDecl:*data = (default_local_infile_data *)ptr
				IdentifierDeclType:default_local_infile_data *
				Identifier:data
				AssignmentExpression:*data = (default_local_infile_data *)ptr
					Identifier:data
					CastExpression:(default_local_infile_data *)ptr
						CastTarget:default_local_infile_data *
						Identifier:ptr
		IfStatement:if ((count = (int)my_read(data->fd, (uchar *)buf, buf_len, MYF(0))) < 0)
			Condition:(count = (int)my_read(data->fd, (uchar *)buf, buf_len, MYF(0))) < 0
				RelationalExpression:(count = (int)my_read(data->fd, (uchar *)buf, buf_len, MYF(0))) < 0
					AssignmentExpression:count = (int)my_read(data->fd, (uchar *)buf, buf_len, MYF(0))
						Identifier:count
						CastExpression:(int)my_read(data->fd, (uchar *)buf, buf_len, MYF(0))
							CastTarget:int
							CallExpression:my_read(data->fd, (uchar *)buf, buf_len, MYF(0))
								Callee:my_read
									Identifier:my_read
								ArgumentList:data->fd
									Argument:data->fd
										PtrMemberAccess:data->fd
											Identifier:data
											Identifier:fd
									Argument:(uchar *)buf
										CastExpression:(uchar *)buf
											CastTarget:uchar *
											Identifier:buf
									Argument:buf_len
										Identifier:buf_len
									Argument:MYF(0)
										CallExpression:MYF(0)
											Callee:MYF
												Identifier:MYF
											ArgumentList:0
												Argument:0
													Constant:0
					Constant:0
			CompoundStatement:
				IdentifierDeclStatement:char errbuf[MYSYS_STRERROR_SIZE];
					IdentifierDecl:errbuf[MYSYS_STRERROR_SIZE]
						IdentifierDeclType:char [ MYSYS_STRERROR_SIZE ]
						Identifier:errbuf
						Identifier:MYSYS_STRERROR_SIZE
				ExpressionStatement:data->error_num = EE_READ
					AssignmentExpression:data->error_num = EE_READ
						PtrMemberAccess:data->error_num
							Identifier:data
							Identifier:error_num
						Identifier:EE_READ
				Statement:/* the errmsg for not entire file read */
				ExpressionStatement:snprintf(data->error_msg, sizeof(data->error_msg) - 1, EE(EE_READ),             data->filename, my_errno(),             my_strerror(errbuf, sizeof(errbuf), my_errno()))
					CallExpression:snprintf(data->error_msg, sizeof(data->error_msg) - 1, EE(EE_READ),             data->filename, my_errno(),             my_strerror(errbuf, sizeof(errbuf), my_errno()))
						Callee:snprintf
							Identifier:snprintf
						ArgumentList:data->error_msg
							Argument:data->error_msg
								PtrMemberAccess:data->error_msg
									Identifier:data
									Identifier:error_msg
							Argument:sizeof(data->error_msg) - 1
								AdditiveExpression:sizeof(data->error_msg) - 1
									SizeofExpression:sizeof(data->error_msg)
										Sizeof:sizeof
										PtrMemberAccess:data->error_msg
											Identifier:data
											Identifier:error_msg
									Constant:1
							Argument:EE(EE_READ)
								CallExpression:EE(EE_READ)
									Callee:EE
										Identifier:EE
									ArgumentList:EE_READ
										Argument:EE_READ
											Identifier:EE_READ
							Argument:data->filename
								PtrMemberAccess:data->filename
									Identifier:data
									Identifier:filename
							Argument:my_errno()
								CallExpression:my_errno()
									Callee:my_errno
										Identifier:my_errno
									ArgumentList:
							Argument:my_strerror(errbuf, sizeof(errbuf), my_errno())
								CallExpression:my_strerror(errbuf, sizeof(errbuf), my_errno())
									Callee:my_strerror
										Identifier:my_strerror
									ArgumentList:errbuf
										Argument:errbuf
											Identifier:errbuf
										Argument:sizeof(errbuf)
											SizeofExpression:sizeof(errbuf)
												Sizeof:sizeof
												Identifier:errbuf
										Argument:my_errno()
											CallExpression:my_errno()
												Callee:my_errno
													Identifier:my_errno
												ArgumentList:
		ReturnStatement:return count;
			Identifier:count
	ReturnType:static int
	Identifier:default_local_infile_read
	ParameterList:void *ptr , char *buf , uint buf_len
		Parameter:void *ptr
			ParameterType:void *
			Identifier:ptr
		Parameter:char *buf
			ParameterType:char *
			Identifier:buf
		Parameter:uint buf_len
			ParameterType:uint
			Identifier:buf_len
FunctionDef:default_local_infile_end (void *ptr)
	CompoundStatement:
		IdentifierDeclStatement:default_local_infile_data *data = (default_local_infile_data *)ptr;
			IdentifierDecl:*data = (default_local_infile_data *)ptr
				IdentifierDeclType:default_local_infile_data *
				Identifier:data
				AssignmentExpression:*data = (default_local_infile_data *)ptr
					Identifier:data
					CastExpression:(default_local_infile_data *)ptr
						CastTarget:default_local_infile_data *
						Identifier:ptr
		IfStatement:if (data)
			Condition:data
				Identifier:data
			Statement:/* If not error on open */
		CompoundStatement:
			IfStatement:if (data->fd >= 0)
				Condition:data->fd >= 0
					RelationalExpression:data->fd >= 0
						PtrMemberAccess:data->fd
							Identifier:data
							Identifier:fd
						Constant:0
				ExpressionStatement:my_close(data->fd, MYF(MY_WME))
					CallExpression:my_close(data->fd, MYF(MY_WME))
						Callee:my_close
							Identifier:my_close
						ArgumentList:data->fd
							Argument:data->fd
								PtrMemberAccess:data->fd
									Identifier:data
									Identifier:fd
							Argument:MYF(MY_WME)
								CallExpression:MYF(MY_WME)
									Callee:MYF
										Identifier:MYF
									ArgumentList:MY_WME
										Argument:MY_WME
											Identifier:MY_WME
			ExpressionStatement:my_free(ptr)
				CallExpression:my_free(ptr)
					Callee:my_free
						Identifier:my_free
					ArgumentList:ptr
						Argument:ptr
							Identifier:ptr
	ReturnType:static void
	Identifier:default_local_infile_end
	ParameterList:void *ptr
		Parameter:void *ptr
			ParameterType:void *
			Identifier:ptr
FunctionDef:default_local_infile_error (void *ptr , char *error_msg , uint error_msg_len)
	CompoundStatement:
		IdentifierDeclStatement:default_local_infile_data *data = (default_local_infile_data *)ptr;
			IdentifierDecl:*data = (default_local_infile_data *)ptr
				IdentifierDeclType:default_local_infile_data *
				Identifier:data
				AssignmentExpression:*data = (default_local_infile_data *)ptr
					Identifier:data
					CastExpression:(default_local_infile_data *)ptr
						CastTarget:default_local_infile_data *
						Identifier:ptr
		IfStatement:if (data)
			Condition:data
				Identifier:data
			Statement:/* If not error on open */
		CompoundStatement:
			ExpressionStatement:strmake(error_msg, data->error_msg, error_msg_len)
				CallExpression:strmake(error_msg, data->error_msg, error_msg_len)
					Callee:strmake
						Identifier:strmake
					ArgumentList:error_msg
						Argument:error_msg
							Identifier:error_msg
						Argument:data->error_msg
							PtrMemberAccess:data->error_msg
								Identifier:data
								Identifier:error_msg
						Argument:error_msg_len
							Identifier:error_msg_len
			ReturnStatement:return data->error_num;
				PtrMemberAccess:data->error_num
					Identifier:data
					Identifier:error_num
		Statement:/* This can only happen if we got error on malloc of handle */
		ExpressionStatement:my_stpcpy(error_msg, ER_CLIENT(CR_OUT_OF_MEMORY))
			CallExpression:my_stpcpy(error_msg, ER_CLIENT(CR_OUT_OF_MEMORY))
				Callee:my_stpcpy
					Identifier:my_stpcpy
				ArgumentList:error_msg
					Argument:error_msg
						Identifier:error_msg
					Argument:ER_CLIENT(CR_OUT_OF_MEMORY)
						CallExpression:ER_CLIENT(CR_OUT_OF_MEMORY)
							Callee:ER_CLIENT
								Identifier:ER_CLIENT
							ArgumentList:CR_OUT_OF_MEMORY
								Argument:CR_OUT_OF_MEMORY
									Identifier:CR_OUT_OF_MEMORY
		ReturnStatement:return CR_OUT_OF_MEMORY;
			Identifier:CR_OUT_OF_MEMORY
	ReturnType:static int
	Identifier:default_local_infile_error
	ParameterList:void *ptr , char *error_msg , uint error_msg_len
		Parameter:void *ptr
			ParameterType:void *
			Identifier:ptr
		Parameter:char *error_msg
			ParameterType:char *
			Identifier:error_msg
		Parameter:uint error_msg_len
			ParameterType:uint
			Identifier:error_msg_len
FunctionDef:mysql_set_local_infile_handler (MYSQL *mysql , int (*local_infile_init)(void **, const char *, void *) , int (*local_infile_read)(void *, char *, uint) , void (*local_infile_end)(void *) , int (*local_infile_error)(void *, char *, uint) , void *userdata)
	CompoundStatement:
		ExpressionStatement:mysql->options.local_infile_init = local_infile_init
			AssignmentExpression:mysql->options.local_infile_init = local_infile_init
				MemberAccess:mysql->options.local_infile_init
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_init
				Identifier:local_infile_init
		ExpressionStatement:mysql->options.local_infile_read = local_infile_read
			AssignmentExpression:mysql->options.local_infile_read = local_infile_read
				MemberAccess:mysql->options.local_infile_read
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_read
				Identifier:local_infile_read
		ExpressionStatement:mysql->options.local_infile_end = local_infile_end
			AssignmentExpression:mysql->options.local_infile_end = local_infile_end
				MemberAccess:mysql->options.local_infile_end
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_end
				Identifier:local_infile_end
		ExpressionStatement:mysql->options.local_infile_error = local_infile_error
			AssignmentExpression:mysql->options.local_infile_error = local_infile_error
				MemberAccess:mysql->options.local_infile_error
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_error
				Identifier:local_infile_error
		ExpressionStatement:mysql->options.local_infile_userdata = userdata
			AssignmentExpression:mysql->options.local_infile_userdata = userdata
				MemberAccess:mysql->options.local_infile_userdata
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_userdata
				Identifier:userdata
	ReturnType:void
	Identifier:mysql_set_local_infile_handler
	ParameterList:MYSQL *mysql , int (*local_infile_init)(void **, const char *, void *) , int (*local_infile_read)(void *, char *, uint) , void (*local_infile_end)(void *) , int (*local_infile_error)(void *, char *, uint) , void *userdata
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:int (*local_infile_init)(void **, const char *, void *)
			ParameterType:(( void * * , const char * , void * ) int) *
			Identifier:local_infile_init
		Parameter:int (*local_infile_read)(void *, char *, uint)
			ParameterType:(( void * , char * , uint ) int) *
			Identifier:local_infile_read
		Parameter:void (*local_infile_end)(void *)
			ParameterType:(( void * ) void) *
			Identifier:local_infile_end
		Parameter:int (*local_infile_error)(void *, char *, uint)
			ParameterType:(( void * , char * , uint ) int) *
			Identifier:local_infile_error
		Parameter:void *userdata
			ParameterType:void *
			Identifier:userdata
FunctionDef:mysql_set_local_infile_default (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:mysql->options.local_infile_init = default_local_infile_init
			AssignmentExpression:mysql->options.local_infile_init = default_local_infile_init
				MemberAccess:mysql->options.local_infile_init
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_init
				Identifier:default_local_infile_init
		ExpressionStatement:mysql->options.local_infile_read = default_local_infile_read
			AssignmentExpression:mysql->options.local_infile_read = default_local_infile_read
				MemberAccess:mysql->options.local_infile_read
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_read
				Identifier:default_local_infile_read
		ExpressionStatement:mysql->options.local_infile_end = default_local_infile_end
			AssignmentExpression:mysql->options.local_infile_end = default_local_infile_end
				MemberAccess:mysql->options.local_infile_end
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_end
				Identifier:default_local_infile_end
		ExpressionStatement:mysql->options.local_infile_error = default_local_infile_error
			AssignmentExpression:mysql->options.local_infile_error = default_local_infile_error
				MemberAccess:mysql->options.local_infile_error
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:local_infile_error
				Identifier:default_local_infile_error
	ReturnType:void
	Identifier:mysql_set_local_infile_default
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_query (MYSQL *mysql , const char *query)
	CompoundStatement:
		ReturnStatement:return mysql_real_query(mysql, query, (ulong)strlen(query));
			CallExpression:mysql_real_query(mysql, query, (ulong)strlen(query))
				Callee:mysql_real_query
					Identifier:mysql_real_query
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:query
						Identifier:query
					Argument:(ulong)strlen(query)
						CastExpression:(ulong)strlen(query)
							CastTarget:ulong
							CallExpression:strlen(query)
								Callee:strlen
									Identifier:strlen
								ArgumentList:query
									Argument:query
										Identifier:query
	ReturnType:int STDCALL
	Identifier:mysql_query
	ParameterList:MYSQL *mysql , const char *query
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:const char *query
			ParameterType:const char *
			Identifier:query
FunctionDef:mysql_fetch_field (MYSQL_RES *result)
	CompoundStatement:
		IfStatement:if (result->current_field >= result->field_count || !result->fields)
			Condition:result->current_field >= result->field_count || !result->fields
				OrExpression:result->current_field >= result->field_count || !result->fields
					RelationalExpression:result->current_field >= result->field_count
						PtrMemberAccess:result->current_field
							Identifier:result
							Identifier:current_field
						PtrMemberAccess:result->field_count
							Identifier:result
							Identifier:field_count
					UnaryOperationExpression:!result->fields
						UnaryOperator:!
						PtrMemberAccess:result->fields
							Identifier:result
							Identifier:fields
			ReturnStatement:return (NULL);
				Identifier:NULL
		ReturnStatement:return &result->fields[result->current_field++];
			UnaryOperationExpression:&result->fields[result->current_field++]
				UnaryOperator:&
				ArrayIndexing:result->fields[result->current_field++]
					PtrMemberAccess:result->fields
						Identifier:result
						Identifier:fields
					PostIncDecOperationExpression:result->current_field++
						PtrMemberAccess:result->current_field
							Identifier:result
							Identifier:current_field
						IncDec:++
	ReturnType:STDCALL
	Identifier:mysql_fetch_field
	ParameterList:MYSQL_RES *result
		Parameter:MYSQL_RES *result
			ParameterType:MYSQL_RES *
			Identifier:result
FunctionDef:mysql_data_seek (MYSQL_RES *result , my_ulonglong row)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_ROWS *tmp = 0;
			IdentifierDecl:*tmp = 0
				IdentifierDeclType:MYSQL_ROWS *
				Identifier:tmp
				AssignmentExpression:*tmp = 0
					Identifier:tmp
					Constant:0
		ExpressionStatement:DBUG_PRINT("info", ("mysql_data_seek(%ld)", (long)row))
			CallExpression:DBUG_PRINT("info", ("mysql_data_seek(%ld)", (long)row))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"info"
					Argument:"info"
						Constant:"info"
					Argument:"mysql_data_seek(%ld)", (long)row
						Expression:"mysql_data_seek(%ld)", (long)row
							Constant:"mysql_data_seek(%ld)"
							CastExpression:(long)row
								CastTarget:long
								Identifier:row
		IfStatement:if (result->data)
			Condition:result->data
				PtrMemberAccess:result->data
					Identifier:result
					Identifier:data
			ForStatement:for (tmp = result->data->data; row-- && tmp; tmp = tmp->next)
				ForInit:tmp = result->data->data;
					AssignmentExpression:tmp = result->data->data
						Identifier:tmp
						PtrMemberAccess:result->data->data
							PtrMemberAccess:result->data
								Identifier:result
								Identifier:data
							Identifier:data
				Condition:row-- && tmp
					AndExpression:row-- && tmp
						PostIncDecOperationExpression:row--
							Identifier:row
							IncDec:--
						Identifier:tmp
				AssignmentExpression:tmp = tmp->next
					Identifier:tmp
					PtrMemberAccess:tmp->next
						Identifier:tmp
						Identifier:next
				ExpressionStatement:
		ExpressionStatement:result->current_row = 0
			AssignmentExpression:result->current_row = 0
				PtrMemberAccess:result->current_row
					Identifier:result
					Identifier:current_row
				Constant:0
		ExpressionStatement:result->data_cursor = tmp
			AssignmentExpression:result->data_cursor = tmp
				PtrMemberAccess:result->data_cursor
					Identifier:result
					Identifier:data_cursor
				Identifier:tmp
	ReturnType:void STDCALL
	Identifier:mysql_data_seek
	ParameterList:MYSQL_RES *result , my_ulonglong row
		Parameter:MYSQL_RES *result
			ParameterType:MYSQL_RES *
			Identifier:result
		Parameter:my_ulonglong row
			ParameterType:my_ulonglong
			Identifier:row
FunctionDef:mysql_row_seek (MYSQL_RES *result , MYSQL_ROW_OFFSET row)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_ROW_OFFSET return_value = result->data_cursor;
			IdentifierDecl:return_value = result->data_cursor
				IdentifierDeclType:MYSQL_ROW_OFFSET
				Identifier:return_value
				AssignmentExpression:return_value = result->data_cursor
					Identifier:return_value
					PtrMemberAccess:result->data_cursor
						Identifier:result
						Identifier:data_cursor
		ExpressionStatement:result->current_row = 0
			AssignmentExpression:result->current_row = 0
				PtrMemberAccess:result->current_row
					Identifier:result
					Identifier:current_row
				Constant:0
		ExpressionStatement:result->data_cursor = row
			AssignmentExpression:result->data_cursor = row
				PtrMemberAccess:result->data_cursor
					Identifier:result
					Identifier:data_cursor
				Identifier:row
		ReturnStatement:return return_value;
			Identifier:return_value
	ReturnType:MYSQL_ROW_OFFSET STDCALL
	Identifier:mysql_row_seek
	ParameterList:MYSQL_RES *result , MYSQL_ROW_OFFSET row
		Parameter:MYSQL_RES *result
			ParameterType:MYSQL_RES *
			Identifier:result
		Parameter:MYSQL_ROW_OFFSET row
			ParameterType:MYSQL_ROW_OFFSET
			Identifier:row
FunctionDef:mysql_field_seek (MYSQL_RES *result , MYSQL_FIELD_OFFSET field_offset)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_FIELD_OFFSET return_value = result->current_field;
			IdentifierDecl:return_value = result->current_field
				IdentifierDeclType:MYSQL_FIELD_OFFSET
				Identifier:return_value
				AssignmentExpression:return_value = result->current_field
					Identifier:return_value
					PtrMemberAccess:result->current_field
						Identifier:result
						Identifier:current_field
		ExpressionStatement:result->current_field = field_offset
			AssignmentExpression:result->current_field = field_offset
				PtrMemberAccess:result->current_field
					Identifier:result
					Identifier:current_field
				Identifier:field_offset
		ReturnStatement:return return_value;
			Identifier:return_value
	ReturnType:MYSQL_FIELD_OFFSET STDCALL
	Identifier:mysql_field_seek
	ParameterList:MYSQL_RES *result , MYSQL_FIELD_OFFSET field_offset
		Parameter:MYSQL_RES *result
			ParameterType:MYSQL_RES *
			Identifier:result
		Parameter:MYSQL_FIELD_OFFSET field_offset
			ParameterType:MYSQL_FIELD_OFFSET
			Identifier:field_offset
FunctionDef:mysql_list_dbs (MYSQL *mysql , const char *wild)
	CompoundStatement:
		IdentifierDeclStatement:char buff[255];
			IdentifierDecl:buff[255]
				IdentifierDeclType:char [ 255 ]
				Identifier:buff
				Constant:255
		ExpressionStatement:DBUG_ENTER("mysql_list_dbs")
			CallExpression:DBUG_ENTER("mysql_list_dbs")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_list_dbs"
					Argument:"mysql_list_dbs"
						Constant:"mysql_list_dbs"
		ExpressionStatement:append_wild(my_stpcpy(buff, "show databases"), buff + sizeof(buff), wild)
			CallExpression:append_wild(my_stpcpy(buff, "show databases"), buff + sizeof(buff), wild)
				Callee:append_wild
					Identifier:append_wild
				ArgumentList:my_stpcpy(buff, "show databases")
					Argument:my_stpcpy(buff, "show databases")
						CallExpression:my_stpcpy(buff, "show databases")
							Callee:my_stpcpy
								Identifier:my_stpcpy
							ArgumentList:buff
								Argument:buff
									Identifier:buff
								Argument:"show databases"
									Constant:"show databases"
					Argument:buff + sizeof(buff)
						AdditiveExpression:buff + sizeof(buff)
							Identifier:buff
							SizeofExpression:sizeof(buff)
								Sizeof:sizeof
								Identifier:buff
					Argument:wild
						Identifier:wild
		IfStatement:if (mysql_query(mysql, buff))
			Condition:mysql_query(mysql, buff)
				CallExpression:mysql_query(mysql, buff)
					Callee:mysql_query
						Identifier:mysql_query
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:buff
							Identifier:buff
			ExpressionStatement:DBUG_RETURN(0)
				CallExpression:DBUG_RETURN(0)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:0
						Argument:0
							Constant:0
		ExpressionStatement:DBUG_RETURN(mysql_store_result(mysql))
			CallExpression:DBUG_RETURN(mysql_store_result(mysql))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:mysql_store_result(mysql)
					Argument:mysql_store_result(mysql)
						CallExpression:mysql_store_result(mysql)
							Callee:mysql_store_result
								Identifier:mysql_store_result
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
	ReturnType:STDCALL
	Identifier:mysql_list_dbs
	ParameterList:MYSQL *mysql , const char *wild
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:const char *wild
			ParameterType:const char *
			Identifier:wild
FunctionDef:mysql_list_tables (MYSQL *mysql , const char *wild)
	CompoundStatement:
		IdentifierDeclStatement:char buff[255];
			IdentifierDecl:buff[255]
				IdentifierDeclType:char [ 255 ]
				Identifier:buff
				Constant:255
		ExpressionStatement:DBUG_ENTER("mysql_list_tables")
			CallExpression:DBUG_ENTER("mysql_list_tables")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_list_tables"
					Argument:"mysql_list_tables"
						Constant:"mysql_list_tables"
		ExpressionStatement:append_wild(my_stpcpy(buff, "show tables"), buff + sizeof(buff), wild)
			CallExpression:append_wild(my_stpcpy(buff, "show tables"), buff + sizeof(buff), wild)
				Callee:append_wild
					Identifier:append_wild
				ArgumentList:my_stpcpy(buff, "show tables")
					Argument:my_stpcpy(buff, "show tables")
						CallExpression:my_stpcpy(buff, "show tables")
							Callee:my_stpcpy
								Identifier:my_stpcpy
							ArgumentList:buff
								Argument:buff
									Identifier:buff
								Argument:"show tables"
									Constant:"show tables"
					Argument:buff + sizeof(buff)
						AdditiveExpression:buff + sizeof(buff)
							Identifier:buff
							SizeofExpression:sizeof(buff)
								Sizeof:sizeof
								Identifier:buff
					Argument:wild
						Identifier:wild
		IfStatement:if (mysql_query(mysql, buff))
			Condition:mysql_query(mysql, buff)
				CallExpression:mysql_query(mysql, buff)
					Callee:mysql_query
						Identifier:mysql_query
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:buff
							Identifier:buff
			ExpressionStatement:DBUG_RETURN(0)
				CallExpression:DBUG_RETURN(0)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:0
						Argument:0
							Constant:0
		ExpressionStatement:DBUG_RETURN(mysql_store_result(mysql))
			CallExpression:DBUG_RETURN(mysql_store_result(mysql))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:mysql_store_result(mysql)
					Argument:mysql_store_result(mysql)
						CallExpression:mysql_store_result(mysql)
							Callee:mysql_store_result
								Identifier:mysql_store_result
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
	ReturnType:STDCALL
	Identifier:mysql_list_tables
	ParameterList:MYSQL *mysql , const char *wild
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:const char *wild
			ParameterType:const char *
			Identifier:wild
FunctionDef:cli_list_fields (MYSQL *mysql)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_DATA *query;
			IdentifierDecl:*query
				IdentifierDeclType:MYSQL_DATA *
				Identifier:query
		IdentifierDeclStatement:MYSQL_FIELD *result;
			IdentifierDecl:*result
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:result
		ExpressionStatement:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_FIELD_DEF)
			CallExpression:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_FIELD_DEF)
				Callee:MYSQL_TRACE_STAGE
					Identifier:MYSQL_TRACE_STAGE
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:WAIT_FOR_FIELD_DEF
						Identifier:WAIT_FOR_FIELD_DEF
		ExpressionStatement:query = cli_read_rows(mysql, (MYSQL_FIELD *)0, protocol_41(mysql) ? 8 : 6)
			AssignmentExpression:query = cli_read_rows(mysql, (MYSQL_FIELD *)0, protocol_41(mysql) ? 8 : 6)
				Identifier:query
				CallExpression:cli_read_rows(mysql, (MYSQL_FIELD *)0, protocol_41(mysql) ? 8 : 6)
					Callee:cli_read_rows
						Identifier:cli_read_rows
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:(MYSQL_FIELD *)0
							CastExpression:(MYSQL_FIELD *)0
								CastTarget:MYSQL_FIELD *
								Constant:0
						Argument:protocol_41(mysql) ? 8 : 6
							ConditionalExpression:protocol_41(mysql) ? 8 : 6
								Condition:protocol_41(mysql)
									CallExpression:protocol_41(mysql)
										Callee:protocol_41
											Identifier:protocol_41
										ArgumentList:mysql
											Argument:mysql
												Identifier:mysql
								Constant:8
								Constant:6
		ExpressionStatement:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
			CallExpression:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
				Callee:MYSQL_TRACE_STAGE
					Identifier:MYSQL_TRACE_STAGE
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:READY_FOR_COMMAND
						Identifier:READY_FOR_COMMAND
		IfStatement:if (!query)
			Condition:!query
				UnaryOperationExpression:!query
					UnaryOperator:!
					Identifier:query
			ReturnStatement:return NULL;
				Identifier:NULL
		ExpressionStatement:mysql->field_count = (uint)query->rows
			AssignmentExpression:mysql->field_count = (uint)query->rows
				PtrMemberAccess:mysql->field_count
					Identifier:mysql
					Identifier:field_count
				CastExpression:(uint)query->rows
					CastTarget:uint
					PtrMemberAccess:query->rows
						Identifier:query
						Identifier:rows
		ExpressionStatement:result = unpack_fields(mysql, query->data, mysql->field_alloc,                         mysql->field_count, 1, mysql->server_capabilities)
			AssignmentExpression:result = unpack_fields(mysql, query->data, mysql->field_alloc,                         mysql->field_count, 1, mysql->server_capabilities)
				Identifier:result
				CallExpression:unpack_fields(mysql, query->data, mysql->field_alloc,                         mysql->field_count, 1, mysql->server_capabilities)
					Callee:unpack_fields
						Identifier:unpack_fields
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:query->data
							PtrMemberAccess:query->data
								Identifier:query
								Identifier:data
						Argument:mysql->field_alloc
							PtrMemberAccess:mysql->field_alloc
								Identifier:mysql
								Identifier:field_alloc
						Argument:mysql->field_count
							PtrMemberAccess:mysql->field_count
								Identifier:mysql
								Identifier:field_count
						Argument:1
							Constant:1
						Argument:mysql->server_capabilities
							PtrMemberAccess:mysql->server_capabilities
								Identifier:mysql
								Identifier:server_capabilities
		ExpressionStatement:free_rows(query)
			CallExpression:free_rows(query)
				Callee:free_rows
					Identifier:free_rows
				ArgumentList:query
					Argument:query
						Identifier:query
		ReturnStatement:return result;
			Identifier:result
	ReturnType:MYSQL_FIELD *
	Identifier:cli_list_fields
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_list_fields (MYSQL *mysql , const char *table , const char *wild)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_RES *result;
			IdentifierDecl:*result
				IdentifierDeclType:MYSQL_RES *
				Identifier:result
		IdentifierDeclStatement:MYSQL_FIELD *fields;
			IdentifierDecl:*fields
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:fields
		IdentifierDeclStatement:MEM_ROOT *new_root;
			IdentifierDecl:*new_root
				IdentifierDeclType:MEM_ROOT *
				Identifier:new_root
		IdentifierDeclStatement:char buff[258], *end;
			IdentifierDecl:buff[258]
				IdentifierDeclType:char [ 258 ]
				Identifier:buff
				Constant:258
			IdentifierDecl:*end
				IdentifierDeclType:char *
				Identifier:end
		ExpressionStatement:DBUG_ENTER("mysql_list_fields")
			CallExpression:DBUG_ENTER("mysql_list_fields")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_list_fields"
					Argument:"mysql_list_fields"
						Constant:"mysql_list_fields"
		ExpressionStatement:DBUG_PRINT("enter", ("table: '%s'  wild: '%s'", table, wild ? wild : ""))
			CallExpression:DBUG_PRINT("enter", ("table: '%s'  wild: '%s'", table, wild ? wild : ""))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"table: '%s'  wild: '%s'", table, wild ? wild : ""
						Expression:"table: '%s'  wild: '%s'", table, wild ? wild : ""
							Constant:"table: '%s'  wild: '%s'"
							Expression:table, wild ? wild : ""
								Identifier:table
								ConditionalExpression:wild ? wild : ""
									Condition:wild
										Identifier:wild
									Identifier:wild
									Constant:""
		ExpressionStatement:end = strmake(strmake(buff, table, 128) + 1, wild ? wild : "", 128)
			AssignmentExpression:end = strmake(strmake(buff, table, 128) + 1, wild ? wild : "", 128)
				Identifier:end
				CallExpression:strmake(strmake(buff, table, 128) + 1, wild ? wild : "", 128)
					Callee:strmake
						Identifier:strmake
					ArgumentList:strmake(buff, table, 128) + 1
						Argument:strmake(buff, table, 128) + 1
							AdditiveExpression:strmake(buff, table, 128) + 1
								CallExpression:strmake(buff, table, 128)
									Callee:strmake
										Identifier:strmake
									ArgumentList:buff
										Argument:buff
											Identifier:buff
										Argument:table
											Identifier:table
										Argument:128
											Constant:128
								Constant:1
						Argument:wild ? wild : ""
							ConditionalExpression:wild ? wild : ""
								Condition:wild
									Identifier:wild
								Identifier:wild
								Constant:""
						Argument:128
							Constant:128
		ExpressionStatement:free_old_query(mysql)
			CallExpression:free_old_query(mysql)
				Callee:free_old_query
					Identifier:free_old_query
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
		IfStatement:if (simple_command(mysql, COM_FIELD_LIST, (uchar *)buff, (ulong)(end - buff),                     1) ||      !(fields = (*mysql->methods->list_fields)(mysql)))
			Condition:simple_command(mysql, COM_FIELD_LIST, (uchar *)buff, (ulong)(end - buff),                     1) ||      !(fields = (*mysql->methods->list_fields)(mysql))
				OrExpression:simple_command(mysql, COM_FIELD_LIST, (uchar *)buff, (ulong)(end - buff),                     1) ||      !(fields = (*mysql->methods->list_fields)(mysql))
					CallExpression:simple_command(mysql, COM_FIELD_LIST, (uchar *)buff, (ulong)(end - buff),                     1)
						Callee:simple_command
							Identifier:simple_command
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:COM_FIELD_LIST
								Identifier:COM_FIELD_LIST
							Argument:(uchar *)buff
								CastExpression:(uchar *)buff
									CastTarget:uchar *
									Identifier:buff
							Argument:(ulong)(end - buff)
								CastExpression:(ulong)(end - buff)
									CastTarget:ulong
									AdditiveExpression:end - buff
										Identifier:end
										Identifier:buff
							Argument:1
								Constant:1
					UnaryOperationExpression:!(fields = (*mysql->methods->list_fields)(mysql))
						UnaryOperator:!
						AssignmentExpression:fields = (*mysql->methods->list_fields)(mysql)
							Identifier:fields
							CallExpression:(*mysql->methods->list_fields)(mysql)
								Callee:*mysql->methods->list_fields
									UnaryOperationExpression:*mysql->methods->list_fields
										UnaryOperator:*
										PtrMemberAccess:mysql->methods->list_fields
											PtrMemberAccess:mysql->methods
												Identifier:mysql
												Identifier:methods
											Identifier:list_fields
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
			ExpressionStatement:DBUG_RETURN(NULL)
				CallExpression:DBUG_RETURN(NULL)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:NULL
						Argument:NULL
							Identifier:NULL
		IfStatement:if (!(new_root = (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                         MYF(MY_WME | MY_ZEROFILL))))
			Condition:!(new_root = (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                         MYF(MY_WME | MY_ZEROFILL)))
				UnaryOperationExpression:!(new_root = (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                         MYF(MY_WME | MY_ZEROFILL)))
					UnaryOperator:!
					AssignmentExpression:new_root = (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                         MYF(MY_WME | MY_ZEROFILL))
						Identifier:new_root
						CastExpression:(MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                         MYF(MY_WME | MY_ZEROFILL))
							CastTarget:MEM_ROOT *
							CallExpression:my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                         MYF(MY_WME | MY_ZEROFILL))
								Callee:my_malloc
									Identifier:my_malloc
								ArgumentList:PSI_NOT_INSTRUMENTED
									Argument:PSI_NOT_INSTRUMENTED
										Identifier:PSI_NOT_INSTRUMENTED
									Argument:sizeof(MEM_ROOT)
										SizeofExpression:sizeof(MEM_ROOT)
											Sizeof:sizeof
											Identifier:MEM_ROOT
									Argument:MYF(MY_WME | MY_ZEROFILL)
										CallExpression:MYF(MY_WME | MY_ZEROFILL)
											Callee:MYF
												Identifier:MYF
											ArgumentList:MY_WME | MY_ZEROFILL
												Argument:MY_WME | MY_ZEROFILL
													InclusiveOrExpression:MY_WME | MY_ZEROFILL
														Identifier:MY_WME
														Identifier:MY_ZEROFILL
			ExpressionStatement:DBUG_RETURN(NULL)
				CallExpression:DBUG_RETURN(NULL)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:NULL
						Argument:NULL
							Identifier:NULL
		IfStatement:if (!(result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_RES),                                        MYF(MY_WME | MY_ZEROFILL))))
			Condition:!(result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_RES),                                        MYF(MY_WME | MY_ZEROFILL)))
				UnaryOperationExpression:!(result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_RES),                                        MYF(MY_WME | MY_ZEROFILL)))
					UnaryOperator:!
					AssignmentExpression:result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_RES),                                        MYF(MY_WME | MY_ZEROFILL))
						Identifier:result
						CastExpression:(MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_RES),                                        MYF(MY_WME | MY_ZEROFILL))
							CastTarget:MYSQL_RES *
							CallExpression:my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_RES),                                        MYF(MY_WME | MY_ZEROFILL))
								Callee:my_malloc
									Identifier:my_malloc
								ArgumentList:PSI_NOT_INSTRUMENTED
									Argument:PSI_NOT_INSTRUMENTED
										Identifier:PSI_NOT_INSTRUMENTED
									Argument:sizeof(MYSQL_RES)
										SizeofExpression:sizeof(MYSQL_RES)
											Sizeof:sizeof
											Identifier:MYSQL_RES
									Argument:MYF(MY_WME | MY_ZEROFILL)
										CallExpression:MYF(MY_WME | MY_ZEROFILL)
											Callee:MYF
												Identifier:MYF
											ArgumentList:MY_WME | MY_ZEROFILL
												Argument:MY_WME | MY_ZEROFILL
													InclusiveOrExpression:MY_WME | MY_ZEROFILL
														Identifier:MY_WME
														Identifier:MY_ZEROFILL
			CompoundStatement:
				ExpressionStatement:my_free(new_root)
					CallExpression:my_free(new_root)
						Callee:my_free
							Identifier:my_free
						ArgumentList:new_root
							Argument:new_root
								Identifier:new_root
				ExpressionStatement:DBUG_RETURN(NULL)
					CallExpression:DBUG_RETURN(NULL)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:NULL
							Argument:NULL
								Identifier:NULL
		ExpressionStatement:result->methods = mysql->methods
			AssignmentExpression:result->methods = mysql->methods
				PtrMemberAccess:result->methods
					Identifier:result
					Identifier:methods
				PtrMemberAccess:mysql->methods
					Identifier:mysql
					Identifier:methods
		ExpressionStatement:result->field_alloc = mysql->field_alloc
			AssignmentExpression:result->field_alloc = mysql->field_alloc
				PtrMemberAccess:result->field_alloc
					Identifier:result
					Identifier:field_alloc
				PtrMemberAccess:mysql->field_alloc
					Identifier:mysql
					Identifier:field_alloc
		ExpressionStatement:mysql->fields = 0
			AssignmentExpression:mysql->fields = 0
				PtrMemberAccess:mysql->fields
					Identifier:mysql
					Identifier:fields
				Constant:0
		ExpressionStatement:mysql->field_alloc = new_root
			AssignmentExpression:mysql->field_alloc = new_root
				PtrMemberAccess:mysql->field_alloc
					Identifier:mysql
					Identifier:field_alloc
				Identifier:new_root
		ExpressionStatement:result->field_count = mysql->field_count
			AssignmentExpression:result->field_count = mysql->field_count
				PtrMemberAccess:result->field_count
					Identifier:result
					Identifier:field_count
				PtrMemberAccess:mysql->field_count
					Identifier:mysql
					Identifier:field_count
		ExpressionStatement:result->fields = fields
			AssignmentExpression:result->fields = fields
				PtrMemberAccess:result->fields
					Identifier:result
					Identifier:fields
				Identifier:fields
		ExpressionStatement:result->eof = 1
			AssignmentExpression:result->eof = 1
				PtrMemberAccess:result->eof
					Identifier:result
					Identifier:eof
				Constant:1
		ExpressionStatement:DBUG_RETURN(result)
			CallExpression:DBUG_RETURN(result)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:result
					Argument:result
						Identifier:result
	ReturnType:STDCALL
	Identifier:mysql_list_fields
	ParameterList:MYSQL *mysql , const char *table , const char *wild
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:const char *table
			ParameterType:const char *
			Identifier:table
		Parameter:const char *wild
			ParameterType:const char *
			Identifier:wild
FunctionDef:mysql_list_processes (MYSQL *mysql)
	CompoundStatement:
		IdentifierDeclStatement:uint field_count;
			IdentifierDecl:field_count
				IdentifierDeclType:uint
				Identifier:field_count
		IdentifierDeclStatement:uchar *pos;
			IdentifierDecl:*pos
				IdentifierDeclType:uchar *
				Identifier:pos
		ExpressionStatement:DBUG_ENTER("mysql_list_processes")
			CallExpression:DBUG_ENTER("mysql_list_processes")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_list_processes"
					Argument:"mysql_list_processes"
						Constant:"mysql_list_processes"
		IfStatement:if (simple_command(mysql, COM_PROCESS_INFO, 0, 0, 0))
			Condition:simple_command(mysql, COM_PROCESS_INFO, 0, 0, 0)
				CallExpression:simple_command(mysql, COM_PROCESS_INFO, 0, 0, 0)
					Callee:simple_command
						Identifier:simple_command
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:COM_PROCESS_INFO
							Identifier:COM_PROCESS_INFO
						Argument:0
							Constant:0
						Argument:0
							Constant:0
						Argument:0
							Constant:0
			ExpressionStatement:DBUG_RETURN(0)
				CallExpression:DBUG_RETURN(0)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:0
						Argument:0
							Constant:0
		ExpressionStatement:free_old_query(mysql)
			CallExpression:free_old_query(mysql)
				Callee:free_old_query
					Identifier:free_old_query
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
		ExpressionStatement:pos = (uchar *)mysql->net.read_pos
			AssignmentExpression:pos = (uchar *)mysql->net.read_pos
				Identifier:pos
				CastExpression:(uchar *)mysql->net.read_pos
					CastTarget:uchar *
					MemberAccess:mysql->net.read_pos
						PtrMemberAccess:mysql->net
							Identifier:mysql
							Identifier:net
						Identifier:read_pos
		ExpressionStatement:field_count = (uint)net_field_length(&pos)
			AssignmentExpression:field_count = (uint)net_field_length(&pos)
				Identifier:field_count
				CastExpression:(uint)net_field_length(&pos)
					CastTarget:uint
					CallExpression:net_field_length(&pos)
						Callee:net_field_length
							Identifier:net_field_length
						ArgumentList:&pos
							Argument:&pos
								UnaryOperationExpression:&pos
									UnaryOperator:&
									Identifier:pos
		IfStatement:if (!(mysql->fields =            cli_read_metadata(mysql, field_count, protocol_41(mysql) ? 7 : 5)))
			Condition:!(mysql->fields =            cli_read_metadata(mysql, field_count, protocol_41(mysql) ? 7 : 5))
				UnaryOperationExpression:!(mysql->fields =            cli_read_metadata(mysql, field_count, protocol_41(mysql) ? 7 : 5))
					UnaryOperator:!
					AssignmentExpression:mysql->fields =            cli_read_metadata(mysql, field_count, protocol_41(mysql) ? 7 : 5)
						PtrMemberAccess:mysql->fields
							Identifier:mysql
							Identifier:fields
						CallExpression:cli_read_metadata(mysql, field_count, protocol_41(mysql) ? 7 : 5)
							Callee:cli_read_metadata
								Identifier:cli_read_metadata
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:field_count
									Identifier:field_count
								Argument:protocol_41(mysql) ? 7 : 5
									ConditionalExpression:protocol_41(mysql) ? 7 : 5
										Condition:protocol_41(mysql)
											CallExpression:protocol_41(mysql)
												Callee:protocol_41
													Identifier:protocol_41
												ArgumentList:mysql
													Argument:mysql
														Identifier:mysql
										Constant:7
										Constant:5
			ExpressionStatement:DBUG_RETURN(NULL)
				CallExpression:DBUG_RETURN(NULL)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:NULL
						Argument:NULL
							Identifier:NULL
		ExpressionStatement:mysql->status = MYSQL_STATUS_GET_RESULT
			AssignmentExpression:mysql->status = MYSQL_STATUS_GET_RESULT
				PtrMemberAccess:mysql->status
					Identifier:mysql
					Identifier:status
				Identifier:MYSQL_STATUS_GET_RESULT
		ExpressionStatement:mysql->field_count = field_count
			AssignmentExpression:mysql->field_count = field_count
				PtrMemberAccess:mysql->field_count
					Identifier:mysql
					Identifier:field_count
				Identifier:field_count
		ExpressionStatement:DBUG_RETURN(mysql_store_result(mysql))
			CallExpression:DBUG_RETURN(mysql_store_result(mysql))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:mysql_store_result(mysql)
					Argument:mysql_store_result(mysql)
						CallExpression:mysql_store_result(mysql)
							Callee:mysql_store_result
								Identifier:mysql_store_result
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
	ReturnType:STDCALL
	Identifier:mysql_list_processes
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_shutdown (MYSQL *mysql , enum mysql_enum_shutdown_level shutdown_level                               MY_ATTRIBUTE((unused)))
	CompoundStatement:
		IfStatement:if (mysql_get_server_version(mysql) < 50709)
			Condition:mysql_get_server_version(mysql) < 50709
				RelationalExpression:mysql_get_server_version(mysql) < 50709
					CallExpression:mysql_get_server_version(mysql)
						Callee:mysql_get_server_version
							Identifier:mysql_get_server_version
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
					Constant:50709
			ReturnStatement:return simple_command(mysql, COM_DEPRECATED_1, 0, 1, 0);
				CallExpression:simple_command(mysql, COM_DEPRECATED_1, 0, 1, 0)
					Callee:simple_command
						Identifier:simple_command
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:COM_DEPRECATED_1
							Identifier:COM_DEPRECATED_1
						Argument:0
							Constant:0
						Argument:1
							Constant:1
						Argument:0
							Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_shutdown
	ParameterList:MYSQL *mysql , enum mysql_enum_shutdown_level shutdown_level                               MY_ATTRIBUTE((unused))
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:enum mysql_enum_shutdown_level shutdown_level                               MY_ATTRIBUTE((unused))
			ParameterType:((enum mysql_enum_shutdown_level shutdown_level MY_ATTRIBUTE))
			Identifier:unused
FunctionDef:mysql_refresh (MYSQL *mysql , uint options)
	CompoundStatement:
		IdentifierDeclStatement:uchar bits[1];
			IdentifierDecl:bits[1]
				IdentifierDeclType:uchar [ 1 ]
				Identifier:bits
				Constant:1
		ExpressionStatement:DBUG_ENTER("mysql_refresh")
			CallExpression:DBUG_ENTER("mysql_refresh")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_refresh"
					Argument:"mysql_refresh"
						Constant:"mysql_refresh"
		ExpressionStatement:bits[0] = (uchar)options
			AssignmentExpression:bits[0] = (uchar)options
				ArrayIndexing:bits[0]
					Identifier:bits
					Constant:0
				CastExpression:(uchar)options
					CastTarget:uchar
					Identifier:options
		ExpressionStatement:DBUG_RETURN(simple_command(mysql, COM_REFRESH, bits, 1, 0))
			CallExpression:DBUG_RETURN(simple_command(mysql, COM_REFRESH, bits, 1, 0))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:simple_command(mysql, COM_REFRESH, bits, 1, 0)
					Argument:simple_command(mysql, COM_REFRESH, bits, 1, 0)
						CallExpression:simple_command(mysql, COM_REFRESH, bits, 1, 0)
							Callee:simple_command
								Identifier:simple_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_REFRESH
									Identifier:COM_REFRESH
								Argument:bits
									Identifier:bits
								Argument:1
									Constant:1
								Argument:0
									Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_refresh
	ParameterList:MYSQL *mysql , uint options
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:uint options
			ParameterType:uint
			Identifier:options
FunctionDef:mysql_kill (MYSQL *mysql , ulong pid)
	CompoundStatement:
		IdentifierDeclStatement:uchar buff[4];
			IdentifierDecl:buff[4]
				IdentifierDeclType:uchar [ 4 ]
				Identifier:buff
				Constant:4
		ExpressionStatement:DBUG_ENTER("mysql_kill")
			CallExpression:DBUG_ENTER("mysql_kill")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_kill"
					Argument:"mysql_kill"
						Constant:"mysql_kill"
		Statement:/*    Sanity check: if ulong is 64-bits, user can submit a PID here that    overflows our 32-bit parameter to the somewhat obsolete COM_PROCESS_KILL.    If this is the case, we'll flag an error here.    The SQL statement KILL CONNECTION is the safer option here.    There is an analog of this failsafe in the server as we might see old    libmysql connection to a new server as well as the other way around.  */
		IfStatement:if (pid & (~0xfffffffful))
			Condition:pid & (~0xfffffffful)
				BitAndExpression:pid & (~0xfffffffful)
					Identifier:pid
					Identifier:~0xfffffffful
			ExpressionStatement:DBUG_RETURN(CR_INVALID_CONN_HANDLE)
				CallExpression:DBUG_RETURN(CR_INVALID_CONN_HANDLE)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:CR_INVALID_CONN_HANDLE
						Argument:CR_INVALID_CONN_HANDLE
							Identifier:CR_INVALID_CONN_HANDLE
		ExpressionStatement:int4store(buff, pid)
			CallExpression:int4store(buff, pid)
				Callee:int4store
					Identifier:int4store
				ArgumentList:buff
					Argument:buff
						Identifier:buff
					Argument:pid
						Identifier:pid
		ExpressionStatement:DBUG_RETURN(simple_command(mysql, COM_PROCESS_KILL, buff, sizeof(buff), 0))
			CallExpression:DBUG_RETURN(simple_command(mysql, COM_PROCESS_KILL, buff, sizeof(buff), 0))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:simple_command(mysql, COM_PROCESS_KILL, buff, sizeof(buff), 0)
					Argument:simple_command(mysql, COM_PROCESS_KILL, buff, sizeof(buff), 0)
						CallExpression:simple_command(mysql, COM_PROCESS_KILL, buff, sizeof(buff), 0)
							Callee:simple_command
								Identifier:simple_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_PROCESS_KILL
									Identifier:COM_PROCESS_KILL
								Argument:buff
									Identifier:buff
								Argument:sizeof(buff)
									SizeofExpression:sizeof(buff)
										Sizeof:sizeof
										Identifier:buff
								Argument:0
									Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_kill
	ParameterList:MYSQL *mysql , ulong pid
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:ulong pid
			ParameterType:ulong
			Identifier:pid
FunctionDef:mysql_set_server_option (MYSQL *mysql , enum enum_mysql_set_option option)
	CompoundStatement:
		IdentifierDeclStatement:uchar buff[2];
			IdentifierDecl:buff[2]
				IdentifierDeclType:uchar [ 2 ]
				Identifier:buff
				Constant:2
		ExpressionStatement:DBUG_ENTER("mysql_set_server_option")
			CallExpression:DBUG_ENTER("mysql_set_server_option")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_set_server_option"
					Argument:"mysql_set_server_option"
						Constant:"mysql_set_server_option"
		ExpressionStatement:int2store(buff, (uint)option)
			CallExpression:int2store(buff, (uint)option)
				Callee:int2store
					Identifier:int2store
				ArgumentList:buff
					Argument:buff
						Identifier:buff
					Argument:(uint)option
						CastExpression:(uint)option
							CastTarget:uint
							Identifier:option
		ExpressionStatement:DBUG_RETURN(simple_command(mysql, COM_SET_OPTION, buff, sizeof(buff), 0))
			CallExpression:DBUG_RETURN(simple_command(mysql, COM_SET_OPTION, buff, sizeof(buff), 0))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:simple_command(mysql, COM_SET_OPTION, buff, sizeof(buff), 0)
					Argument:simple_command(mysql, COM_SET_OPTION, buff, sizeof(buff), 0)
						CallExpression:simple_command(mysql, COM_SET_OPTION, buff, sizeof(buff), 0)
							Callee:simple_command
								Identifier:simple_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_SET_OPTION
									Identifier:COM_SET_OPTION
								Argument:buff
									Identifier:buff
								Argument:sizeof(buff)
									SizeofExpression:sizeof(buff)
										Sizeof:sizeof
										Identifier:buff
								Argument:0
									Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_set_server_option
	ParameterList:MYSQL *mysql , enum enum_mysql_set_option option
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:enum enum_mysql_set_option option
			ParameterType:enum enum_mysql_set_option
			Identifier:option
FunctionDef:mysql_dump_debug_info (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_dump_debug_info")
			CallExpression:DBUG_ENTER("mysql_dump_debug_info")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_dump_debug_info"
					Argument:"mysql_dump_debug_info"
						Constant:"mysql_dump_debug_info"
		ExpressionStatement:DBUG_RETURN(simple_command(mysql, COM_DEBUG, 0, 0, 0))
			CallExpression:DBUG_RETURN(simple_command(mysql, COM_DEBUG, 0, 0, 0))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:simple_command(mysql, COM_DEBUG, 0, 0, 0)
					Argument:simple_command(mysql, COM_DEBUG, 0, 0, 0)
						CallExpression:simple_command(mysql, COM_DEBUG, 0, 0, 0)
							Callee:simple_command
								Identifier:simple_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_DEBUG
									Identifier:COM_DEBUG
								Argument:0
									Constant:0
								Argument:0
									Constant:0
								Argument:0
									Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_dump_debug_info
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:cli_read_statistics (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:mysql->net.read_pos[mysql->packet_length] = 0
			AssignmentExpression:mysql->net.read_pos[mysql->packet_length] = 0
				ArrayIndexing:mysql->net.read_pos[mysql->packet_length]
					MemberAccess:mysql->net.read_pos
						PtrMemberAccess:mysql->net
							Identifier:mysql
							Identifier:net
						Identifier:read_pos
					PtrMemberAccess:mysql->packet_length
						Identifier:mysql
						Identifier:packet_length
				Constant:0
		Statement:/* End of stat string */
		IfStatement:if (!mysql->net.read_pos[0])
			Condition:!mysql->net.read_pos[0]
				UnaryOperationExpression:!mysql->net.read_pos[0]
					UnaryOperator:!
					ArrayIndexing:mysql->net.read_pos[0]
						MemberAccess:mysql->net.read_pos
							PtrMemberAccess:mysql->net
								Identifier:mysql
								Identifier:net
							Identifier:read_pos
						Constant:0
			CompoundStatement:
				ExpressionStatement:set_mysql_error(mysql, CR_WRONG_HOST_INFO, unknown_sqlstate)
					CallExpression:set_mysql_error(mysql, CR_WRONG_HOST_INFO, unknown_sqlstate)
						Callee:set_mysql_error
							Identifier:set_mysql_error
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:CR_WRONG_HOST_INFO
								Identifier:CR_WRONG_HOST_INFO
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				ReturnStatement:return mysql->net.last_error;
					MemberAccess:mysql->net.last_error
						PtrMemberAccess:mysql->net
							Identifier:mysql
							Identifier:net
						Identifier:last_error
		Statement:/*    After reading the single packet with reply to COM_STATISTICS    we are ready for new commands.  */
		ExpressionStatement:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
			CallExpression:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
				Callee:MYSQL_TRACE_STAGE
					Identifier:MYSQL_TRACE_STAGE
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:READY_FOR_COMMAND
						Identifier:READY_FOR_COMMAND
		ReturnStatement:return (char *)mysql->net.read_pos;
			CastExpression:(char *)mysql->net.read_pos
				CastTarget:char *
				MemberAccess:mysql->net.read_pos
					PtrMemberAccess:mysql->net
						Identifier:mysql
						Identifier:net
					Identifier:read_pos
	ReturnType:const char *
	Identifier:cli_read_statistics
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_stat (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stat")
			CallExpression:DBUG_ENTER("mysql_stat")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stat"
					Argument:"mysql_stat"
						Constant:"mysql_stat"
		IfStatement:if (simple_command(mysql, COM_STATISTICS, 0, 0, 0))
			Condition:simple_command(mysql, COM_STATISTICS, 0, 0, 0)
				CallExpression:simple_command(mysql, COM_STATISTICS, 0, 0, 0)
					Callee:simple_command
						Identifier:simple_command
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:COM_STATISTICS
							Identifier:COM_STATISTICS
						Argument:0
							Constant:0
						Argument:0
							Constant:0
						Argument:0
							Constant:0
			ExpressionStatement:DBUG_RETURN(mysql->net.last_error)
				CallExpression:DBUG_RETURN(mysql->net.last_error)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:mysql->net.last_error
						Argument:mysql->net.last_error
							MemberAccess:mysql->net.last_error
								PtrMemberAccess:mysql->net
									Identifier:mysql
									Identifier:net
								Identifier:last_error
		ExpressionStatement:DBUG_RETURN((*mysql->methods->read_statistics)(mysql))
			CallExpression:DBUG_RETURN((*mysql->methods->read_statistics)(mysql))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:(*mysql->methods->read_statistics)(mysql)
					Argument:(*mysql->methods->read_statistics)(mysql)
						CallExpression:(*mysql->methods->read_statistics)(mysql)
							Callee:*mysql->methods->read_statistics
								UnaryOperationExpression:*mysql->methods->read_statistics
									UnaryOperator:*
									PtrMemberAccess:mysql->methods->read_statistics
										PtrMemberAccess:mysql->methods
											Identifier:mysql
											Identifier:methods
										Identifier:read_statistics
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
	ReturnType:STDCALL
	Identifier:mysql_stat
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_ping (MYSQL *mysql)
	CompoundStatement:
		IdentifierDeclStatement:int res;
			IdentifierDecl:res
				IdentifierDeclType:int
				Identifier:res
		ExpressionStatement:DBUG_ENTER("mysql_ping")
			CallExpression:DBUG_ENTER("mysql_ping")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_ping"
					Argument:"mysql_ping"
						Constant:"mysql_ping"
		ExpressionStatement:res = simple_command(mysql, COM_PING, 0, 0, 0)
			AssignmentExpression:res = simple_command(mysql, COM_PING, 0, 0, 0)
				Identifier:res
				CallExpression:simple_command(mysql, COM_PING, 0, 0, 0)
					Callee:simple_command
						Identifier:simple_command
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:COM_PING
							Identifier:COM_PING
						Argument:0
							Constant:0
						Argument:0
							Constant:0
						Argument:0
							Constant:0
		IfStatement:if (res == CR_SERVER_LOST && mysql->reconnect)
			Condition:res == CR_SERVER_LOST && mysql->reconnect
				AndExpression:res == CR_SERVER_LOST && mysql->reconnect
					EqualityExpression:res == CR_SERVER_LOST
						Identifier:res
						Identifier:CR_SERVER_LOST
					PtrMemberAccess:mysql->reconnect
						Identifier:mysql
						Identifier:reconnect
			ExpressionStatement:res = simple_command(mysql, COM_PING, 0, 0, 0)
				AssignmentExpression:res = simple_command(mysql, COM_PING, 0, 0, 0)
					Identifier:res
					CallExpression:simple_command(mysql, COM_PING, 0, 0, 0)
						Callee:simple_command
							Identifier:simple_command
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:COM_PING
								Identifier:COM_PING
							Argument:0
								Constant:0
							Argument:0
								Constant:0
							Argument:0
								Constant:0
		ExpressionStatement:DBUG_RETURN(res)
			CallExpression:DBUG_RETURN(res)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:res
					Argument:res
						Identifier:res
	ReturnType:int STDCALL
	Identifier:mysql_ping
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_get_server_info (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return ((char *)mysql->server_version);
			CastExpression:(char *)mysql->server_version
				CastTarget:char *
				PtrMemberAccess:mysql->server_version
					Identifier:mysql
					Identifier:server_version
	ReturnType:STDCALL
	Identifier:mysql_get_server_info
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_get_host_info (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return (mysql->host_info);
			PtrMemberAccess:mysql->host_info
				Identifier:mysql
				Identifier:host_info
	ReturnType:STDCALL
	Identifier:mysql_get_host_info
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_get_proto_info (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return (mysql->protocol_version);
			PtrMemberAccess:mysql->protocol_version
				Identifier:mysql
				Identifier:protocol_version
	ReturnType:uint STDCALL
	Identifier:mysql_get_proto_info
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_get_client_info ()
	CompoundStatement:
		ReturnStatement:return (char *)MYSQL_SERVER_VERSION;
			CastExpression:(char *)MYSQL_SERVER_VERSION
				CastTarget:char *
				Identifier:MYSQL_SERVER_VERSION
	ReturnType:STDCALL
	Identifier:mysql_get_client_info
	ParameterList:
FunctionDef:mysql_get_client_version ()
	CompoundStatement:
		ReturnStatement:return MYSQL_VERSION_ID;
			Identifier:MYSQL_VERSION_ID
	ReturnType:ulong STDCALL
	Identifier:mysql_get_client_version
	ParameterList:
FunctionDef:mysql_eof (MYSQL_RES *res)
	CompoundStatement:
		ReturnStatement:return res->eof;
			PtrMemberAccess:res->eof
				Identifier:res
				Identifier:eof
	ReturnType:bool STDCALL
	Identifier:mysql_eof
	ParameterList:MYSQL_RES *res
		Parameter:MYSQL_RES *res
			ParameterType:MYSQL_RES *
			Identifier:res
FunctionDef:mysql_fetch_field_direct (MYSQL_RES *res , uint fieldnr)
	CompoundStatement:
		IfStatement:if (fieldnr >= res->field_count || !res->fields)
			Condition:fieldnr >= res->field_count || !res->fields
				OrExpression:fieldnr >= res->field_count || !res->fields
					RelationalExpression:fieldnr >= res->field_count
						Identifier:fieldnr
						PtrMemberAccess:res->field_count
							Identifier:res
							Identifier:field_count
					UnaryOperationExpression:!res->fields
						UnaryOperator:!
						PtrMemberAccess:res->fields
							Identifier:res
							Identifier:fields
			ReturnStatement:return (NULL);
				Identifier:NULL
		ReturnStatement:return &(res)->fields[fieldnr];
			UnaryOperationExpression:&(res)->fields[fieldnr]
				UnaryOperator:&
				ArrayIndexing:(res)->fields[fieldnr]
					PtrMemberAccess:(res)->fields
						Identifier:res
						Identifier:fields
					Identifier:fieldnr
	ReturnType:STDCALL
	Identifier:mysql_fetch_field_direct
	ParameterList:MYSQL_RES *res , uint fieldnr
		Parameter:MYSQL_RES *res
			ParameterType:MYSQL_RES *
			Identifier:res
		Parameter:uint fieldnr
			ParameterType:uint
			Identifier:fieldnr
FunctionDef:mysql_fetch_fields (MYSQL_RES *res)
	CompoundStatement:
		ReturnStatement:return (res)->fields;
			PtrMemberAccess:(res)->fields
				Identifier:res
				Identifier:fields
	ReturnType:STDCALL
	Identifier:mysql_fetch_fields
	ParameterList:MYSQL_RES *res
		Parameter:MYSQL_RES *res
			ParameterType:MYSQL_RES *
			Identifier:res
FunctionDef:mysql_row_tell (MYSQL_RES *res)
	CompoundStatement:
		ReturnStatement:return res->data_cursor;
			PtrMemberAccess:res->data_cursor
				Identifier:res
				Identifier:data_cursor
	ReturnType:MYSQL_ROW_OFFSET STDCALL
	Identifier:mysql_row_tell
	ParameterList:MYSQL_RES *res
		Parameter:MYSQL_RES *res
			ParameterType:MYSQL_RES *
			Identifier:res
FunctionDef:mysql_field_tell (MYSQL_RES *res)
	CompoundStatement:
		ReturnStatement:return (res)->current_field;
			PtrMemberAccess:(res)->current_field
				Identifier:res
				Identifier:current_field
	ReturnType:MYSQL_FIELD_OFFSET STDCALL
	Identifier:mysql_field_tell
	ParameterList:MYSQL_RES *res
		Parameter:MYSQL_RES *res
			ParameterType:MYSQL_RES *
			Identifier:res
FunctionDef:mysql_result_metadata (MYSQL_RES *result)
	CompoundStatement:
		ReturnStatement:return result->metadata;
			PtrMemberAccess:result->metadata
				Identifier:result
				Identifier:metadata
	ReturnType:enum_resultset_metadata STDCALL
	Identifier:mysql_result_metadata
	ParameterList:MYSQL_RES *result
		Parameter:MYSQL_RES *result
			ParameterType:MYSQL_RES *
			Identifier:result
FunctionDef:mysql_field_count (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return mysql->field_count;
			PtrMemberAccess:mysql->field_count
				Identifier:mysql
				Identifier:field_count
	ReturnType:unsigned int STDCALL
	Identifier:mysql_field_count
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_affected_rows (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return mysql->affected_rows;
			PtrMemberAccess:mysql->affected_rows
				Identifier:mysql
				Identifier:affected_rows
	ReturnType:my_ulonglong STDCALL
	Identifier:mysql_affected_rows
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_insert_id (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return mysql->insert_id;
			PtrMemberAccess:mysql->insert_id
				Identifier:mysql
				Identifier:insert_id
	ReturnType:my_ulonglong STDCALL
	Identifier:mysql_insert_id
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_sqlstate (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return mysql ? mysql->net.sqlstate : cant_connect_sqlstate;
			ConditionalExpression:mysql ? mysql->net.sqlstate : cant_connect_sqlstate
				Condition:mysql
					Identifier:mysql
				MemberAccess:mysql->net.sqlstate
					PtrMemberAccess:mysql->net
						Identifier:mysql
						Identifier:net
					Identifier:sqlstate
				Identifier:cant_connect_sqlstate
	ReturnType:STDCALL
	Identifier:mysql_sqlstate
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_warning_count (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return mysql->warning_count;
			PtrMemberAccess:mysql->warning_count
				Identifier:mysql
				Identifier:warning_count
	ReturnType:uint STDCALL
	Identifier:mysql_warning_count
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_info (MYSQL *mysql)
	CompoundStatement:
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			CompoundStatement:
				Statement:if
				Statement:defined
				Statement:(
				Statement:CLIENT_PROTOCOL_TRACING
				Statement:)
				ReturnStatement:return "protocol tracing enabled";
					Constant:"protocol tracing enabled"
				Statement:endif
		ReturnStatement:return mysql->info;
			PtrMemberAccess:mysql->info
				Identifier:mysql
				Identifier:info
	ReturnType:STDCALL
	Identifier:mysql_info
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_thread_id (MYSQL *mysql)
	CompoundStatement:
		Statement:/*    ulong may be 64-bit, but we currently only transmit 32-bit.    mysql_thread_id() is usually used in conjunction with mysql_kill()    which is similarly limited (and obsolete).    SELECTION CONNECTION_ID() / KILL CONNECTION avoid this issue.  */
		ReturnStatement:return (mysql)->thread_id;
			PtrMemberAccess:(mysql)->thread_id
				Identifier:mysql
				Identifier:thread_id
	ReturnType:ulong STDCALL
	Identifier:mysql_thread_id
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_character_set_name (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return mysql->charset->csname;
			PtrMemberAccess:mysql->charset->csname
				PtrMemberAccess:mysql->charset
					Identifier:mysql
					Identifier:charset
				Identifier:csname
	ReturnType:STDCALL
	Identifier:mysql_character_set_name
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_get_character_set_info (MYSQL *mysql , MY_CHARSET_INFO *csinfo)
	CompoundStatement:
		ExpressionStatement:csinfo->number = mysql->charset->number
			AssignmentExpression:csinfo->number = mysql->charset->number
				PtrMemberAccess:csinfo->number
					Identifier:csinfo
					Identifier:number
				PtrMemberAccess:mysql->charset->number
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:number
		ExpressionStatement:csinfo->state = mysql->charset->state
			AssignmentExpression:csinfo->state = mysql->charset->state
				PtrMemberAccess:csinfo->state
					Identifier:csinfo
					Identifier:state
				PtrMemberAccess:mysql->charset->state
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:state
		ExpressionStatement:csinfo->csname = mysql->charset->csname
			AssignmentExpression:csinfo->csname = mysql->charset->csname
				PtrMemberAccess:csinfo->csname
					Identifier:csinfo
					Identifier:csname
				PtrMemberAccess:mysql->charset->csname
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:csname
		ExpressionStatement:csinfo->name = mysql->charset->name
			AssignmentExpression:csinfo->name = mysql->charset->name
				PtrMemberAccess:csinfo->name
					Identifier:csinfo
					Identifier:name
				PtrMemberAccess:mysql->charset->name
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:name
		ExpressionStatement:csinfo->comment = mysql->charset->comment
			AssignmentExpression:csinfo->comment = mysql->charset->comment
				PtrMemberAccess:csinfo->comment
					Identifier:csinfo
					Identifier:comment
				PtrMemberAccess:mysql->charset->comment
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:comment
		ExpressionStatement:csinfo->mbminlen = mysql->charset->mbminlen
			AssignmentExpression:csinfo->mbminlen = mysql->charset->mbminlen
				PtrMemberAccess:csinfo->mbminlen
					Identifier:csinfo
					Identifier:mbminlen
				PtrMemberAccess:mysql->charset->mbminlen
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:mbminlen
		ExpressionStatement:csinfo->mbmaxlen = mysql->charset->mbmaxlen
			AssignmentExpression:csinfo->mbmaxlen = mysql->charset->mbmaxlen
				PtrMemberAccess:csinfo->mbmaxlen
					Identifier:csinfo
					Identifier:mbmaxlen
				PtrMemberAccess:mysql->charset->mbmaxlen
					PtrMemberAccess:mysql->charset
						Identifier:mysql
						Identifier:charset
					Identifier:mbmaxlen
		IfStatement:if (mysql->options.charset_dir)
			Condition:mysql->options.charset_dir
				MemberAccess:mysql->options.charset_dir
					PtrMemberAccess:mysql->options
						Identifier:mysql
						Identifier:options
					Identifier:charset_dir
			ExpressionStatement:csinfo->dir = mysql->options.charset_dir
				AssignmentExpression:csinfo->dir = mysql->options.charset_dir
					PtrMemberAccess:csinfo->dir
						Identifier:csinfo
						Identifier:dir
					MemberAccess:mysql->options.charset_dir
						PtrMemberAccess:mysql->options
							Identifier:mysql
							Identifier:options
						Identifier:charset_dir
	ReturnType:void STDCALL
	Identifier:mysql_get_character_set_info
	ParameterList:MYSQL *mysql , MY_CHARSET_INFO *csinfo
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:MY_CHARSET_INFO *csinfo
			ParameterType:MY_CHARSET_INFO *
			Identifier:csinfo
FunctionDef:mysql_thread_safe ()
	CompoundStatement:
		ReturnStatement:return 1;
			Constant:1
	ReturnType:uint STDCALL
	Identifier:mysql_thread_safe
	ParameterList:
FunctionDef:my_net_local_init (NET *net)
	CompoundStatement:
		IdentifierDeclStatement:ulong local_net_buffer_length = 0;
			IdentifierDecl:local_net_buffer_length = 0
				IdentifierDeclType:ulong
				Identifier:local_net_buffer_length
				AssignmentExpression:local_net_buffer_length = 0
					Identifier:local_net_buffer_length
					Constant:0
		IdentifierDeclStatement:ulong local_max_allowed_packet = 0;
			IdentifierDecl:local_max_allowed_packet = 0
				IdentifierDeclType:ulong
				Identifier:local_max_allowed_packet
				AssignmentExpression:local_max_allowed_packet = 0
					Identifier:local_max_allowed_packet
					Constant:0
		ExpressionStatement:(void)mysql_get_option(NULL, MYSQL_OPT_MAX_ALLOWED_PACKET,                         &local_max_allowed_packet)
			CastExpression:(void)mysql_get_option(NULL, MYSQL_OPT_MAX_ALLOWED_PACKET,                         &local_max_allowed_packet)
				CastTarget:void
				CallExpression:mysql_get_option(NULL, MYSQL_OPT_MAX_ALLOWED_PACKET,                         &local_max_allowed_packet)
					Callee:mysql_get_option
						Identifier:mysql_get_option
					ArgumentList:NULL
						Argument:NULL
							Identifier:NULL
						Argument:MYSQL_OPT_MAX_ALLOWED_PACKET
							Identifier:MYSQL_OPT_MAX_ALLOWED_PACKET
						Argument:&local_max_allowed_packet
							UnaryOperationExpression:&local_max_allowed_packet
								UnaryOperator:&
								Identifier:local_max_allowed_packet
		ExpressionStatement:(void)mysql_get_option(NULL, MYSQL_OPT_NET_BUFFER_LENGTH,                         &local_net_buffer_length)
			CastExpression:(void)mysql_get_option(NULL, MYSQL_OPT_NET_BUFFER_LENGTH,                         &local_net_buffer_length)
				CastTarget:void
				CallExpression:mysql_get_option(NULL, MYSQL_OPT_NET_BUFFER_LENGTH,                         &local_net_buffer_length)
					Callee:mysql_get_option
						Identifier:mysql_get_option
					ArgumentList:NULL
						Argument:NULL
							Identifier:NULL
						Argument:MYSQL_OPT_NET_BUFFER_LENGTH
							Identifier:MYSQL_OPT_NET_BUFFER_LENGTH
						Argument:&local_net_buffer_length
							UnaryOperationExpression:&local_net_buffer_length
								UnaryOperator:&
								Identifier:local_net_buffer_length
		ExpressionStatement:net->max_packet = (uint)local_net_buffer_length
			AssignmentExpression:net->max_packet = (uint)local_net_buffer_length
				PtrMemberAccess:net->max_packet
					Identifier:net
					Identifier:max_packet
				CastExpression:(uint)local_net_buffer_length
					CastTarget:uint
					Identifier:local_net_buffer_length
		ExpressionStatement:my_net_set_read_timeout(net, CLIENT_NET_READ_TIMEOUT)
			CallExpression:my_net_set_read_timeout(net, CLIENT_NET_READ_TIMEOUT)
				Callee:my_net_set_read_timeout
					Identifier:my_net_set_read_timeout
				ArgumentList:net
					Argument:net
						Identifier:net
					Argument:CLIENT_NET_READ_TIMEOUT
						Identifier:CLIENT_NET_READ_TIMEOUT
		ExpressionStatement:my_net_set_write_timeout(net, CLIENT_NET_WRITE_TIMEOUT)
			CallExpression:my_net_set_write_timeout(net, CLIENT_NET_WRITE_TIMEOUT)
				Callee:my_net_set_write_timeout
					Identifier:my_net_set_write_timeout
				ArgumentList:net
					Argument:net
						Identifier:net
					Argument:CLIENT_NET_WRITE_TIMEOUT
						Identifier:CLIENT_NET_WRITE_TIMEOUT
		ExpressionStatement:my_net_set_retry_count(net, CLIENT_NET_RETRY_COUNT)
			CallExpression:my_net_set_retry_count(net, CLIENT_NET_RETRY_COUNT)
				Callee:my_net_set_retry_count
					Identifier:my_net_set_retry_count
				ArgumentList:net
					Argument:net
						Identifier:net
					Argument:CLIENT_NET_RETRY_COUNT
						Identifier:CLIENT_NET_RETRY_COUNT
		ExpressionStatement:net->max_packet_size =      MY_MAX(local_net_buffer_length, local_max_allowed_packet)
			AssignmentExpression:net->max_packet_size =      MY_MAX(local_net_buffer_length, local_max_allowed_packet)
				PtrMemberAccess:net->max_packet_size
					Identifier:net
					Identifier:max_packet_size
				CallExpression:MY_MAX(local_net_buffer_length, local_max_allowed_packet)
					Callee:MY_MAX
						Identifier:MY_MAX
					ArgumentList:local_net_buffer_length
						Argument:local_net_buffer_length
							Identifier:local_net_buffer_length
						Argument:local_max_allowed_packet
							Identifier:local_max_allowed_packet
	ReturnType:void
	Identifier:my_net_local_init
	ParameterList:NET *net
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
FunctionDef:mysql_hex_string (char *to , const char *from , ulong length)
	CompoundStatement:
		IdentifierDeclStatement:char *to0 = to;
			IdentifierDecl:*to0 = to
				IdentifierDeclType:char *
				Identifier:to0
				AssignmentExpression:*to0 = to
					Identifier:to0
					Identifier:to
		IdentifierDeclStatement:const char *end;
			IdentifierDecl:*end
				IdentifierDeclType:const char *
				Identifier:end
		ForStatement:for (end = from + length; from < end; from++)
			ForInit:end = from + length;
				AssignmentExpression:end = from + length
					Identifier:end
					AdditiveExpression:from + length
						Identifier:from
						Identifier:length
			Condition:from < end
				RelationalExpression:from < end
					Identifier:from
					Identifier:end
			PostIncDecOperationExpression:from++
				Identifier:from
				IncDec:++
			CompoundStatement:
				ExpressionStatement:*to++ = _dig_vec_upper[((unsigned char)*from) >> 4]
					AssignmentExpression:*to++ = _dig_vec_upper[((unsigned char)*from) >> 4]
						UnaryOperationExpression:*to++
							UnaryOperator:*
							PostIncDecOperationExpression:to++
								Identifier:to
								IncDec:++
						ArrayIndexing:_dig_vec_upper[((unsigned char)*from) >> 4]
							Identifier:_dig_vec_upper
							ShiftExpression:((unsigned char)*from) >> 4
								CastExpression:(unsigned char)*from
									CastTarget:unsigned char
									UnaryOperationExpression:*from
										UnaryOperator:*
										Identifier:from
								Constant:4
				ExpressionStatement:*to++ = _dig_vec_upper[((unsigned char)*from) & 0x0F]
					AssignmentExpression:*to++ = _dig_vec_upper[((unsigned char)*from) & 0x0F]
						UnaryOperationExpression:*to++
							UnaryOperator:*
							PostIncDecOperationExpression:to++
								Identifier:to
								IncDec:++
						ArrayIndexing:_dig_vec_upper[((unsigned char)*from) & 0x0F]
							Identifier:_dig_vec_upper
							BitAndExpression:((unsigned char)*from) & 0x0F
								CastExpression:(unsigned char)*from
									CastTarget:unsigned char
									UnaryOperationExpression:*from
										UnaryOperator:*
										Identifier:from
								Constant:0x0F
		ExpressionStatement:*to = '\0'
			AssignmentExpression:*to = '\0'
				UnaryOperationExpression:*to
					UnaryOperator:*
					Identifier:to
				Constant:'\0'
		ReturnStatement:return (ulong)(to - to0);
			CastExpression:(ulong)(to - to0)
				CastTarget:ulong
				AdditiveExpression:to - to0
					Identifier:to
					Identifier:to0
	ReturnType:ulong STDCALL
	Identifier:mysql_hex_string
	ParameterList:char *to , const char *from , ulong length
		Parameter:char *to
			ParameterType:char *
			Identifier:to
		Parameter:const char *from
			ParameterType:const char *
			Identifier:from
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:mysql_escape_string (char *to , const char *from , ulong length)
	CompoundStatement:
		ReturnStatement:return (uint)escape_string_for_mysql(default_charset_info, to, 0, from,                                       length);
			CastExpression:(uint)escape_string_for_mysql(default_charset_info, to, 0, from,                                       length)
				CastTarget:uint
				CallExpression:escape_string_for_mysql(default_charset_info, to, 0, from,                                       length)
					Callee:escape_string_for_mysql
						Identifier:escape_string_for_mysql
					ArgumentList:default_charset_info
						Argument:default_charset_info
							Identifier:default_charset_info
						Argument:to
							Identifier:to
						Argument:0
							Constant:0
						Argument:from
							Identifier:from
						Argument:length
							Identifier:length
	ReturnType:ulong STDCALL
	Identifier:mysql_escape_string
	ParameterList:char *to , const char *from , ulong length
		Parameter:char *to
			ParameterType:char *
			Identifier:to
		Parameter:const char *from
			ParameterType:const char *
			Identifier:from
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:mysql_real_escape_string (MYSQL *mysql , char *to , const char *from , ulong length)
	CompoundStatement:
		IfStatement:if (mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES)
			Condition:mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES
				BitAndExpression:mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES
					PtrMemberAccess:mysql->server_status
						Identifier:mysql
						Identifier:server_status
					Identifier:SERVER_STATUS_NO_BACKSLASH_ESCAPES
			CompoundStatement:
				Statement:DBUG_PRINT
				Statement:(
				Statement:"error"
				Statement:,
				Statement:(
				Statement:"NO_BACKSLASH_ESCAPES sql mode requires usage of the "
				Statement:"mysql_real_escape_string_quote function"
				Statement:)
				Statement:)
				ExpressionStatement:
				ExpressionStatement:set_mysql_extended_error(mysql, CR_INSECURE_API_ERR, unknown_sqlstate,                             ER_CLIENT(CR_INSECURE_API_ERR),                             "mysql_real_escape_string",                             "mysql_real_escape_string_quote")
					CallExpression:set_mysql_extended_error(mysql, CR_INSECURE_API_ERR, unknown_sqlstate,                             ER_CLIENT(CR_INSECURE_API_ERR),                             "mysql_real_escape_string",                             "mysql_real_escape_string_quote")
						Callee:set_mysql_extended_error
							Identifier:set_mysql_extended_error
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:CR_INSECURE_API_ERR
								Identifier:CR_INSECURE_API_ERR
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:ER_CLIENT(CR_INSECURE_API_ERR)
								CallExpression:ER_CLIENT(CR_INSECURE_API_ERR)
									Callee:ER_CLIENT
										Identifier:ER_CLIENT
									ArgumentList:CR_INSECURE_API_ERR
										Argument:CR_INSECURE_API_ERR
											Identifier:CR_INSECURE_API_ERR
							Argument:"mysql_real_escape_string"
								Constant:"mysql_real_escape_string"
							Argument:"mysql_real_escape_string_quote"
								Constant:"mysql_real_escape_string_quote"
				ReturnStatement:return (ulong)-1;
					CastExpression:(ulong)-1
						CastTarget:ulong
						UnaryOperationExpression:-1
							UnaryOperator:-
							Constant:1
		ReturnStatement:return (uint)mysql_real_escape_string_quote(mysql, to, from, length, '\'');
			CastExpression:(uint)mysql_real_escape_string_quote(mysql, to, from, length, '\'')
				CastTarget:uint
				CallExpression:mysql_real_escape_string_quote(mysql, to, from, length, '\'')
					Callee:mysql_real_escape_string_quote
						Identifier:mysql_real_escape_string_quote
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:to
							Identifier:to
						Argument:from
							Identifier:from
						Argument:length
							Identifier:length
						Argument:'\''
							Constant:'\''
	ReturnType:ulong STDCALL
	Identifier:mysql_real_escape_string
	ParameterList:MYSQL *mysql , char *to , const char *from , ulong length
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:char *to
			ParameterType:char *
			Identifier:to
		Parameter:const char *from
			ParameterType:const char *
			Identifier:from
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:mysql_real_escape_string_quote (MYSQL *mysql , char *to , const char *from , ulong length , char quote)
	CompoundStatement:
		IfStatement:if (quote == '`' || mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES)
			Condition:quote == '`' || mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES
				OrExpression:quote == '`' || mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES
					EqualityExpression:quote == '`'
						Identifier:quote
						Constant:'`'
					BitAndExpression:mysql->server_status & SERVER_STATUS_NO_BACKSLASH_ESCAPES
						PtrMemberAccess:mysql->server_status
							Identifier:mysql
							Identifier:server_status
						Identifier:SERVER_STATUS_NO_BACKSLASH_ESCAPES
			ReturnStatement:return (uint)escape_quotes_for_mysql(mysql->charset, to, 0, from, length,                                         quote);
				CastExpression:(uint)escape_quotes_for_mysql(mysql->charset, to, 0, from, length,                                         quote)
					CastTarget:uint
					CallExpression:escape_quotes_for_mysql(mysql->charset, to, 0, from, length,                                         quote)
						Callee:escape_quotes_for_mysql
							Identifier:escape_quotes_for_mysql
						ArgumentList:mysql->charset
							Argument:mysql->charset
								PtrMemberAccess:mysql->charset
									Identifier:mysql
									Identifier:charset
							Argument:to
								Identifier:to
							Argument:0
								Constant:0
							Argument:from
								Identifier:from
							Argument:length
								Identifier:length
							Argument:quote
								Identifier:quote
		ReturnStatement:return (uint)escape_string_for_mysql(mysql->charset, to, 0, from, length);
			CastExpression:(uint)escape_string_for_mysql(mysql->charset, to, 0, from, length)
				CastTarget:uint
				CallExpression:escape_string_for_mysql(mysql->charset, to, 0, from, length)
					Callee:escape_string_for_mysql
						Identifier:escape_string_for_mysql
					ArgumentList:mysql->charset
						Argument:mysql->charset
							PtrMemberAccess:mysql->charset
								Identifier:mysql
								Identifier:charset
						Argument:to
							Identifier:to
						Argument:0
							Constant:0
						Argument:from
							Identifier:from
						Argument:length
							Identifier:length
	ReturnType:ulong STDCALL
	Identifier:mysql_real_escape_string_quote
	ParameterList:MYSQL *mysql , char *to , const char *from , ulong length , char quote
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:char *to
			ParameterType:char *
			Identifier:to
		Parameter:const char *from
			ParameterType:const char *
			Identifier:from
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
		Parameter:char quote
			ParameterType:char
			Identifier:quote
FunctionDef:myodbc_remove_escape (MYSQL *mysql , char *name)
	CompoundStatement:
		IdentifierDeclStatement:char *to;
			IdentifierDecl:*to
				IdentifierDeclType:char *
				Identifier:to
		IdentifierDeclStatement:bool use_mb_flag = use_mb(mysql->charset);
			IdentifierDecl:use_mb_flag = use_mb(mysql->charset)
				IdentifierDeclType:bool
				Identifier:use_mb_flag
				AssignmentExpression:use_mb_flag = use_mb(mysql->charset)
					Identifier:use_mb_flag
					CallExpression:use_mb(mysql->charset)
						Callee:use_mb
							Identifier:use_mb
						ArgumentList:mysql->charset
							Argument:mysql->charset
								PtrMemberAccess:mysql->charset
									Identifier:mysql
									Identifier:charset
		IdentifierDeclStatement:char *end = NULL;
			IdentifierDecl:*end = NULL
				IdentifierDeclType:char *
				Identifier:end
				AssignmentExpression:*end = NULL
					Identifier:end
					Identifier:NULL
		IfStatement:if (use_mb_flag)
			Condition:use_mb_flag
				Identifier:use_mb_flag
			ForStatement:for (end = name; *end; end++)
				ForInit:end = name;
					AssignmentExpression:end = name
						Identifier:end
						Identifier:name
				Condition:*end
					UnaryOperationExpression:*end
						UnaryOperator:*
						Identifier:end
				PostIncDecOperationExpression:end++
					Identifier:end
					IncDec:++
				ExpressionStatement:
		ForStatement:for (to = name; *name; name++)
			ForInit:to = name;
				AssignmentExpression:to = name
					Identifier:to
					Identifier:name
			Condition:*name
				UnaryOperationExpression:*name
					UnaryOperator:*
					Identifier:name
			PostIncDecOperationExpression:name++
				Identifier:name
				IncDec:++
			CompoundStatement:
				IdentifierDeclStatement:int l;
					IdentifierDecl:l
						IdentifierDeclType:int
						Identifier:l
				IfStatement:if (use_mb_flag && (l = my_ismbchar(mysql->charset, name, end)))
					Condition:use_mb_flag && (l = my_ismbchar(mysql->charset, name, end))
						AndExpression:use_mb_flag && (l = my_ismbchar(mysql->charset, name, end))
							Identifier:use_mb_flag
							AssignmentExpression:l = my_ismbchar(mysql->charset, name, end)
								Identifier:l
								CallExpression:my_ismbchar(mysql->charset, name, end)
									Callee:my_ismbchar
										Identifier:my_ismbchar
									ArgumentList:mysql->charset
										Argument:mysql->charset
											PtrMemberAccess:mysql->charset
												Identifier:mysql
												Identifier:charset
										Argument:name
											Identifier:name
										Argument:end
											Identifier:end
					CompoundStatement:
						WhileStatement:while (l--)
							Condition:l--
								PostIncDecOperationExpression:l--
									Identifier:l
									IncDec:--
							ExpressionStatement:*to++ = *name++
								AssignmentExpression:*to++ = *name++
									UnaryOperationExpression:*to++
										UnaryOperator:*
										PostIncDecOperationExpression:to++
											Identifier:to
											IncDec:++
									UnaryOperationExpression:*name++
										UnaryOperator:*
										PostIncDecOperationExpression:name++
											Identifier:name
											IncDec:++
						ExpressionStatement:name--
							PostIncDecOperationExpression:name--
								Identifier:name
								IncDec:--
						ContinueStatement:continue;
				IfStatement:if (*name == '\\' && name[1])
					Condition:*name == '\\' && name[1]
						AndExpression:*name == '\\' && name[1]
							EqualityExpression:*name == '\\'
								UnaryOperationExpression:*name
									UnaryOperator:*
									Identifier:name
								Constant:'\\'
							ArrayIndexing:name[1]
								Identifier:name
								Constant:1
					ExpressionStatement:name++
						PostIncDecOperationExpression:name++
							Identifier:name
							IncDec:++
				ExpressionStatement:*to++ = *name
					AssignmentExpression:*to++ = *name
						UnaryOperationExpression:*to++
							UnaryOperator:*
							PostIncDecOperationExpression:to++
								Identifier:to
								IncDec:++
						UnaryOperationExpression:*name
							UnaryOperator:*
							Identifier:name
		ExpressionStatement:*to = 0
			AssignmentExpression:*to = 0
				UnaryOperationExpression:*to
					UnaryOperator:*
					Identifier:to
				Constant:0
	ReturnType:void STDCALL
	Identifier:myodbc_remove_escape
	ParameterList:MYSQL *mysql , char *name
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:char *name
			ParameterType:char *
			Identifier:name
IdentifierDeclStatement:null
	IdentifierDecl:stmt_read_row_unbuffered(MYSQL_STMT *stmt, unsigned char **row)
		IdentifierDeclType:int ( MYSQL_STMT * stmt , unsigned char * * row )
		Identifier:stmt_read_row_unbuffered
IdentifierDeclStatement:null
	IdentifierDecl:stmt_read_row_buffered(MYSQL_STMT *stmt, unsigned char **row)
		IdentifierDeclType:int ( MYSQL_STMT * stmt , unsigned char * * row )
		Identifier:stmt_read_row_buffered
IdentifierDeclStatement:null
	IdentifierDecl:stmt_read_row_from_cursor(MYSQL_STMT *stmt, unsigned char **row)
		IdentifierDeclType:int ( MYSQL_STMT * stmt , unsigned char * * row )
		Identifier:stmt_read_row_from_cursor
IdentifierDeclStatement:null
	IdentifierDecl:stmt_read_row_no_data(MYSQL_STMT *stmt, unsigned char **row)
		IdentifierDeclType:int ( MYSQL_STMT * stmt , unsigned char * * row )
		Identifier:stmt_read_row_no_data
IdentifierDeclStatement:null
	IdentifierDecl:stmt_read_row_no_result_set(MYSQL_STMT *stmt, unsigned char **row)
		IdentifierDeclType:int ( MYSQL_STMT * stmt , unsigned char * * row )
		Identifier:stmt_read_row_no_result_set
IdentifierDeclStatement:null
	IdentifierDecl:stmt_update_metadata(MYSQL_STMT *stmt, MYSQL_ROWS *data)
		IdentifierDeclType:void ( MYSQL_STMT * stmt , MYSQL_ROWS * data )
		Identifier:stmt_update_metadata
IdentifierDeclStatement:null
	IdentifierDecl:setup_one_fetch_function(MYSQL_BIND *, MYSQL_FIELD *field)
		IdentifierDeclType:bool ( MYSQL_BIND * , MYSQL_FIELD * field )
		Identifier:setup_one_fetch_function
IdentifierDeclStatement:null
	IdentifierDecl:reset_stmt_handle(MYSQL_STMT *stmt, uint flags)
		IdentifierDeclType:bool ( MYSQL_STMT * stmt , uint flags )
		Identifier:reset_stmt_handle
FunctionDef:my_realloc_str (NET *net , ulong length)
	CompoundStatement:
		IdentifierDeclStatement:ulong buf_length = (ulong)(net->write_pos - net->buff);
			IdentifierDecl:buf_length = (ulong)(net->write_pos - net->buff)
				IdentifierDeclType:ulong
				Identifier:buf_length
				AssignmentExpression:buf_length = (ulong)(net->write_pos - net->buff)
					Identifier:buf_length
					CastExpression:(ulong)(net->write_pos - net->buff)
						CastTarget:ulong
						AdditiveExpression:net->write_pos - net->buff
							PtrMemberAccess:net->write_pos
								Identifier:net
								Identifier:write_pos
							PtrMemberAccess:net->buff
								Identifier:net
								Identifier:buff
		IdentifierDeclStatement:bool res = 0;
			IdentifierDecl:res = 0
				IdentifierDeclType:bool
				Identifier:res
				AssignmentExpression:res = 0
					Identifier:res
					Constant:0
		ExpressionStatement:DBUG_ENTER("my_realloc_str")
			CallExpression:DBUG_ENTER("my_realloc_str")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"my_realloc_str"
					Argument:"my_realloc_str"
						Constant:"my_realloc_str"
		IfStatement:if (buf_length + length > net->max_packet)
			Condition:buf_length + length > net->max_packet
				RelationalExpression:buf_length + length > net->max_packet
					AdditiveExpression:buf_length + length
						Identifier:buf_length
						Identifier:length
					PtrMemberAccess:net->max_packet
						Identifier:net
						Identifier:max_packet
			CompoundStatement:
				ExpressionStatement:res = net_realloc(net, buf_length + length)
					AssignmentExpression:res = net_realloc(net, buf_length + length)
						Identifier:res
						CallExpression:net_realloc(net, buf_length + length)
							Callee:net_realloc
								Identifier:net_realloc
							ArgumentList:net
								Argument:net
									Identifier:net
								Argument:buf_length + length
									AdditiveExpression:buf_length + length
										Identifier:buf_length
										Identifier:length
				IfStatement:if (res)
					Condition:res
						Identifier:res
					CompoundStatement:
						IfStatement:if (net->last_errno == ER_OUT_OF_RESOURCES)
							Condition:net->last_errno == ER_OUT_OF_RESOURCES
								EqualityExpression:net->last_errno == ER_OUT_OF_RESOURCES
									PtrMemberAccess:net->last_errno
										Identifier:net
										Identifier:last_errno
									Identifier:ER_OUT_OF_RESOURCES
							ExpressionStatement:net->last_errno = CR_OUT_OF_MEMORY
								AssignmentExpression:net->last_errno = CR_OUT_OF_MEMORY
									PtrMemberAccess:net->last_errno
										Identifier:net
										Identifier:last_errno
									Identifier:CR_OUT_OF_MEMORY
						ExpressionStatement:my_stpcpy(net->sqlstate, unknown_sqlstate)
							CallExpression:my_stpcpy(net->sqlstate, unknown_sqlstate)
								Callee:my_stpcpy
									Identifier:my_stpcpy
								ArgumentList:net->sqlstate
									Argument:net->sqlstate
										PtrMemberAccess:net->sqlstate
											Identifier:net
											Identifier:sqlstate
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
						ExpressionStatement:my_stpcpy(net->last_error, ER_CLIENT(net->last_errno))
							CallExpression:my_stpcpy(net->last_error, ER_CLIENT(net->last_errno))
								Callee:my_stpcpy
									Identifier:my_stpcpy
								ArgumentList:net->last_error
									Argument:net->last_error
										PtrMemberAccess:net->last_error
											Identifier:net
											Identifier:last_error
									Argument:ER_CLIENT(net->last_errno)
										CallExpression:ER_CLIENT(net->last_errno)
											Callee:ER_CLIENT
												Identifier:ER_CLIENT
											ArgumentList:net->last_errno
												Argument:net->last_errno
													PtrMemberAccess:net->last_errno
														Identifier:net
														Identifier:last_errno
				ExpressionStatement:net->write_pos = net->buff + buf_length
					AssignmentExpression:net->write_pos = net->buff + buf_length
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
						AdditiveExpression:net->buff + buf_length
							PtrMemberAccess:net->buff
								Identifier:net
								Identifier:buff
							Identifier:buf_length
		ExpressionStatement:DBUG_RETURN(res)
			CallExpression:DBUG_RETURN(res)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:res
					Argument:res
						Identifier:res
	ReturnType:static bool
	Identifier:my_realloc_str
	ParameterList:NET *net , ulong length
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:stmt_clear_error (MYSQL_STMT *stmt)
	CompoundStatement:
		IfStatement:if (stmt->last_errno)
			Condition:stmt->last_errno
				PtrMemberAccess:stmt->last_errno
					Identifier:stmt
					Identifier:last_errno
			CompoundStatement:
				ExpressionStatement:stmt->last_errno = 0
					AssignmentExpression:stmt->last_errno = 0
						PtrMemberAccess:stmt->last_errno
							Identifier:stmt
							Identifier:last_errno
						Constant:0
				ExpressionStatement:stmt->last_error[0] = '\0'
					AssignmentExpression:stmt->last_error[0] = '\0'
						ArrayIndexing:stmt->last_error[0]
							PtrMemberAccess:stmt->last_error
								Identifier:stmt
								Identifier:last_error
							Constant:0
						Constant:'\0'
				ExpressionStatement:my_stpcpy(stmt->sqlstate, not_error_sqlstate)
					CallExpression:my_stpcpy(stmt->sqlstate, not_error_sqlstate)
						Callee:my_stpcpy
							Identifier:my_stpcpy
						ArgumentList:stmt->sqlstate
							Argument:stmt->sqlstate
								PtrMemberAccess:stmt->sqlstate
									Identifier:stmt
									Identifier:sqlstate
							Argument:not_error_sqlstate
								Identifier:not_error_sqlstate
	ReturnType:static void
	Identifier:stmt_clear_error
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:set_stmt_error (MYSQL_STMT *stmt , int errcode , const char *sqlstate , const char *err)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("set_stmt_error")
			CallExpression:DBUG_ENTER("set_stmt_error")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"set_stmt_error"
					Argument:"set_stmt_error"
						Constant:"set_stmt_error"
		ExpressionStatement:DBUG_PRINT("enter", ("error: %d '%s'", errcode, ER_CLIENT(errcode)))
			CallExpression:DBUG_PRINT("enter", ("error: %d '%s'", errcode, ER_CLIENT(errcode)))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"error: %d '%s'", errcode, ER_CLIENT(errcode)
						Expression:"error: %d '%s'", errcode, ER_CLIENT(errcode)
							Constant:"error: %d '%s'"
							Expression:errcode, ER_CLIENT(errcode)
								Identifier:errcode
								CallExpression:ER_CLIENT(errcode)
									Callee:ER_CLIENT
										Identifier:ER_CLIENT
									ArgumentList:errcode
										Argument:errcode
											Identifier:errcode
		ExpressionStatement:DBUG_ASSERT(stmt != 0)
			CallExpression:DBUG_ASSERT(stmt != 0)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:stmt != 0
					Argument:stmt != 0
						EqualityExpression:stmt != 0
							Identifier:stmt
							Constant:0
		IfStatement:if (err == 0)
			Condition:err == 0
				EqualityExpression:err == 0
					Identifier:err
					Constant:0
			ExpressionStatement:err = ER_CLIENT(errcode)
				AssignmentExpression:err = ER_CLIENT(errcode)
					Identifier:err
					CallExpression:ER_CLIENT(errcode)
						Callee:ER_CLIENT
							Identifier:ER_CLIENT
						ArgumentList:errcode
							Argument:errcode
								Identifier:errcode
		ExpressionStatement:stmt->last_errno = errcode
			AssignmentExpression:stmt->last_errno = errcode
				PtrMemberAccess:stmt->last_errno
					Identifier:stmt
					Identifier:last_errno
				Identifier:errcode
		ExpressionStatement:my_stpcpy(stmt->last_error, ER_CLIENT(errcode))
			CallExpression:my_stpcpy(stmt->last_error, ER_CLIENT(errcode))
				Callee:my_stpcpy
					Identifier:my_stpcpy
				ArgumentList:stmt->last_error
					Argument:stmt->last_error
						PtrMemberAccess:stmt->last_error
							Identifier:stmt
							Identifier:last_error
					Argument:ER_CLIENT(errcode)
						CallExpression:ER_CLIENT(errcode)
							Callee:ER_CLIENT
								Identifier:ER_CLIENT
							ArgumentList:errcode
								Argument:errcode
									Identifier:errcode
		ExpressionStatement:my_stpcpy(stmt->sqlstate, sqlstate)
			CallExpression:my_stpcpy(stmt->sqlstate, sqlstate)
				Callee:my_stpcpy
					Identifier:my_stpcpy
				ArgumentList:stmt->sqlstate
					Argument:stmt->sqlstate
						PtrMemberAccess:stmt->sqlstate
							Identifier:stmt
							Identifier:sqlstate
					Argument:sqlstate
						Identifier:sqlstate
		ExpressionStatement:DBUG_VOID_RETURN
			Identifier:DBUG_VOID_RETURN
	ReturnType:void
	Identifier:set_stmt_error
	ParameterList:MYSQL_STMT *stmt , int errcode , const char *sqlstate , const char *err
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:int errcode
			ParameterType:int
			Identifier:errcode
		Parameter:const char *sqlstate
			ParameterType:const char *
			Identifier:sqlstate
		Parameter:const char *err
			ParameterType:const char *
			Identifier:err
FunctionDef:set_stmt_errmsg (MYSQL_STMT *stmt , NET *net)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("set_stmt_errmsg")
			CallExpression:DBUG_ENTER("set_stmt_errmsg")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"set_stmt_errmsg"
					Argument:"set_stmt_errmsg"
						Constant:"set_stmt_errmsg"
		ExpressionStatement:DBUG_PRINT("enter", ("error: %d/%s '%s'", net->last_errno, net->sqlstate,                       net->last_error))
			CallExpression:DBUG_PRINT("enter", ("error: %d/%s '%s'", net->last_errno, net->sqlstate,                       net->last_error))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"error: %d/%s '%s'", net->last_errno, net->sqlstate,                       net->last_error
						Expression:"error: %d/%s '%s'", net->last_errno, net->sqlstate,                       net->last_error
							Constant:"error: %d/%s '%s'"
							Expression:net->last_errno, net->sqlstate,                       net->last_error
								PtrMemberAccess:net->last_errno
									Identifier:net
									Identifier:last_errno
								Expression:net->sqlstate,                       net->last_error
									PtrMemberAccess:net->sqlstate
										Identifier:net
										Identifier:sqlstate
									PtrMemberAccess:net->last_error
										Identifier:net
										Identifier:last_error
		ExpressionStatement:DBUG_ASSERT(stmt != 0)
			CallExpression:DBUG_ASSERT(stmt != 0)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:stmt != 0
					Argument:stmt != 0
						EqualityExpression:stmt != 0
							Identifier:stmt
							Constant:0
		ExpressionStatement:stmt->last_errno = net->last_errno
			AssignmentExpression:stmt->last_errno = net->last_errno
				PtrMemberAccess:stmt->last_errno
					Identifier:stmt
					Identifier:last_errno
				PtrMemberAccess:net->last_errno
					Identifier:net
					Identifier:last_errno
		IfStatement:if (net->last_error[0] != '\0')
			Condition:net->last_error[0] != '\0'
				EqualityExpression:net->last_error[0] != '\0'
					ArrayIndexing:net->last_error[0]
						PtrMemberAccess:net->last_error
							Identifier:net
							Identifier:last_error
						Constant:0
					Constant:'\0'
			ExpressionStatement:my_stpcpy(stmt->last_error, net->last_error)
				CallExpression:my_stpcpy(stmt->last_error, net->last_error)
					Callee:my_stpcpy
						Identifier:my_stpcpy
					ArgumentList:stmt->last_error
						Argument:stmt->last_error
							PtrMemberAccess:stmt->last_error
								Identifier:stmt
								Identifier:last_error
						Argument:net->last_error
							PtrMemberAccess:net->last_error
								Identifier:net
								Identifier:last_error
		ExpressionStatement:my_stpcpy(stmt->sqlstate, net->sqlstate)
			CallExpression:my_stpcpy(stmt->sqlstate, net->sqlstate)
				Callee:my_stpcpy
					Identifier:my_stpcpy
				ArgumentList:stmt->sqlstate
					Argument:stmt->sqlstate
						PtrMemberAccess:stmt->sqlstate
							Identifier:stmt
							Identifier:sqlstate
					Argument:net->sqlstate
						PtrMemberAccess:net->sqlstate
							Identifier:net
							Identifier:sqlstate
		ExpressionStatement:DBUG_VOID_RETURN
			Identifier:DBUG_VOID_RETURN
	ReturnType:void
	Identifier:set_stmt_errmsg
	ParameterList:MYSQL_STMT *stmt , NET *net
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
FunctionDef:cli_read_prepare_result (MYSQL *mysql , MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:uchar *pos;
			IdentifierDecl:*pos
				IdentifierDeclType:uchar *
				Identifier:pos
		IdentifierDeclStatement:uint field_count, param_count;
			IdentifierDecl:field_count
				IdentifierDeclType:uint
				Identifier:field_count
			IdentifierDecl:param_count
				IdentifierDeclType:uint
				Identifier:param_count
		IdentifierDeclStatement:ulong packet_length;
			IdentifierDecl:packet_length
				IdentifierDeclType:ulong
				Identifier:packet_length
		ExpressionStatement:DBUG_ENTER("cli_read_prepare_result")
			CallExpression:DBUG_ENTER("cli_read_prepare_result")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"cli_read_prepare_result"
					Argument:"cli_read_prepare_result"
						Constant:"cli_read_prepare_result"
		Statement:/* free old result and initialize mysql->field_alloc */
		ExpressionStatement:free_old_query(mysql)
			CallExpression:free_old_query(mysql)
				Callee:free_old_query
					Identifier:free_old_query
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
		IfStatement:if ((packet_length = cli_safe_read(mysql, NULL)) == packet_error)
			Condition:(packet_length = cli_safe_read(mysql, NULL)) == packet_error
				EqualityExpression:(packet_length = cli_safe_read(mysql, NULL)) == packet_error
					AssignmentExpression:packet_length = cli_safe_read(mysql, NULL)
						Identifier:packet_length
						CallExpression:cli_safe_read(mysql, NULL)
							Callee:cli_safe_read
								Identifier:cli_safe_read
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:NULL
									Identifier:NULL
					Identifier:packet_error
			ExpressionStatement:DBUG_RETURN(1)
				CallExpression:DBUG_RETURN(1)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:1
						Argument:1
							Constant:1
		ExpressionStatement:mysql->warning_count = 0
			AssignmentExpression:mysql->warning_count = 0
				PtrMemberAccess:mysql->warning_count
					Identifier:mysql
					Identifier:warning_count
				Constant:0
		ExpressionStatement:pos = (uchar *)mysql->net.read_pos
			AssignmentExpression:pos = (uchar *)mysql->net.read_pos
				Identifier:pos
				CastExpression:(uchar *)mysql->net.read_pos
					CastTarget:uchar *
					MemberAccess:mysql->net.read_pos
						PtrMemberAccess:mysql->net
							Identifier:mysql
							Identifier:net
						Identifier:read_pos
		ExpressionStatement:stmt->stmt_id = uint4korr(pos + 1)
			AssignmentExpression:stmt->stmt_id = uint4korr(pos + 1)
				PtrMemberAccess:stmt->stmt_id
					Identifier:stmt
					Identifier:stmt_id
				CallExpression:uint4korr(pos + 1)
					Callee:uint4korr
						Identifier:uint4korr
					ArgumentList:pos + 1
						Argument:pos + 1
							AdditiveExpression:pos + 1
								Identifier:pos
								Constant:1
		ExpressionStatement:pos += 5
			AssignmentExpression:pos += 5
				Identifier:pos
				Constant:5
		Statement:/* Number of columns in result set */
		ExpressionStatement:field_count = uint2korr(pos)
			AssignmentExpression:field_count = uint2korr(pos)
				Identifier:field_count
				CallExpression:uint2korr(pos)
					Callee:uint2korr
						Identifier:uint2korr
					ArgumentList:pos
						Argument:pos
							Identifier:pos
		ExpressionStatement:pos += 2
			AssignmentExpression:pos += 2
				Identifier:pos
				Constant:2
		Statement:/* Number of placeholders in the statement */
		ExpressionStatement:param_count = uint2korr(pos)
			AssignmentExpression:param_count = uint2korr(pos)
				Identifier:param_count
				CallExpression:uint2korr(pos)
					Callee:uint2korr
						Identifier:uint2korr
					ArgumentList:pos
						Argument:pos
							Identifier:pos
		ExpressionStatement:pos += 2
			AssignmentExpression:pos += 2
				Identifier:pos
				Constant:2
		ExpressionStatement:mysql->resultset_metadata = RESULTSET_METADATA_FULL
			AssignmentExpression:mysql->resultset_metadata = RESULTSET_METADATA_FULL
				PtrMemberAccess:mysql->resultset_metadata
					Identifier:mysql
					Identifier:resultset_metadata
				Identifier:RESULTSET_METADATA_FULL
		IfStatement:if (packet_length >= 12)
			Condition:packet_length >= 12
				RelationalExpression:packet_length >= 12
					Identifier:packet_length
					Constant:12
			CompoundStatement:
				ExpressionStatement:mysql->warning_count = uint2korr(pos + 1)
					AssignmentExpression:mysql->warning_count = uint2korr(pos + 1)
						PtrMemberAccess:mysql->warning_count
							Identifier:mysql
							Identifier:warning_count
						CallExpression:uint2korr(pos + 1)
							Callee:uint2korr
								Identifier:uint2korr
							ArgumentList:pos + 1
								Argument:pos + 1
									AdditiveExpression:pos + 1
										Identifier:pos
										Constant:1
				IfStatement:if (mysql->client_flag & CLIENT_OPTIONAL_RESULTSET_METADATA)
					Condition:mysql->client_flag & CLIENT_OPTIONAL_RESULTSET_METADATA
						BitAndExpression:mysql->client_flag & CLIENT_OPTIONAL_RESULTSET_METADATA
							PtrMemberAccess:mysql->client_flag
								Identifier:mysql
								Identifier:client_flag
							Identifier:CLIENT_OPTIONAL_RESULTSET_METADATA
					CompoundStatement:
						Statement:mysql
						Statement:->
						Statement:resultset_metadata
						Statement:=
						Statement:static_cast
						Statement:<
						Statement:enum
						ExpressionStatement:enum_resultset_metadata>(*(pos + 3))
							RelationalExpression:enum_resultset_metadata>(*(pos + 3))
								Identifier:enum_resultset_metadata
								UnaryOperationExpression:*(pos + 3)
									UnaryOperator:*
									AdditiveExpression:pos + 3
										Identifier:pos
										Constant:3
		IfStatement:if (param_count != 0 &&      mysql->resultset_metadata == RESULTSET_METADATA_FULL)
			Condition:param_count != 0 &&      mysql->resultset_metadata == RESULTSET_METADATA_FULL
				AndExpression:param_count != 0 &&      mysql->resultset_metadata == RESULTSET_METADATA_FULL
					EqualityExpression:param_count != 0
						Identifier:param_count
						Constant:0
					EqualityExpression:mysql->resultset_metadata == RESULTSET_METADATA_FULL
						PtrMemberAccess:mysql->resultset_metadata
							Identifier:mysql
							Identifier:resultset_metadata
						Identifier:RESULTSET_METADATA_FULL
			CompoundStatement:
				ExpressionStatement:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_PARAM_DEF)
					CallExpression:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_PARAM_DEF)
						Callee:MYSQL_TRACE_STAGE
							Identifier:MYSQL_TRACE_STAGE
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:WAIT_FOR_PARAM_DEF
								Identifier:WAIT_FOR_PARAM_DEF
				Statement:/* skip parameters data: we don't support it yet */
				IfStatement:if (!(cli_read_metadata(mysql, param_count, 7)))
					Condition:!(cli_read_metadata(mysql, param_count, 7))
						UnaryOperationExpression:!(cli_read_metadata(mysql, param_count, 7))
							UnaryOperator:!
							CallExpression:cli_read_metadata(mysql, param_count, 7)
								Callee:cli_read_metadata
									Identifier:cli_read_metadata
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
									Argument:param_count
										Identifier:param_count
									Argument:7
										Constant:7
					ExpressionStatement:DBUG_RETURN(1)
						CallExpression:DBUG_RETURN(1)
							Callee:DBUG_RETURN
								Identifier:DBUG_RETURN
							ArgumentList:1
								Argument:1
									Constant:1
				Statement:/* free memory allocated by cli_read_metadata() for parameters data */
				ExpressionStatement:free_root(mysql->field_alloc, MYF(0))
					CallExpression:free_root(mysql->field_alloc, MYF(0))
						Callee:free_root
							Identifier:free_root
						ArgumentList:mysql->field_alloc
							Argument:mysql->field_alloc
								PtrMemberAccess:mysql->field_alloc
									Identifier:mysql
									Identifier:field_alloc
							Argument:MYF(0)
								CallExpression:MYF(0)
									Callee:MYF
										Identifier:MYF
									ArgumentList:0
										Argument:0
											Constant:0
		IfStatement:if (field_count != 0)
			Condition:field_count != 0
				EqualityExpression:field_count != 0
					Identifier:field_count
					Constant:0
			CompoundStatement:
				IfStatement:if (!(mysql->server_status & SERVER_STATUS_AUTOCOMMIT))
					Condition:!(mysql->server_status & SERVER_STATUS_AUTOCOMMIT)
						UnaryOperationExpression:!(mysql->server_status & SERVER_STATUS_AUTOCOMMIT)
							UnaryOperator:!
							BitAndExpression:mysql->server_status & SERVER_STATUS_AUTOCOMMIT
								PtrMemberAccess:mysql->server_status
									Identifier:mysql
									Identifier:server_status
								Identifier:SERVER_STATUS_AUTOCOMMIT
					ExpressionStatement:mysql->server_status |= SERVER_STATUS_IN_TRANS
						AssignmentExpression:mysql->server_status |= SERVER_STATUS_IN_TRANS
							PtrMemberAccess:mysql->server_status
								Identifier:mysql
								Identifier:server_status
							Identifier:SERVER_STATUS_IN_TRANS
				IfStatement:if (mysql->resultset_metadata == RESULTSET_METADATA_FULL)
					Condition:mysql->resultset_metadata == RESULTSET_METADATA_FULL
						EqualityExpression:mysql->resultset_metadata == RESULTSET_METADATA_FULL
							PtrMemberAccess:mysql->resultset_metadata
								Identifier:mysql
								Identifier:resultset_metadata
							Identifier:RESULTSET_METADATA_FULL
					CompoundStatement:
						ExpressionStatement:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_FIELD_DEF)
							CallExpression:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_FIELD_DEF)
								Callee:MYSQL_TRACE_STAGE
									Identifier:MYSQL_TRACE_STAGE
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
									Argument:WAIT_FOR_FIELD_DEF
										Identifier:WAIT_FOR_FIELD_DEF
						IfStatement:if (!(stmt->fields =                cli_read_metadata_ex(mysql, stmt->mem_root, field_count, 7)))
							Condition:!(stmt->fields =                cli_read_metadata_ex(mysql, stmt->mem_root, field_count, 7))
								UnaryOperationExpression:!(stmt->fields =                cli_read_metadata_ex(mysql, stmt->mem_root, field_count, 7))
									UnaryOperator:!
									AssignmentExpression:stmt->fields =                cli_read_metadata_ex(mysql, stmt->mem_root, field_count, 7)
										PtrMemberAccess:stmt->fields
											Identifier:stmt
											Identifier:fields
										CallExpression:cli_read_metadata_ex(mysql, stmt->mem_root, field_count, 7)
											Callee:cli_read_metadata_ex
												Identifier:cli_read_metadata_ex
											ArgumentList:mysql
												Argument:mysql
													Identifier:mysql
												Argument:stmt->mem_root
													PtrMemberAccess:stmt->mem_root
														Identifier:stmt
														Identifier:mem_root
												Argument:field_count
													Identifier:field_count
												Argument:7
													Constant:7
							ExpressionStatement:DBUG_RETURN(1)
								CallExpression:DBUG_RETURN(1)
									Callee:DBUG_RETURN
										Identifier:DBUG_RETURN
									ArgumentList:1
										Argument:1
											Constant:1
		ExpressionStatement:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
			CallExpression:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
				Callee:MYSQL_TRACE_STAGE
					Identifier:MYSQL_TRACE_STAGE
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:READY_FOR_COMMAND
						Identifier:READY_FOR_COMMAND
		ExpressionStatement:stmt->field_count = field_count
			AssignmentExpression:stmt->field_count = field_count
				PtrMemberAccess:stmt->field_count
					Identifier:stmt
					Identifier:field_count
				Identifier:field_count
		ExpressionStatement:stmt->param_count = (ulong)param_count
			AssignmentExpression:stmt->param_count = (ulong)param_count
				PtrMemberAccess:stmt->param_count
					Identifier:stmt
					Identifier:param_count
				CastExpression:(ulong)param_count
					CastTarget:ulong
					Identifier:param_count
		ExpressionStatement:DBUG_PRINT("exit", ("field_count: %u  param_count: %u  warning_count: %u",                      field_count, param_count, (uint)mysql->warning_count))
			CallExpression:DBUG_PRINT("exit", ("field_count: %u  param_count: %u  warning_count: %u",                      field_count, param_count, (uint)mysql->warning_count))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"exit"
					Argument:"exit"
						Constant:"exit"
					Argument:"field_count: %u  param_count: %u  warning_count: %u",                      field_count, param_count, (uint)mysql->warning_count
						Expression:"field_count: %u  param_count: %u  warning_count: %u",                      field_count, param_count, (uint)mysql->warning_count
							Constant:"field_count: %u  param_count: %u  warning_count: %u"
							Expression:field_count, param_count, (uint)mysql->warning_count
								Identifier:field_count
								Expression:param_count, (uint)mysql->warning_count
									Identifier:param_count
									CastExpression:(uint)mysql->warning_count
										CastTarget:uint
										PtrMemberAccess:mysql->warning_count
											Identifier:mysql
											Identifier:warning_count
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:bool
	Identifier:cli_read_prepare_result
	ParameterList:MYSQL *mysql , MYSQL_STMT *stmt
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_init (MYSQL *mysql)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_STMT *stmt;
			IdentifierDecl:*stmt
				IdentifierDeclType:MYSQL_STMT *
				Identifier:stmt
		ExpressionStatement:DBUG_ENTER("mysql_stmt_init")
			CallExpression:DBUG_ENTER("mysql_stmt_init")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_init"
					Argument:"mysql_stmt_init"
						Constant:"mysql_stmt_init"
		IfStatement:if (!(stmt = (MYSQL_STMT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->extension = (MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))))
			Condition:!(stmt = (MYSQL_STMT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->extension = (MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL)))
				OrExpression:!(stmt = (MYSQL_STMT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->extension = (MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL)))
					UnaryOperationExpression:!(stmt = (MYSQL_STMT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL)))
						UnaryOperator:!
						AssignmentExpression:stmt = (MYSQL_STMT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL))
							Identifier:stmt
							CastExpression:(MYSQL_STMT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL))
								CastTarget:MYSQL_STMT *
								CallExpression:my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT),                                       MYF(MY_WME | MY_ZEROFILL))
									Callee:my_malloc
										Identifier:my_malloc
									ArgumentList:PSI_NOT_INSTRUMENTED
										Argument:PSI_NOT_INSTRUMENTED
											Identifier:PSI_NOT_INSTRUMENTED
										Argument:sizeof(MYSQL_STMT)
											SizeofExpression:sizeof(MYSQL_STMT)
												Sizeof:sizeof
												Identifier:MYSQL_STMT
										Argument:MYF(MY_WME | MY_ZEROFILL)
											CallExpression:MYF(MY_WME | MY_ZEROFILL)
												Callee:MYF
													Identifier:MYF
												ArgumentList:MY_WME | MY_ZEROFILL
													Argument:MY_WME | MY_ZEROFILL
														InclusiveOrExpression:MY_WME | MY_ZEROFILL
															Identifier:MY_WME
															Identifier:MY_ZEROFILL
					OrExpression:!(stmt->extension = (MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL)))
						UnaryOperationExpression:!(stmt->extension = (MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL)))
							UnaryOperator:!
							AssignmentExpression:stmt->extension = (MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))
								PtrMemberAccess:stmt->extension
									Identifier:stmt
									Identifier:extension
								CastExpression:(MYSQL_STMT_EXT *)my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))
									CastTarget:MYSQL_STMT_EXT *
									CallExpression:my_malloc(            PSI_NOT_INSTRUMENTED, sizeof(MYSQL_STMT_EXT),            MYF(MY_WME | MY_ZEROFILL))
										Callee:my_malloc
											Identifier:my_malloc
										ArgumentList:PSI_NOT_INSTRUMENTED
											Argument:PSI_NOT_INSTRUMENTED
												Identifier:PSI_NOT_INSTRUMENTED
											Argument:sizeof(MYSQL_STMT_EXT)
												SizeofExpression:sizeof(MYSQL_STMT_EXT)
													Sizeof:sizeof
													Identifier:MYSQL_STMT_EXT
											Argument:MYF(MY_WME | MY_ZEROFILL)
												CallExpression:MYF(MY_WME | MY_ZEROFILL)
													Callee:MYF
														Identifier:MYF
													ArgumentList:MY_WME | MY_ZEROFILL
														Argument:MY_WME | MY_ZEROFILL
															InclusiveOrExpression:MY_WME | MY_ZEROFILL
																Identifier:MY_WME
																Identifier:MY_ZEROFILL
						OrExpression:!(stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))) ||      !(stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL)))
							UnaryOperationExpression:!(stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL)))
								UnaryOperator:!
								AssignmentExpression:stmt->mem_root =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))
									PtrMemberAccess:stmt->mem_root
										Identifier:stmt
										Identifier:mem_root
									CastExpression:(MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))
										CastTarget:MEM_ROOT *
										CallExpression:my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))
											Callee:my_malloc
												Identifier:my_malloc
											ArgumentList:PSI_NOT_INSTRUMENTED
												Argument:PSI_NOT_INSTRUMENTED
													Identifier:PSI_NOT_INSTRUMENTED
												Argument:sizeof(MEM_ROOT)
													SizeofExpression:sizeof(MEM_ROOT)
														Sizeof:sizeof
														Identifier:MEM_ROOT
												Argument:MYF(MY_WME | MY_ZEROFILL)
													CallExpression:MYF(MY_WME | MY_ZEROFILL)
														Callee:MYF
															Identifier:MYF
														ArgumentList:MY_WME | MY_ZEROFILL
															Argument:MY_WME | MY_ZEROFILL
																InclusiveOrExpression:MY_WME | MY_ZEROFILL
																	Identifier:MY_WME
																	Identifier:MY_ZEROFILL
							UnaryOperationExpression:!(stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL)))
								UnaryOperator:!
								AssignmentExpression:stmt->result.alloc =            (MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))
									MemberAccess:stmt->result.alloc
										PtrMemberAccess:stmt->result
											Identifier:stmt
											Identifier:result
										Identifier:alloc
									CastExpression:(MEM_ROOT *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))
										CastTarget:MEM_ROOT *
										CallExpression:my_malloc(PSI_NOT_INSTRUMENTED, sizeof(MEM_ROOT),                                  MYF(MY_WME | MY_ZEROFILL))
											Callee:my_malloc
												Identifier:my_malloc
											ArgumentList:PSI_NOT_INSTRUMENTED
												Argument:PSI_NOT_INSTRUMENTED
													Identifier:PSI_NOT_INSTRUMENTED
												Argument:sizeof(MEM_ROOT)
													SizeofExpression:sizeof(MEM_ROOT)
														Sizeof:sizeof
														Identifier:MEM_ROOT
												Argument:MYF(MY_WME | MY_ZEROFILL)
													CallExpression:MYF(MY_WME | MY_ZEROFILL)
														Callee:MYF
															Identifier:MYF
														ArgumentList:MY_WME | MY_ZEROFILL
															Argument:MY_WME | MY_ZEROFILL
																InclusiveOrExpression:MY_WME | MY_ZEROFILL
																	Identifier:MY_WME
																	Identifier:MY_ZEROFILL
			CompoundStatement:
				ExpressionStatement:set_mysql_error(mysql, CR_OUT_OF_MEMORY, unknown_sqlstate)
					CallExpression:set_mysql_error(mysql, CR_OUT_OF_MEMORY, unknown_sqlstate)
						Callee:set_mysql_error
							Identifier:set_mysql_error
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:CR_OUT_OF_MEMORY
								Identifier:CR_OUT_OF_MEMORY
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				ExpressionStatement:my_free(stmt)
					CallExpression:my_free(stmt)
						Callee:my_free
							Identifier:my_free
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
				ExpressionStatement:DBUG_RETURN(NULL)
					CallExpression:DBUG_RETURN(NULL)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:NULL
							Argument:NULL
								Identifier:NULL
		ExpressionStatement:init_alloc_root(PSI_NOT_INSTRUMENTED, stmt->mem_root, 2048, 2048)
			CallExpression:init_alloc_root(PSI_NOT_INSTRUMENTED, stmt->mem_root, 2048, 2048)
				Callee:init_alloc_root
					Identifier:init_alloc_root
				ArgumentList:PSI_NOT_INSTRUMENTED
					Argument:PSI_NOT_INSTRUMENTED
						Identifier:PSI_NOT_INSTRUMENTED
					Argument:stmt->mem_root
						PtrMemberAccess:stmt->mem_root
							Identifier:stmt
							Identifier:mem_root
					Argument:2048
						Constant:2048
					Argument:2048
						Constant:2048
		ExpressionStatement:init_alloc_root(PSI_NOT_INSTRUMENTED, stmt->result.alloc, 4096, 4096)
			CallExpression:init_alloc_root(PSI_NOT_INSTRUMENTED, stmt->result.alloc, 4096, 4096)
				Callee:init_alloc_root
					Identifier:init_alloc_root
				ArgumentList:PSI_NOT_INSTRUMENTED
					Argument:PSI_NOT_INSTRUMENTED
						Identifier:PSI_NOT_INSTRUMENTED
					Argument:stmt->result.alloc
						MemberAccess:stmt->result.alloc
							PtrMemberAccess:stmt->result
								Identifier:stmt
								Identifier:result
							Identifier:alloc
					Argument:4096
						Constant:4096
					Argument:4096
						Constant:4096
		ExpressionStatement:mysql->stmts = list_add(mysql->stmts, &stmt->list)
			AssignmentExpression:mysql->stmts = list_add(mysql->stmts, &stmt->list)
				PtrMemberAccess:mysql->stmts
					Identifier:mysql
					Identifier:stmts
				CallExpression:list_add(mysql->stmts, &stmt->list)
					Callee:list_add
						Identifier:list_add
					ArgumentList:mysql->stmts
						Argument:mysql->stmts
							PtrMemberAccess:mysql->stmts
								Identifier:mysql
								Identifier:stmts
						Argument:&stmt->list
							UnaryOperationExpression:&stmt->list
								UnaryOperator:&
								PtrMemberAccess:stmt->list
									Identifier:stmt
									Identifier:list
		ExpressionStatement:stmt->list.data = stmt
			AssignmentExpression:stmt->list.data = stmt
				MemberAccess:stmt->list.data
					PtrMemberAccess:stmt->list
						Identifier:stmt
						Identifier:list
					Identifier:data
				Identifier:stmt
		ExpressionStatement:stmt->state = MYSQL_STMT_INIT_DONE
			AssignmentExpression:stmt->state = MYSQL_STMT_INIT_DONE
				PtrMemberAccess:stmt->state
					Identifier:stmt
					Identifier:state
				Identifier:MYSQL_STMT_INIT_DONE
		ExpressionStatement:stmt->mysql = mysql
			AssignmentExpression:stmt->mysql = mysql
				PtrMemberAccess:stmt->mysql
					Identifier:stmt
					Identifier:mysql
				Identifier:mysql
		ExpressionStatement:stmt->read_row_func = stmt_read_row_no_result_set
			AssignmentExpression:stmt->read_row_func = stmt_read_row_no_result_set
				PtrMemberAccess:stmt->read_row_func
					Identifier:stmt
					Identifier:read_row_func
				Identifier:stmt_read_row_no_result_set
		ExpressionStatement:stmt->prefetch_rows = DEFAULT_PREFETCH_ROWS
			AssignmentExpression:stmt->prefetch_rows = DEFAULT_PREFETCH_ROWS
				PtrMemberAccess:stmt->prefetch_rows
					Identifier:stmt
					Identifier:prefetch_rows
				Identifier:DEFAULT_PREFETCH_ROWS
		ExpressionStatement:my_stpcpy(stmt->sqlstate, not_error_sqlstate)
			CallExpression:my_stpcpy(stmt->sqlstate, not_error_sqlstate)
				Callee:my_stpcpy
					Identifier:my_stpcpy
				ArgumentList:stmt->sqlstate
					Argument:stmt->sqlstate
						PtrMemberAccess:stmt->sqlstate
							Identifier:stmt
							Identifier:sqlstate
					Argument:not_error_sqlstate
						Identifier:not_error_sqlstate
		Statement:/* The rest of statement members was zeroed inside malloc */
		ExpressionStatement:init_alloc_root(PSI_NOT_INSTRUMENTED, &stmt->extension->fields_mem_root, 2048,                  0)
			CallExpression:init_alloc_root(PSI_NOT_INSTRUMENTED, &stmt->extension->fields_mem_root, 2048,                  0)
				Callee:init_alloc_root
					Identifier:init_alloc_root
				ArgumentList:PSI_NOT_INSTRUMENTED
					Argument:PSI_NOT_INSTRUMENTED
						Identifier:PSI_NOT_INSTRUMENTED
					Argument:&stmt->extension->fields_mem_root
						UnaryOperationExpression:&stmt->extension->fields_mem_root
							UnaryOperator:&
							PtrMemberAccess:stmt->extension->fields_mem_root
								PtrMemberAccess:stmt->extension
									Identifier:stmt
									Identifier:extension
								Identifier:fields_mem_root
					Argument:2048
						Constant:2048
					Argument:0
						Constant:0
		ExpressionStatement:DBUG_RETURN(stmt)
			CallExpression:DBUG_RETURN(stmt)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt
					Argument:stmt
						Identifier:stmt
	ReturnType:STDCALL
	Identifier:mysql_stmt_init
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_stmt_prepare (MYSQL_STMT *stmt , const char *query , ulong length)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		ExpressionStatement:DBUG_ENTER("mysql_stmt_prepare")
			CallExpression:DBUG_ENTER("mysql_stmt_prepare")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_prepare"
					Argument:"mysql_stmt_prepare"
						Constant:"mysql_stmt_prepare"
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			CompoundStatement:
				Statement:/* mysql can be reset in mysql_close called from mysql_reconnect */
				ExpressionStatement:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_SERVER_LOST
								Identifier:CR_SERVER_LOST
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		Statement:/*    Reset the last error in any case: that would clear the statement    if the previous prepare failed.  */
		ExpressionStatement:stmt->last_errno = 0
			AssignmentExpression:stmt->last_errno = 0
				PtrMemberAccess:stmt->last_errno
					Identifier:stmt
					Identifier:last_errno
				Constant:0
		ExpressionStatement:stmt->last_error[0] = '\0'
			AssignmentExpression:stmt->last_error[0] = '\0'
				ArrayIndexing:stmt->last_error[0]
					PtrMemberAccess:stmt->last_error
						Identifier:stmt
						Identifier:last_error
					Constant:0
				Constant:'\0'
		IfStatement:if ((int)stmt->state > (int)MYSQL_STMT_INIT_DONE)
			Condition:(int)stmt->state > (int)MYSQL_STMT_INIT_DONE
				RelationalExpression:(int)stmt->state > (int)MYSQL_STMT_INIT_DONE
					CastExpression:(int)stmt->state
						CastTarget:int
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
					CastExpression:(int)MYSQL_STMT_INIT_DONE
						CastTarget:int
						Identifier:MYSQL_STMT_INIT_DONE
			CompoundStatement:
				Statement:/* This is second prepare with another statement */
				IdentifierDeclStatement:uchar buff[MYSQL_STMT_HEADER];
					IdentifierDecl:buff[MYSQL_STMT_HEADER]
						IdentifierDeclType:uchar [ MYSQL_STMT_HEADER ]
						Identifier:buff
						Identifier:MYSQL_STMT_HEADER
				Statement:/* 4 bytes - stmt id */
				IfStatement:if (reset_stmt_handle(stmt, RESET_LONG_DATA | RESET_STORE_RESULT))
					Condition:reset_stmt_handle(stmt, RESET_LONG_DATA | RESET_STORE_RESULT)
						CallExpression:reset_stmt_handle(stmt, RESET_LONG_DATA | RESET_STORE_RESULT)
							Callee:reset_stmt_handle
								Identifier:reset_stmt_handle
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:RESET_LONG_DATA | RESET_STORE_RESULT
									InclusiveOrExpression:RESET_LONG_DATA | RESET_STORE_RESULT
										Identifier:RESET_LONG_DATA
										Identifier:RESET_STORE_RESULT
					ExpressionStatement:DBUG_RETURN(1)
						CallExpression:DBUG_RETURN(1)
							Callee:DBUG_RETURN
								Identifier:DBUG_RETURN
							ArgumentList:1
								Argument:1
									Constant:1
				Statement:/*      These members must be reset for API to      function in case of error or misuse.    */
				ExpressionStatement:stmt->bind_param_done = false
					AssignmentExpression:stmt->bind_param_done = false
						PtrMemberAccess:stmt->bind_param_done
							Identifier:stmt
							Identifier:bind_param_done
						Identifier:false
				ExpressionStatement:stmt->bind_result_done = false
					AssignmentExpression:stmt->bind_result_done = false
						PtrMemberAccess:stmt->bind_result_done
							Identifier:stmt
							Identifier:bind_result_done
						Identifier:false
				ExpressionStatement:stmt->param_count = stmt->field_count = 0
					AssignmentExpression:stmt->param_count = stmt->field_count = 0
						PtrMemberAccess:stmt->param_count
							Identifier:stmt
							Identifier:param_count
						AssignmentExpression:stmt->field_count = 0
							PtrMemberAccess:stmt->field_count
								Identifier:stmt
								Identifier:field_count
							Constant:0
				ExpressionStatement:free_root(stmt->mem_root, MYF(MY_KEEP_PREALLOC))
					CallExpression:free_root(stmt->mem_root, MYF(MY_KEEP_PREALLOC))
						Callee:free_root
							Identifier:free_root
						ArgumentList:stmt->mem_root
							Argument:stmt->mem_root
								PtrMemberAccess:stmt->mem_root
									Identifier:stmt
									Identifier:mem_root
							Argument:MYF(MY_KEEP_PREALLOC)
								CallExpression:MYF(MY_KEEP_PREALLOC)
									Callee:MYF
										Identifier:MYF
									ArgumentList:MY_KEEP_PREALLOC
										Argument:MY_KEEP_PREALLOC
											Identifier:MY_KEEP_PREALLOC
				ExpressionStatement:free_root(&stmt->extension->fields_mem_root, MYF(0))
					CallExpression:free_root(&stmt->extension->fields_mem_root, MYF(0))
						Callee:free_root
							Identifier:free_root
						ArgumentList:&stmt->extension->fields_mem_root
							Argument:&stmt->extension->fields_mem_root
								UnaryOperationExpression:&stmt->extension->fields_mem_root
									UnaryOperator:&
									PtrMemberAccess:stmt->extension->fields_mem_root
										PtrMemberAccess:stmt->extension
											Identifier:stmt
											Identifier:extension
										Identifier:fields_mem_root
							Argument:MYF(0)
								CallExpression:MYF(0)
									Callee:MYF
										Identifier:MYF
									ArgumentList:0
										Argument:0
											Constant:0
				ExpressionStatement:int4store(buff, stmt->stmt_id)
					CallExpression:int4store(buff, stmt->stmt_id)
						Callee:int4store
							Identifier:int4store
						ArgumentList:buff
							Argument:buff
								Identifier:buff
							Argument:stmt->stmt_id
								PtrMemberAccess:stmt->stmt_id
									Identifier:stmt
									Identifier:stmt_id
				Statement:/*      Close statement in server      If there was a 'use' result from another statement, or from      mysql_use_result it won't be freed in mysql_stmt_free_result and      we should get 'Commands out of sync' here.    */
				ExpressionStatement:stmt->state = MYSQL_STMT_INIT_DONE
					AssignmentExpression:stmt->state = MYSQL_STMT_INIT_DONE
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
						Identifier:MYSQL_STMT_INIT_DONE
				IfStatement:if (stmt_command(mysql, COM_STMT_CLOSE, buff, 4, stmt))
					Condition:stmt_command(mysql, COM_STMT_CLOSE, buff, 4, stmt)
						CallExpression:stmt_command(mysql, COM_STMT_CLOSE, buff, 4, stmt)
							Callee:stmt_command
								Identifier:stmt_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_STMT_CLOSE
									Identifier:COM_STMT_CLOSE
								Argument:buff
									Identifier:buff
								Argument:4
									Constant:4
								Argument:stmt
									Identifier:stmt
					CompoundStatement:
						ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
							CallExpression:set_stmt_errmsg(stmt, &mysql->net)
								Callee:set_stmt_errmsg
									Identifier:set_stmt_errmsg
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:&mysql->net
										UnaryOperationExpression:&mysql->net
											UnaryOperator:&
											PtrMemberAccess:mysql->net
												Identifier:mysql
												Identifier:net
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
		IfStatement:if (stmt_command(mysql, COM_STMT_PREPARE, (const uchar *)query, length,                   stmt))
			Condition:stmt_command(mysql, COM_STMT_PREPARE, (const uchar *)query, length,                   stmt)
				CallExpression:stmt_command(mysql, COM_STMT_PREPARE, (const uchar *)query, length,                   stmt)
					Callee:stmt_command
						Identifier:stmt_command
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:COM_STMT_PREPARE
							Identifier:COM_STMT_PREPARE
						Argument:(const uchar *)query
							CastExpression:(const uchar *)query
								CastTarget:const uchar *
								Identifier:query
						Argument:length
							Identifier:length
						Argument:stmt
							Identifier:stmt
			CompoundStatement:
				ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
					CallExpression:set_stmt_errmsg(stmt, &mysql->net)
						Callee:set_stmt_errmsg
							Identifier:set_stmt_errmsg
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:&mysql->net
								UnaryOperationExpression:&mysql->net
									UnaryOperator:&
									PtrMemberAccess:mysql->net
										Identifier:mysql
										Identifier:net
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if ((*mysql->methods->read_prepare_result)(mysql, stmt))
			Condition:(*mysql->methods->read_prepare_result)(mysql, stmt)
				CallExpression:(*mysql->methods->read_prepare_result)(mysql, stmt)
					Callee:*mysql->methods->read_prepare_result
						UnaryOperationExpression:*mysql->methods->read_prepare_result
							UnaryOperator:*
							PtrMemberAccess:mysql->methods->read_prepare_result
								PtrMemberAccess:mysql->methods
									Identifier:mysql
									Identifier:methods
								Identifier:read_prepare_result
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:stmt
							Identifier:stmt
			CompoundStatement:
				ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
					CallExpression:set_stmt_errmsg(stmt, &mysql->net)
						Callee:set_stmt_errmsg
							Identifier:set_stmt_errmsg
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:&mysql->net
								UnaryOperationExpression:&mysql->net
									UnaryOperator:&
									PtrMemberAccess:mysql->net
										Identifier:mysql
										Identifier:net
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		Statement:/*    alloc_root will return valid address even in case when param_count    and field_count are zero. Thus we should never rely on stmt->bind    or stmt->params when checking for existence of placeholders or    result set.  */
		IfStatement:if (!(stmt->params = (MYSQL_BIND *)alloc_root(            stmt->mem_root,            sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count))))
			Condition:!(stmt->params = (MYSQL_BIND *)alloc_root(            stmt->mem_root,            sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count)))
				UnaryOperationExpression:!(stmt->params = (MYSQL_BIND *)alloc_root(            stmt->mem_root,            sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count)))
					UnaryOperator:!
					AssignmentExpression:stmt->params = (MYSQL_BIND *)alloc_root(            stmt->mem_root,            sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count))
						PtrMemberAccess:stmt->params
							Identifier:stmt
							Identifier:params
						CastExpression:(MYSQL_BIND *)alloc_root(            stmt->mem_root,            sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count))
							CastTarget:MYSQL_BIND *
							CallExpression:alloc_root(            stmt->mem_root,            sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count))
								Callee:alloc_root
									Identifier:alloc_root
								ArgumentList:stmt->mem_root
									Argument:stmt->mem_root
										PtrMemberAccess:stmt->mem_root
											Identifier:stmt
											Identifier:mem_root
									Argument:sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count)
										MultiplicativeExpression:sizeof(MYSQL_BIND) * (stmt->param_count + stmt->field_count)
											SizeofExpression:sizeof(MYSQL_BIND)
												Sizeof:sizeof
												Identifier:MYSQL_BIND
											AdditiveExpression:stmt->param_count + stmt->field_count
												PtrMemberAccess:stmt->param_count
													Identifier:stmt
													Identifier:param_count
												PtrMemberAccess:stmt->field_count
													Identifier:stmt
													Identifier:field_count
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_OUT_OF_MEMORY
								Identifier:CR_OUT_OF_MEMORY
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		ExpressionStatement:stmt->bind = stmt->params + stmt->param_count
			AssignmentExpression:stmt->bind = stmt->params + stmt->param_count
				PtrMemberAccess:stmt->bind
					Identifier:stmt
					Identifier:bind
				AdditiveExpression:stmt->params + stmt->param_count
					PtrMemberAccess:stmt->params
						Identifier:stmt
						Identifier:params
					PtrMemberAccess:stmt->param_count
						Identifier:stmt
						Identifier:param_count
		ExpressionStatement:stmt->state = MYSQL_STMT_PREPARE_DONE
			AssignmentExpression:stmt->state = MYSQL_STMT_PREPARE_DONE
				PtrMemberAccess:stmt->state
					Identifier:stmt
					Identifier:state
				Identifier:MYSQL_STMT_PREPARE_DONE
		ExpressionStatement:DBUG_PRINT("info", ("Parameter count: %u", stmt->param_count))
			CallExpression:DBUG_PRINT("info", ("Parameter count: %u", stmt->param_count))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"info"
					Argument:"info"
						Constant:"info"
					Argument:"Parameter count: %u", stmt->param_count
						Expression:"Parameter count: %u", stmt->param_count
							Constant:"Parameter count: %u"
							PtrMemberAccess:stmt->param_count
								Identifier:stmt
								Identifier:param_count
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_stmt_prepare
	ParameterList:MYSQL_STMT *stmt , const char *query , ulong length
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:const char *query
			ParameterType:const char *
			Identifier:query
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:alloc_stmt_fields (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_FIELD *fields, *field, *end;
			IdentifierDecl:*fields
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:fields
			IdentifierDecl:*field
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:field
			IdentifierDecl:*end
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:end
		IdentifierDeclStatement:MEM_ROOT *fields_mem_root = &stmt->extension->fields_mem_root;
			IdentifierDecl:*fields_mem_root = &stmt->extension->fields_mem_root
				IdentifierDeclType:MEM_ROOT *
				Identifier:fields_mem_root
				AssignmentExpression:*fields_mem_root = &stmt->extension->fields_mem_root
					Identifier:fields_mem_root
					UnaryOperationExpression:&stmt->extension->fields_mem_root
						UnaryOperator:&
						PtrMemberAccess:stmt->extension->fields_mem_root
							PtrMemberAccess:stmt->extension
								Identifier:stmt
								Identifier:extension
							Identifier:fields_mem_root
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		ExpressionStatement:DBUG_ASSERT(stmt->field_count)
			CallExpression:DBUG_ASSERT(stmt->field_count)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:stmt->field_count
					Argument:stmt->field_count
						PtrMemberAccess:stmt->field_count
							Identifier:stmt
							Identifier:field_count
		ExpressionStatement:free_root(fields_mem_root, MYF(0))
			CallExpression:free_root(fields_mem_root, MYF(0))
				Callee:free_root
					Identifier:free_root
				ArgumentList:fields_mem_root
					Argument:fields_mem_root
						Identifier:fields_mem_root
					Argument:MYF(0)
						CallExpression:MYF(0)
							Callee:MYF
								Identifier:MYF
							ArgumentList:0
								Argument:0
									Constant:0
		Statement:/*    mysql->fields is NULL when the client set CLIENT_OPTIONAL_RESULTSET_METADATA    flag and server @@session.resultset_metadata is "NONE". That means that the    client received a resultset without metadata.  */
		IfStatement:if (!mysql->fields)
			Condition:!mysql->fields
				UnaryOperationExpression:!mysql->fields
					UnaryOperator:!
					PtrMemberAccess:mysql->fields
						Identifier:mysql
						Identifier:fields
			ReturnStatement:return;
		Statement:/*    Get the field information for non-select statements    like SHOW and DESCRIBE commands  */
		IfStatement:if (!(stmt->fields = (MYSQL_FIELD *)alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count)) ||      !(stmt->bind = (MYSQL_BIND *)alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count)))
			Condition:!(stmt->fields = (MYSQL_FIELD *)alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count)) ||      !(stmt->bind = (MYSQL_BIND *)alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count))
				OrExpression:!(stmt->fields = (MYSQL_FIELD *)alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count)) ||      !(stmt->bind = (MYSQL_BIND *)alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count))
					UnaryOperationExpression:!(stmt->fields = (MYSQL_FIELD *)alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count))
						UnaryOperator:!
						AssignmentExpression:stmt->fields = (MYSQL_FIELD *)alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count)
							PtrMemberAccess:stmt->fields
								Identifier:stmt
								Identifier:fields
							CastExpression:(MYSQL_FIELD *)alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count)
								CastTarget:MYSQL_FIELD *
								CallExpression:alloc_root(            fields_mem_root, sizeof(MYSQL_FIELD) * stmt->field_count)
									Callee:alloc_root
										Identifier:alloc_root
									ArgumentList:fields_mem_root
										Argument:fields_mem_root
											Identifier:fields_mem_root
										Argument:sizeof(MYSQL_FIELD) * stmt->field_count
											MultiplicativeExpression:sizeof(MYSQL_FIELD) * stmt->field_count
												SizeofExpression:sizeof(MYSQL_FIELD)
													Sizeof:sizeof
													Identifier:MYSQL_FIELD
												PtrMemberAccess:stmt->field_count
													Identifier:stmt
													Identifier:field_count
					UnaryOperationExpression:!(stmt->bind = (MYSQL_BIND *)alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count))
						UnaryOperator:!
						AssignmentExpression:stmt->bind = (MYSQL_BIND *)alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count)
							PtrMemberAccess:stmt->bind
								Identifier:stmt
								Identifier:bind
							CastExpression:(MYSQL_BIND *)alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count)
								CastTarget:MYSQL_BIND *
								CallExpression:alloc_root(            fields_mem_root, sizeof(MYSQL_BIND) * stmt->field_count)
									Callee:alloc_root
										Identifier:alloc_root
									ArgumentList:fields_mem_root
										Argument:fields_mem_root
											Identifier:fields_mem_root
										Argument:sizeof(MYSQL_BIND) * stmt->field_count
											MultiplicativeExpression:sizeof(MYSQL_BIND) * stmt->field_count
												SizeofExpression:sizeof(MYSQL_BIND)
													Sizeof:sizeof
													Identifier:MYSQL_BIND
												PtrMemberAccess:stmt->field_count
													Identifier:stmt
													Identifier:field_count
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_OUT_OF_MEMORY
								Identifier:CR_OUT_OF_MEMORY
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ReturnStatement:return;
		ForStatement:for (fields = mysql->fields, end = fields + stmt->field_count,      field = stmt->fields;       field && fields < end; fields++, field++)
			ForInit:fields = mysql->fields, end = fields + stmt->field_count,      field = stmt->fields;
				Expression:fields = mysql->fields, end = fields + stmt->field_count,      field = stmt->fields
					AssignmentExpression:fields = mysql->fields
						Identifier:fields
						PtrMemberAccess:mysql->fields
							Identifier:mysql
							Identifier:fields
					Expression:end = fields + stmt->field_count,      field = stmt->fields
						AssignmentExpression:end = fields + stmt->field_count
							Identifier:end
							AdditiveExpression:fields + stmt->field_count
								Identifier:fields
								PtrMemberAccess:stmt->field_count
									Identifier:stmt
									Identifier:field_count
						AssignmentExpression:field = stmt->fields
							Identifier:field
							PtrMemberAccess:stmt->fields
								Identifier:stmt
								Identifier:fields
			Condition:field && fields < end
				AndExpression:field && fields < end
					Identifier:field
					RelationalExpression:fields < end
						Identifier:fields
						Identifier:end
			Expression:fields++, field++
				PostIncDecOperationExpression:fields++
					Identifier:fields
					IncDec:++
				PostIncDecOperationExpression:field++
					Identifier:field
					IncDec:++
			CompoundStatement:
				ExpressionStatement:*field = *fields
					AssignmentExpression:*field = *fields
						UnaryOperationExpression:*field
							UnaryOperator:*
							Identifier:field
						UnaryOperationExpression:*fields
							UnaryOperator:*
							Identifier:fields
				Statement:/* To copy all numeric parts. */
				ExpressionStatement:field->catalog =        strmake_root(fields_mem_root, fields->catalog, fields->catalog_length)
					AssignmentExpression:field->catalog =        strmake_root(fields_mem_root, fields->catalog, fields->catalog_length)
						PtrMemberAccess:field->catalog
							Identifier:field
							Identifier:catalog
						CallExpression:strmake_root(fields_mem_root, fields->catalog, fields->catalog_length)
							Callee:strmake_root
								Identifier:strmake_root
							ArgumentList:fields_mem_root
								Argument:fields_mem_root
									Identifier:fields_mem_root
								Argument:fields->catalog
									PtrMemberAccess:fields->catalog
										Identifier:fields
										Identifier:catalog
								Argument:fields->catalog_length
									PtrMemberAccess:fields->catalog_length
										Identifier:fields
										Identifier:catalog_length
				ExpressionStatement:field->db = strmake_root(fields_mem_root, fields->db, fields->db_length)
					AssignmentExpression:field->db = strmake_root(fields_mem_root, fields->db, fields->db_length)
						PtrMemberAccess:field->db
							Identifier:field
							Identifier:db
						CallExpression:strmake_root(fields_mem_root, fields->db, fields->db_length)
							Callee:strmake_root
								Identifier:strmake_root
							ArgumentList:fields_mem_root
								Argument:fields_mem_root
									Identifier:fields_mem_root
								Argument:fields->db
									PtrMemberAccess:fields->db
										Identifier:fields
										Identifier:db
								Argument:fields->db_length
									PtrMemberAccess:fields->db_length
										Identifier:fields
										Identifier:db_length
				ExpressionStatement:field->table =        strmake_root(fields_mem_root, fields->table, fields->table_length)
					AssignmentExpression:field->table =        strmake_root(fields_mem_root, fields->table, fields->table_length)
						PtrMemberAccess:field->table
							Identifier:field
							Identifier:table
						CallExpression:strmake_root(fields_mem_root, fields->table, fields->table_length)
							Callee:strmake_root
								Identifier:strmake_root
							ArgumentList:fields_mem_root
								Argument:fields_mem_root
									Identifier:fields_mem_root
								Argument:fields->table
									PtrMemberAccess:fields->table
										Identifier:fields
										Identifier:table
								Argument:fields->table_length
									PtrMemberAccess:fields->table_length
										Identifier:fields
										Identifier:table_length
				ExpressionStatement:field->org_table = strmake_root(fields_mem_root, fields->org_table,                                    fields->org_table_length)
					AssignmentExpression:field->org_table = strmake_root(fields_mem_root, fields->org_table,                                    fields->org_table_length)
						PtrMemberAccess:field->org_table
							Identifier:field
							Identifier:org_table
						CallExpression:strmake_root(fields_mem_root, fields->org_table,                                    fields->org_table_length)
							Callee:strmake_root
								Identifier:strmake_root
							ArgumentList:fields_mem_root
								Argument:fields_mem_root
									Identifier:fields_mem_root
								Argument:fields->org_table
									PtrMemberAccess:fields->org_table
										Identifier:fields
										Identifier:org_table
								Argument:fields->org_table_length
									PtrMemberAccess:fields->org_table_length
										Identifier:fields
										Identifier:org_table_length
				ExpressionStatement:field->name =        strmake_root(fields_mem_root, fields->name, fields->name_length)
					AssignmentExpression:field->name =        strmake_root(fields_mem_root, fields->name, fields->name_length)
						PtrMemberAccess:field->name
							Identifier:field
							Identifier:name
						CallExpression:strmake_root(fields_mem_root, fields->name, fields->name_length)
							Callee:strmake_root
								Identifier:strmake_root
							ArgumentList:fields_mem_root
								Argument:fields_mem_root
									Identifier:fields_mem_root
								Argument:fields->name
									PtrMemberAccess:fields->name
										Identifier:fields
										Identifier:name
								Argument:fields->name_length
									PtrMemberAccess:fields->name_length
										Identifier:fields
										Identifier:name_length
				ExpressionStatement:field->org_name = strmake_root(fields_mem_root, fields->org_name,                                   fields->org_name_length)
					AssignmentExpression:field->org_name = strmake_root(fields_mem_root, fields->org_name,                                   fields->org_name_length)
						PtrMemberAccess:field->org_name
							Identifier:field
							Identifier:org_name
						CallExpression:strmake_root(fields_mem_root, fields->org_name,                                   fields->org_name_length)
							Callee:strmake_root
								Identifier:strmake_root
							ArgumentList:fields_mem_root
								Argument:fields_mem_root
									Identifier:fields_mem_root
								Argument:fields->org_name
									PtrMemberAccess:fields->org_name
										Identifier:fields
										Identifier:org_name
								Argument:fields->org_name_length
									PtrMemberAccess:fields->org_name_length
										Identifier:fields
										Identifier:org_name_length
				IfStatement:if (fields->def)
					Condition:fields->def
						PtrMemberAccess:fields->def
							Identifier:fields
							Identifier:def
					CompoundStatement:
						ExpressionStatement:field->def =          strmake_root(fields_mem_root, fields->def, fields->def_length)
							AssignmentExpression:field->def =          strmake_root(fields_mem_root, fields->def, fields->def_length)
								PtrMemberAccess:field->def
									Identifier:field
									Identifier:def
								CallExpression:strmake_root(fields_mem_root, fields->def, fields->def_length)
									Callee:strmake_root
										Identifier:strmake_root
									ArgumentList:fields_mem_root
										Argument:fields_mem_root
											Identifier:fields_mem_root
										Argument:fields->def
											PtrMemberAccess:fields->def
												Identifier:fields
												Identifier:def
										Argument:fields->def_length
											PtrMemberAccess:fields->def_length
												Identifier:fields
												Identifier:def_length
						ExpressionStatement:field->def_length = fields->def_length
							AssignmentExpression:field->def_length = fields->def_length
								PtrMemberAccess:field->def_length
									Identifier:field
									Identifier:def_length
								PtrMemberAccess:fields->def_length
									Identifier:fields
									Identifier:def_length
				ExpressionStatement:field->extension = 0
					AssignmentExpression:field->extension = 0
						PtrMemberAccess:field->extension
							Identifier:field
							Identifier:extension
						Constant:0
				Statement:/* Avoid dangling links. */
				ExpressionStatement:field->max_length = 0
					AssignmentExpression:field->max_length = 0
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:0
				Statement:/* max_length is set in mysql_stmt_store_result() */
	ReturnType:static void
	Identifier:alloc_stmt_fields
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:update_stmt_fields (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_FIELD *field = stmt->mysql->fields;
			IdentifierDecl:*field = stmt->mysql->fields
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:field
				AssignmentExpression:*field = stmt->mysql->fields
					Identifier:field
					PtrMemberAccess:stmt->mysql->fields
						PtrMemberAccess:stmt->mysql
							Identifier:stmt
							Identifier:mysql
						Identifier:fields
		IdentifierDeclStatement:MYSQL_FIELD *field_end = field + stmt->field_count;
			IdentifierDecl:*field_end = field + stmt->field_count
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:field_end
				AssignmentExpression:*field_end = field + stmt->field_count
					Identifier:field_end
					AdditiveExpression:field + stmt->field_count
						Identifier:field
						PtrMemberAccess:stmt->field_count
							Identifier:stmt
							Identifier:field_count
		IdentifierDeclStatement:MYSQL_FIELD *stmt_field = stmt->fields;
			IdentifierDecl:*stmt_field = stmt->fields
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:stmt_field
				AssignmentExpression:*stmt_field = stmt->fields
					Identifier:stmt_field
					PtrMemberAccess:stmt->fields
						Identifier:stmt
						Identifier:fields
		IdentifierDeclStatement:MYSQL_BIND *my_bind = stmt->bind_result_done ? stmt->bind : 0;
			IdentifierDecl:*my_bind = stmt->bind_result_done ? stmt->bind : 0
				IdentifierDeclType:MYSQL_BIND *
				Identifier:my_bind
				AssignmentExpression:*my_bind = stmt->bind_result_done ? stmt->bind : 0
					Identifier:my_bind
					ConditionalExpression:stmt->bind_result_done ? stmt->bind : 0
						Condition:stmt->bind_result_done
							PtrMemberAccess:stmt->bind_result_done
								Identifier:stmt
								Identifier:bind_result_done
						PtrMemberAccess:stmt->bind
							Identifier:stmt
							Identifier:bind
						Constant:0
		IfStatement:if (stmt->field_count != stmt->mysql->field_count)
			Condition:stmt->field_count != stmt->mysql->field_count
				EqualityExpression:stmt->field_count != stmt->mysql->field_count
					PtrMemberAccess:stmt->field_count
						Identifier:stmt
						Identifier:field_count
					PtrMemberAccess:stmt->mysql->field_count
						PtrMemberAccess:stmt->mysql
							Identifier:stmt
							Identifier:mysql
						Identifier:field_count
			CompoundStatement:
				Statement:/*      The tables used in the statement were altered,      and the query now returns a different number of columns.      There is no way to continue without reallocating the bind      array:      - if the number of columns increased, mysql_stmt_fetch()      will write beyond allocated memory      - if the number of columns decreased, some user-bound      buffers will be left unassigned without user knowing      that.    */
				ExpressionStatement:set_stmt_error(stmt, CR_NEW_STMT_METADATA, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_NEW_STMT_METADATA, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_NEW_STMT_METADATA
								Identifier:CR_NEW_STMT_METADATA
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ReturnStatement:return;
		Statement:/*    mysql->fields is NULL when the client set CLIENT_OPTIONAL_RESULTSET_METADATA    flag and server @@session.resultset_metadata is "NONE". That means that the    client received a resultset without metadata.  */
		IfStatement:if (!field)
			Condition:!field
				UnaryOperationExpression:!field
					UnaryOperator:!
					Identifier:field
			ReturnStatement:return;
		ForStatement:for (; field < field_end; ++field, ++stmt_field)
			Condition:field < field_end
				RelationalExpression:field < field_end
					Identifier:field
					Identifier:field_end
			Expression:++field, ++stmt_field
				UnaryExpression:++field
					IncDec:++
					Identifier:field
				UnaryExpression:++stmt_field
					IncDec:++
					Identifier:stmt_field
			CompoundStatement:
				ExpressionStatement:stmt_field->charsetnr = field->charsetnr
					AssignmentExpression:stmt_field->charsetnr = field->charsetnr
						PtrMemberAccess:stmt_field->charsetnr
							Identifier:stmt_field
							Identifier:charsetnr
						PtrMemberAccess:field->charsetnr
							Identifier:field
							Identifier:charsetnr
				ExpressionStatement:stmt_field->length = field->length
					AssignmentExpression:stmt_field->length = field->length
						PtrMemberAccess:stmt_field->length
							Identifier:stmt_field
							Identifier:length
						PtrMemberAccess:field->length
							Identifier:field
							Identifier:length
				ExpressionStatement:stmt_field->type = field->type
					AssignmentExpression:stmt_field->type = field->type
						PtrMemberAccess:stmt_field->type
							Identifier:stmt_field
							Identifier:type
						PtrMemberAccess:field->type
							Identifier:field
							Identifier:type
				ExpressionStatement:stmt_field->flags = field->flags
					AssignmentExpression:stmt_field->flags = field->flags
						PtrMemberAccess:stmt_field->flags
							Identifier:stmt_field
							Identifier:flags
						PtrMemberAccess:field->flags
							Identifier:field
							Identifier:flags
				ExpressionStatement:stmt_field->decimals = field->decimals
					AssignmentExpression:stmt_field->decimals = field->decimals
						PtrMemberAccess:stmt_field->decimals
							Identifier:stmt_field
							Identifier:decimals
						PtrMemberAccess:field->decimals
							Identifier:field
							Identifier:decimals
				IfStatement:if (my_bind)
					Condition:my_bind
						Identifier:my_bind
					CompoundStatement:
						Statement:/* Ignore return value: it should be 0 if bind_result succeeded. */
						ExpressionStatement:(void)setup_one_fetch_function(my_bind++, stmt_field)
							CastExpression:(void)setup_one_fetch_function(my_bind++, stmt_field)
								CastTarget:void
								CallExpression:setup_one_fetch_function(my_bind++, stmt_field)
									Callee:setup_one_fetch_function
										Identifier:setup_one_fetch_function
									ArgumentList:my_bind++
										Argument:my_bind++
											PostIncDecOperationExpression:my_bind++
												Identifier:my_bind
												IncDec:++
										Argument:stmt_field
											Identifier:stmt_field
	ReturnType:static void
	Identifier:update_stmt_fields
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_result_metadata (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_RES *result;
			IdentifierDecl:*result
				IdentifierDeclType:MYSQL_RES *
				Identifier:result
		ExpressionStatement:DBUG_ENTER("mysql_stmt_result_metadata")
			CallExpression:DBUG_ENTER("mysql_stmt_result_metadata")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_result_metadata"
					Argument:"mysql_stmt_result_metadata"
						Constant:"mysql_stmt_result_metadata"
		Statement:/*    stmt->fields is only defined if stmt->field_count is not null;    stmt->field_count is initialized in prepare.  */
		IfStatement:if (!stmt->field_count)
			Condition:!stmt->field_count
				UnaryOperationExpression:!stmt->field_count
					UnaryOperator:!
					PtrMemberAccess:stmt->field_count
						Identifier:stmt
						Identifier:field_count
			ExpressionStatement:DBUG_RETURN(0)
				CallExpression:DBUG_RETURN(0)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:0
						Argument:0
							Constant:0
		IfStatement:if (!(result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(*result),                                        MYF(MY_WME | MY_ZEROFILL))))
			Condition:!(result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(*result),                                        MYF(MY_WME | MY_ZEROFILL)))
				UnaryOperationExpression:!(result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(*result),                                        MYF(MY_WME | MY_ZEROFILL)))
					UnaryOperator:!
					AssignmentExpression:result = (MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(*result),                                        MYF(MY_WME | MY_ZEROFILL))
						Identifier:result
						CastExpression:(MYSQL_RES *)my_malloc(PSI_NOT_INSTRUMENTED, sizeof(*result),                                        MYF(MY_WME | MY_ZEROFILL))
							CastTarget:MYSQL_RES *
							CallExpression:my_malloc(PSI_NOT_INSTRUMENTED, sizeof(*result),                                        MYF(MY_WME | MY_ZEROFILL))
								Callee:my_malloc
									Identifier:my_malloc
								ArgumentList:PSI_NOT_INSTRUMENTED
									Argument:PSI_NOT_INSTRUMENTED
										Identifier:PSI_NOT_INSTRUMENTED
									Argument:sizeof(*result)
										SizeofExpression:sizeof(*result)
											Sizeof:sizeof
											UnaryOperationExpression:*result
												UnaryOperator:*
												Identifier:result
									Argument:MYF(MY_WME | MY_ZEROFILL)
										CallExpression:MYF(MY_WME | MY_ZEROFILL)
											Callee:MYF
												Identifier:MYF
											ArgumentList:MY_WME | MY_ZEROFILL
												Argument:MY_WME | MY_ZEROFILL
													InclusiveOrExpression:MY_WME | MY_ZEROFILL
														Identifier:MY_WME
														Identifier:MY_ZEROFILL
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_OUT_OF_MEMORY
								Identifier:CR_OUT_OF_MEMORY
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(0)
					CallExpression:DBUG_RETURN(0)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:0
							Argument:0
								Constant:0
		ExpressionStatement:result->methods = stmt->mysql->methods
			AssignmentExpression:result->methods = stmt->mysql->methods
				PtrMemberAccess:result->methods
					Identifier:result
					Identifier:methods
				PtrMemberAccess:stmt->mysql->methods
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
					Identifier:methods
		ExpressionStatement:result->eof = 1
			AssignmentExpression:result->eof = 1
				PtrMemberAccess:result->eof
					Identifier:result
					Identifier:eof
				Constant:1
		Statement:/* Marker for buffered */
		ExpressionStatement:result->fields = stmt->fields
			AssignmentExpression:result->fields = stmt->fields
				PtrMemberAccess:result->fields
					Identifier:result
					Identifier:fields
				PtrMemberAccess:stmt->fields
					Identifier:stmt
					Identifier:fields
		ExpressionStatement:result->field_count = stmt->field_count
			AssignmentExpression:result->field_count = stmt->field_count
				PtrMemberAccess:result->field_count
					Identifier:result
					Identifier:field_count
				PtrMemberAccess:stmt->field_count
					Identifier:stmt
					Identifier:field_count
		Statement:/* The rest of members of 'result' was zeroed inside malloc */
		ExpressionStatement:DBUG_RETURN(result)
			CallExpression:DBUG_RETURN(result)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:result
					Argument:result
						Identifier:result
	ReturnType:STDCALL
	Identifier:mysql_stmt_result_metadata
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_param_metadata (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_param_metadata")
			CallExpression:DBUG_ENTER("mysql_stmt_param_metadata")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_param_metadata"
					Argument:"mysql_stmt_param_metadata"
						Constant:"mysql_stmt_param_metadata"
		IfStatement:if (!stmt->param_count)
			Condition:!stmt->param_count
				UnaryOperationExpression:!stmt->param_count
					UnaryOperator:!
					PtrMemberAccess:stmt->param_count
						Identifier:stmt
						Identifier:param_count
			ExpressionStatement:DBUG_RETURN(0)
				CallExpression:DBUG_RETURN(0)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:0
						Argument:0
							Constant:0
		Statement:/*    TODO: Fix this when server sends the information.    Till then keep a dummy prototype.  */
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:STDCALL
	Identifier:mysql_stmt_param_metadata
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:store_param_type (unsigned char **pos , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:uint typecode = param->buffer_type | (param->is_unsigned ? 32768 : 0);
			IdentifierDecl:typecode = param->buffer_type | (param->is_unsigned ? 32768 : 0)
				IdentifierDeclType:uint
				Identifier:typecode
				AssignmentExpression:typecode = param->buffer_type | (param->is_unsigned ? 32768 : 0)
					Identifier:typecode
					InclusiveOrExpression:param->buffer_type | (param->is_unsigned ? 32768 : 0)
						PtrMemberAccess:param->buffer_type
							Identifier:param
							Identifier:buffer_type
						ConditionalExpression:param->is_unsigned ? 32768 : 0
							Condition:param->is_unsigned
								PtrMemberAccess:param->is_unsigned
									Identifier:param
									Identifier:is_unsigned
							Constant:32768
							Constant:0
		ExpressionStatement:int2store(*pos, typecode)
			CallExpression:int2store(*pos, typecode)
				Callee:int2store
					Identifier:int2store
				ArgumentList:*pos
					Argument:*pos
						UnaryOperationExpression:*pos
							UnaryOperator:*
							Identifier:pos
					Argument:typecode
						Identifier:typecode
		ExpressionStatement:*pos += 2
			AssignmentExpression:*pos += 2
				UnaryOperationExpression:*pos
					UnaryOperator:*
					Identifier:pos
				Constant:2
	ReturnType:static void
	Identifier:store_param_type
	ParameterList:unsigned char **pos , MYSQL_BIND *param
		Parameter:unsigned char **pos
			ParameterType:unsigned char * *
			Identifier:pos
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_tinyint (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		ExpressionStatement:*(net->write_pos++) = *(uchar *)param->buffer
			AssignmentExpression:*(net->write_pos++) = *(uchar *)param->buffer
				UnaryOperationExpression:*(net->write_pos++)
					UnaryOperator:*
					PostIncDecOperationExpression:net->write_pos++
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
						IncDec:++
				UnaryOperationExpression:*(uchar *)param->buffer
					UnaryOperator:*
					CastExpression:(uchar *)param->buffer
						CastTarget:uchar *
						PtrMemberAccess:param->buffer
							Identifier:param
							Identifier:buffer
	ReturnType:static void
	Identifier:store_param_tinyint
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_short (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:short value = *(short *)param->buffer;
			IdentifierDecl:value = *(short *)param->buffer
				IdentifierDeclType:short
				Identifier:value
				AssignmentExpression:value = *(short *)param->buffer
					Identifier:value
					UnaryOperationExpression:*(short *)param->buffer
						UnaryOperator:*
						CastExpression:(short *)param->buffer
							CastTarget:short *
							PtrMemberAccess:param->buffer
								Identifier:param
								Identifier:buffer
		ExpressionStatement:int2store(net->write_pos, value)
			CallExpression:int2store(net->write_pos, value)
				Callee:int2store
					Identifier:int2store
				ArgumentList:net->write_pos
					Argument:net->write_pos
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
					Argument:value
						Identifier:value
		ExpressionStatement:net->write_pos += 2
			AssignmentExpression:net->write_pos += 2
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Constant:2
	ReturnType:static void
	Identifier:store_param_short
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_int32 (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:int32 value = *(int32 *)param->buffer;
			IdentifierDecl:value = *(int32 *)param->buffer
				IdentifierDeclType:int32
				Identifier:value
				AssignmentExpression:value = *(int32 *)param->buffer
					Identifier:value
					UnaryOperationExpression:*(int32 *)param->buffer
						UnaryOperator:*
						CastExpression:(int32 *)param->buffer
							CastTarget:int32 *
							PtrMemberAccess:param->buffer
								Identifier:param
								Identifier:buffer
		ExpressionStatement:int4store(net->write_pos, value)
			CallExpression:int4store(net->write_pos, value)
				Callee:int4store
					Identifier:int4store
				ArgumentList:net->write_pos
					Argument:net->write_pos
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
					Argument:value
						Identifier:value
		ExpressionStatement:net->write_pos += 4
			AssignmentExpression:net->write_pos += 4
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Constant:4
	ReturnType:static void
	Identifier:store_param_int32
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_int64 (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:longlong value = *(longlong *)param->buffer;
			IdentifierDecl:value = *(longlong *)param->buffer
				IdentifierDeclType:longlong
				Identifier:value
				AssignmentExpression:value = *(longlong *)param->buffer
					Identifier:value
					UnaryOperationExpression:*(longlong *)param->buffer
						UnaryOperator:*
						CastExpression:(longlong *)param->buffer
							CastTarget:longlong *
							PtrMemberAccess:param->buffer
								Identifier:param
								Identifier:buffer
		ExpressionStatement:int8store(net->write_pos, value)
			CallExpression:int8store(net->write_pos, value)
				Callee:int8store
					Identifier:int8store
				ArgumentList:net->write_pos
					Argument:net->write_pos
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
					Argument:value
						Identifier:value
		ExpressionStatement:net->write_pos += 8
			AssignmentExpression:net->write_pos += 8
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Constant:8
	ReturnType:static void
	Identifier:store_param_int64
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_float (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:float value = *(float *)param->buffer;
			IdentifierDecl:value = *(float *)param->buffer
				IdentifierDeclType:float
				Identifier:value
				AssignmentExpression:value = *(float *)param->buffer
					Identifier:value
					UnaryOperationExpression:*(float *)param->buffer
						UnaryOperator:*
						CastExpression:(float *)param->buffer
							CastTarget:float *
							PtrMemberAccess:param->buffer
								Identifier:param
								Identifier:buffer
		ExpressionStatement:float4store(net->write_pos, value)
			CallExpression:float4store(net->write_pos, value)
				Callee:float4store
					Identifier:float4store
				ArgumentList:net->write_pos
					Argument:net->write_pos
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
					Argument:value
						Identifier:value
		ExpressionStatement:net->write_pos += 4
			AssignmentExpression:net->write_pos += 4
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Constant:4
	ReturnType:static void
	Identifier:store_param_float
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_double (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:double value = *(double *)param->buffer;
			IdentifierDecl:value = *(double *)param->buffer
				IdentifierDeclType:double
				Identifier:value
				AssignmentExpression:value = *(double *)param->buffer
					Identifier:value
					UnaryOperationExpression:*(double *)param->buffer
						UnaryOperator:*
						CastExpression:(double *)param->buffer
							CastTarget:double *
							PtrMemberAccess:param->buffer
								Identifier:param
								Identifier:buffer
		ExpressionStatement:float8store(net->write_pos, value)
			CallExpression:float8store(net->write_pos, value)
				Callee:float8store
					Identifier:float8store
				ArgumentList:net->write_pos
					Argument:net->write_pos
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
					Argument:value
						Identifier:value
		ExpressionStatement:net->write_pos += 8
			AssignmentExpression:net->write_pos += 8
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Constant:8
	ReturnType:static void
	Identifier:store_param_double
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_time (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_TIME *tm = (MYSQL_TIME *)param->buffer;
			IdentifierDecl:*tm = (MYSQL_TIME *)param->buffer
				IdentifierDeclType:MYSQL_TIME *
				Identifier:tm
				AssignmentExpression:*tm = (MYSQL_TIME *)param->buffer
					Identifier:tm
					CastExpression:(MYSQL_TIME *)param->buffer
						CastTarget:MYSQL_TIME *
						PtrMemberAccess:param->buffer
							Identifier:param
							Identifier:buffer
		IdentifierDeclStatement:uchar buff[MAX_TIME_REP_LENGTH], *pos;
			IdentifierDecl:buff[MAX_TIME_REP_LENGTH]
				IdentifierDeclType:uchar [ MAX_TIME_REP_LENGTH ]
				Identifier:buff
				Identifier:MAX_TIME_REP_LENGTH
			IdentifierDecl:*pos
				IdentifierDeclType:uchar *
				Identifier:pos
		IdentifierDeclStatement:uint length;
			IdentifierDecl:length
				IdentifierDeclType:uint
				Identifier:length
		ExpressionStatement:pos = buff + 1
			AssignmentExpression:pos = buff + 1
				Identifier:pos
				AdditiveExpression:buff + 1
					Identifier:buff
					Constant:1
		ExpressionStatement:pos[0] = tm->neg ? 1 : 0
			AssignmentExpression:pos[0] = tm->neg ? 1 : 0
				ArrayIndexing:pos[0]
					Identifier:pos
					Constant:0
				ConditionalExpression:tm->neg ? 1 : 0
					Condition:tm->neg
						PtrMemberAccess:tm->neg
							Identifier:tm
							Identifier:neg
					Constant:1
					Constant:0
		ExpressionStatement:int4store(pos + 1, tm->day)
			CallExpression:int4store(pos + 1, tm->day)
				Callee:int4store
					Identifier:int4store
				ArgumentList:pos + 1
					Argument:pos + 1
						AdditiveExpression:pos + 1
							Identifier:pos
							Constant:1
					Argument:tm->day
						PtrMemberAccess:tm->day
							Identifier:tm
							Identifier:day
		ExpressionStatement:pos[5] = (uchar)tm->hour
			AssignmentExpression:pos[5] = (uchar)tm->hour
				ArrayIndexing:pos[5]
					Identifier:pos
					Constant:5
				CastExpression:(uchar)tm->hour
					CastTarget:uchar
					PtrMemberAccess:tm->hour
						Identifier:tm
						Identifier:hour
		ExpressionStatement:pos[6] = (uchar)tm->minute
			AssignmentExpression:pos[6] = (uchar)tm->minute
				ArrayIndexing:pos[6]
					Identifier:pos
					Constant:6
				CastExpression:(uchar)tm->minute
					CastTarget:uchar
					PtrMemberAccess:tm->minute
						Identifier:tm
						Identifier:minute
		ExpressionStatement:pos[7] = (uchar)tm->second
			AssignmentExpression:pos[7] = (uchar)tm->second
				ArrayIndexing:pos[7]
					Identifier:pos
					Constant:7
				CastExpression:(uchar)tm->second
					CastTarget:uchar
					PtrMemberAccess:tm->second
						Identifier:tm
						Identifier:second
		ExpressionStatement:int4store(pos + 8, tm->second_part)
			CallExpression:int4store(pos + 8, tm->second_part)
				Callee:int4store
					Identifier:int4store
				ArgumentList:pos + 8
					Argument:pos + 8
						AdditiveExpression:pos + 8
							Identifier:pos
							Constant:8
					Argument:tm->second_part
						PtrMemberAccess:tm->second_part
							Identifier:tm
							Identifier:second_part
		IfStatement:if (tm->second_part)
			Condition:tm->second_part
				PtrMemberAccess:tm->second_part
					Identifier:tm
					Identifier:second_part
			ExpressionStatement:length = 12
				AssignmentExpression:length = 12
					Identifier:length
					Constant:12
		ExpressionStatement:buff[0] = (char)length++
			AssignmentExpression:buff[0] = (char)length++
				ArrayIndexing:buff[0]
					Identifier:buff
					Constant:0
				CastExpression:(char)length++
					CastTarget:char
					PostIncDecOperationExpression:length++
						Identifier:length
						IncDec:++
		ExpressionStatement:memcpy((char *)net->write_pos, buff, length)
			CallExpression:memcpy((char *)net->write_pos, buff, length)
				Callee:memcpy
					Identifier:memcpy
				ArgumentList:(char *)net->write_pos
					Argument:(char *)net->write_pos
						CastExpression:(char *)net->write_pos
							CastTarget:char *
							PtrMemberAccess:net->write_pos
								Identifier:net
								Identifier:write_pos
					Argument:buff
						Identifier:buff
					Argument:length
						Identifier:length
		ExpressionStatement:net->write_pos += length
			AssignmentExpression:net->write_pos += length
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Identifier:length
	ReturnType:static void
	Identifier:store_param_time
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:net_store_datetime (NET *net , MYSQL_TIME *tm)
	CompoundStatement:
		IdentifierDeclStatement:uchar buff[MAX_DATETIME_REP_LENGTH], *pos;
			IdentifierDecl:buff[MAX_DATETIME_REP_LENGTH]
				IdentifierDeclType:uchar [ MAX_DATETIME_REP_LENGTH ]
				Identifier:buff
				Identifier:MAX_DATETIME_REP_LENGTH
			IdentifierDecl:*pos
				IdentifierDeclType:uchar *
				Identifier:pos
		IdentifierDeclStatement:uint length;
			IdentifierDecl:length
				IdentifierDeclType:uint
				Identifier:length
		ExpressionStatement:pos = buff + 1
			AssignmentExpression:pos = buff + 1
				Identifier:pos
				AdditiveExpression:buff + 1
					Identifier:buff
					Constant:1
		ExpressionStatement:int2store(pos, tm->year)
			CallExpression:int2store(pos, tm->year)
				Callee:int2store
					Identifier:int2store
				ArgumentList:pos
					Argument:pos
						Identifier:pos
					Argument:tm->year
						PtrMemberAccess:tm->year
							Identifier:tm
							Identifier:year
		ExpressionStatement:pos[2] = (uchar)tm->month
			AssignmentExpression:pos[2] = (uchar)tm->month
				ArrayIndexing:pos[2]
					Identifier:pos
					Constant:2
				CastExpression:(uchar)tm->month
					CastTarget:uchar
					PtrMemberAccess:tm->month
						Identifier:tm
						Identifier:month
		ExpressionStatement:pos[3] = (uchar)tm->day
			AssignmentExpression:pos[3] = (uchar)tm->day
				ArrayIndexing:pos[3]
					Identifier:pos
					Constant:3
				CastExpression:(uchar)tm->day
					CastTarget:uchar
					PtrMemberAccess:tm->day
						Identifier:tm
						Identifier:day
		ExpressionStatement:pos[4] = (uchar)tm->hour
			AssignmentExpression:pos[4] = (uchar)tm->hour
				ArrayIndexing:pos[4]
					Identifier:pos
					Constant:4
				CastExpression:(uchar)tm->hour
					CastTarget:uchar
					PtrMemberAccess:tm->hour
						Identifier:tm
						Identifier:hour
		ExpressionStatement:pos[5] = (uchar)tm->minute
			AssignmentExpression:pos[5] = (uchar)tm->minute
				ArrayIndexing:pos[5]
					Identifier:pos
					Constant:5
				CastExpression:(uchar)tm->minute
					CastTarget:uchar
					PtrMemberAccess:tm->minute
						Identifier:tm
						Identifier:minute
		ExpressionStatement:pos[6] = (uchar)tm->second
			AssignmentExpression:pos[6] = (uchar)tm->second
				ArrayIndexing:pos[6]
					Identifier:pos
					Constant:6
				CastExpression:(uchar)tm->second
					CastTarget:uchar
					PtrMemberAccess:tm->second
						Identifier:tm
						Identifier:second
		ExpressionStatement:int4store(pos + 7, tm->second_part)
			CallExpression:int4store(pos + 7, tm->second_part)
				Callee:int4store
					Identifier:int4store
				ArgumentList:pos + 7
					Argument:pos + 7
						AdditiveExpression:pos + 7
							Identifier:pos
							Constant:7
					Argument:tm->second_part
						PtrMemberAccess:tm->second_part
							Identifier:tm
							Identifier:second_part
		IfStatement:if (tm->second_part)
			Condition:tm->second_part
				PtrMemberAccess:tm->second_part
					Identifier:tm
					Identifier:second_part
			ExpressionStatement:length = 11
				AssignmentExpression:length = 11
					Identifier:length
					Constant:11
		ExpressionStatement:buff[0] = (char)length++
			AssignmentExpression:buff[0] = (char)length++
				ArrayIndexing:buff[0]
					Identifier:buff
					Constant:0
				CastExpression:(char)length++
					CastTarget:char
					PostIncDecOperationExpression:length++
						Identifier:length
						IncDec:++
		ExpressionStatement:memcpy((char *)net->write_pos, buff, length)
			CallExpression:memcpy((char *)net->write_pos, buff, length)
				Callee:memcpy
					Identifier:memcpy
				ArgumentList:(char *)net->write_pos
					Argument:(char *)net->write_pos
						CastExpression:(char *)net->write_pos
							CastTarget:char *
							PtrMemberAccess:net->write_pos
								Identifier:net
								Identifier:write_pos
					Argument:buff
						Identifier:buff
					Argument:length
						Identifier:length
		ExpressionStatement:net->write_pos += length
			AssignmentExpression:net->write_pos += length
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				Identifier:length
	ReturnType:static void
	Identifier:net_store_datetime
	ParameterList:NET *net , MYSQL_TIME *tm
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_TIME *tm
			ParameterType:MYSQL_TIME *
			Identifier:tm
FunctionDef:store_param_date (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_TIME tm = *((MYSQL_TIME *)param->buffer);
			IdentifierDecl:tm = *((MYSQL_TIME *)param->buffer)
				IdentifierDeclType:MYSQL_TIME
				Identifier:tm
				AssignmentExpression:tm = *((MYSQL_TIME *)param->buffer)
					Identifier:tm
					UnaryOperationExpression:*((MYSQL_TIME *)param->buffer)
						UnaryOperator:*
						CastExpression:(MYSQL_TIME *)param->buffer
							CastTarget:MYSQL_TIME *
							PtrMemberAccess:param->buffer
								Identifier:param
								Identifier:buffer
		ExpressionStatement:tm.hour = tm.minute = tm.second = tm.second_part = 0
			AssignmentExpression:tm.hour = tm.minute = tm.second = tm.second_part = 0
				MemberAccess:tm.hour
					Identifier:tm
					Identifier:hour
				AssignmentExpression:tm.minute = tm.second = tm.second_part = 0
					MemberAccess:tm.minute
						Identifier:tm
						Identifier:minute
					AssignmentExpression:tm.second = tm.second_part = 0
						MemberAccess:tm.second
							Identifier:tm
							Identifier:second
						AssignmentExpression:tm.second_part = 0
							MemberAccess:tm.second_part
								Identifier:tm
								Identifier:second_part
							Constant:0
		ExpressionStatement:net_store_datetime(net, &tm)
			CallExpression:net_store_datetime(net, &tm)
				Callee:net_store_datetime
					Identifier:net_store_datetime
				ArgumentList:net
					Argument:net
						Identifier:net
					Argument:&tm
						UnaryOperationExpression:&tm
							UnaryOperator:&
							Identifier:tm
	ReturnType:static void
	Identifier:store_param_date
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_datetime (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_TIME *tm = (MYSQL_TIME *)param->buffer;
			IdentifierDecl:*tm = (MYSQL_TIME *)param->buffer
				IdentifierDeclType:MYSQL_TIME *
				Identifier:tm
				AssignmentExpression:*tm = (MYSQL_TIME *)param->buffer
					Identifier:tm
					CastExpression:(MYSQL_TIME *)param->buffer
						CastTarget:MYSQL_TIME *
						PtrMemberAccess:param->buffer
							Identifier:param
							Identifier:buffer
		ExpressionStatement:net_store_datetime(net, tm)
			CallExpression:net_store_datetime(net, tm)
				Callee:net_store_datetime
					Identifier:net_store_datetime
				ArgumentList:net
					Argument:net
						Identifier:net
					Argument:tm
						Identifier:tm
	ReturnType:static void
	Identifier:store_param_datetime
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_str (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		Statement:/* param->length is always set in mysql_stmt_bind_param */
		IdentifierDeclStatement:ulong length = *param->length;
			IdentifierDecl:length = *param->length
				IdentifierDeclType:ulong
				Identifier:length
				AssignmentExpression:length = *param->length
					Identifier:length
					UnaryOperationExpression:*param->length
						UnaryOperator:*
						PtrMemberAccess:param->length
							Identifier:param
							Identifier:length
		IdentifierDeclStatement:uchar *to = net_store_length(net->write_pos, length);
			IdentifierDecl:*to = net_store_length(net->write_pos, length)
				IdentifierDeclType:uchar *
				Identifier:to
				AssignmentExpression:*to = net_store_length(net->write_pos, length)
					Identifier:to
					CallExpression:net_store_length(net->write_pos, length)
						Callee:net_store_length
							Identifier:net_store_length
						ArgumentList:net->write_pos
							Argument:net->write_pos
								PtrMemberAccess:net->write_pos
									Identifier:net
									Identifier:write_pos
							Argument:length
								Identifier:length
		ExpressionStatement:memcpy(to, param->buffer, length)
			CallExpression:memcpy(to, param->buffer, length)
				Callee:memcpy
					Identifier:memcpy
				ArgumentList:to
					Argument:to
						Identifier:to
					Argument:param->buffer
						PtrMemberAccess:param->buffer
							Identifier:param
							Identifier:buffer
					Argument:length
						Identifier:length
		ExpressionStatement:net->write_pos = to + length
			AssignmentExpression:net->write_pos = to + length
				PtrMemberAccess:net->write_pos
					Identifier:net
					Identifier:write_pos
				AdditiveExpression:to + length
					Identifier:to
					Identifier:length
	ReturnType:static void
	Identifier:store_param_str
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param_null (NET *net , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:uint pos = param->param_number;
			IdentifierDecl:pos = param->param_number
				IdentifierDeclType:uint
				Identifier:pos
				AssignmentExpression:pos = param->param_number
					Identifier:pos
					PtrMemberAccess:param->param_number
						Identifier:param
						Identifier:param_number
		ExpressionStatement:net->buff[pos / 8] |= (uchar)(1 << (pos & 7))
			AssignmentExpression:net->buff[pos / 8] |= (uchar)(1 << (pos & 7))
				ArrayIndexing:net->buff[pos / 8]
					PtrMemberAccess:net->buff
						Identifier:net
						Identifier:buff
					MultiplicativeExpression:pos / 8
						Identifier:pos
						Constant:8
				CastExpression:(uchar)(1 << (pos & 7))
					CastTarget:uchar
					ShiftExpression:1 << (pos & 7)
						Constant:1
						BitAndExpression:pos & 7
							Identifier:pos
							Constant:7
	ReturnType:static void
	Identifier:store_param_null
	ParameterList:NET *net , MYSQL_BIND *param
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:store_param (MYSQL_STMT *stmt , MYSQL_BIND *param)
	CompoundStatement:
		IdentifierDeclStatement:NET *net = &stmt->mysql->net;
			IdentifierDecl:*net = &stmt->mysql->net
				IdentifierDeclType:NET *
				Identifier:net
				AssignmentExpression:*net = &stmt->mysql->net
					Identifier:net
					UnaryOperationExpression:&stmt->mysql->net
						UnaryOperator:&
						PtrMemberAccess:stmt->mysql->net
							PtrMemberAccess:stmt->mysql
								Identifier:stmt
								Identifier:mysql
							Identifier:net
		ExpressionStatement:DBUG_ENTER("store_param")
			CallExpression:DBUG_ENTER("store_param")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"store_param"
					Argument:"store_param"
						Constant:"store_param"
		ExpressionStatement:DBUG_PRINT("enter",             ("type: %d  buffer: %p  length: %lu  is_null: %d",              param->buffer_type, (param->buffer ? param->buffer : NullS),              *param->length, *param->is_null))
			CallExpression:DBUG_PRINT("enter",             ("type: %d  buffer: %p  length: %lu  is_null: %d",              param->buffer_type, (param->buffer ? param->buffer : NullS),              *param->length, *param->is_null))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"type: %d  buffer: %p  length: %lu  is_null: %d",              param->buffer_type, (param->buffer ? param->buffer : NullS),              *param->length, *param->is_null
						Expression:"type: %d  buffer: %p  length: %lu  is_null: %d",              param->buffer_type, (param->buffer ? param->buffer : NullS),              *param->length, *param->is_null
							Constant:"type: %d  buffer: %p  length: %lu  is_null: %d"
							Expression:param->buffer_type, (param->buffer ? param->buffer : NullS),              *param->length, *param->is_null
								PtrMemberAccess:param->buffer_type
									Identifier:param
									Identifier:buffer_type
								Expression:(param->buffer ? param->buffer : NullS),              *param->length, *param->is_null
									ConditionalExpression:param->buffer ? param->buffer : NullS
										Condition:param->buffer
											PtrMemberAccess:param->buffer
												Identifier:param
												Identifier:buffer
										PtrMemberAccess:param->buffer
											Identifier:param
											Identifier:buffer
										Identifier:NullS
									Expression:*param->length, *param->is_null
										UnaryOperationExpression:*param->length
											UnaryOperator:*
											PtrMemberAccess:param->length
												Identifier:param
												Identifier:length
										UnaryOperationExpression:*param->is_null
											UnaryOperator:*
											PtrMemberAccess:param->is_null
												Identifier:param
												Identifier:is_null
		IfStatement:if (*param->is_null)
			Condition:*param->is_null
				UnaryOperationExpression:*param->is_null
					UnaryOperator:*
					PtrMemberAccess:param->is_null
						Identifier:param
						Identifier:is_null
			ExpressionStatement:store_param_null(net, param)
				CallExpression:store_param_null(net, param)
					Callee:store_param_null
						Identifier:store_param_null
					ArgumentList:net
						Argument:net
							Identifier:net
						Argument:param
							Identifier:param
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:static bool
	Identifier:store_param
	ParameterList:MYSQL_STMT *stmt , MYSQL_BIND *param
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
FunctionDef:add_binary_row (NET *net , MYSQL_STMT *stmt , ulong pkt_len , MYSQL_ROWS ***prev_ptr)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_ROWS *row;
			IdentifierDecl:*row
				IdentifierDeclType:MYSQL_ROWS *
				Identifier:row
		IdentifierDeclStatement:uchar *cp = net->read_pos;
			IdentifierDecl:*cp = net->read_pos
				IdentifierDeclType:uchar *
				Identifier:cp
				AssignmentExpression:*cp = net->read_pos
					Identifier:cp
					PtrMemberAccess:net->read_pos
						Identifier:net
						Identifier:read_pos
		IdentifierDeclStatement:MYSQL_DATA *result = &stmt->result;
			IdentifierDecl:*result = &stmt->result
				IdentifierDeclType:MYSQL_DATA *
				Identifier:result
				AssignmentExpression:*result = &stmt->result
					Identifier:result
					UnaryOperationExpression:&stmt->result
						UnaryOperator:&
						PtrMemberAccess:stmt->result
							Identifier:stmt
							Identifier:result
		IfStatement:if (!(row = (MYSQL_ROWS *)alloc_root(result->alloc,                                       sizeof(MYSQL_ROWS) + pkt_len - 1)))
			Condition:!(row = (MYSQL_ROWS *)alloc_root(result->alloc,                                       sizeof(MYSQL_ROWS) + pkt_len - 1))
				UnaryOperationExpression:!(row = (MYSQL_ROWS *)alloc_root(result->alloc,                                       sizeof(MYSQL_ROWS) + pkt_len - 1))
					UnaryOperator:!
					AssignmentExpression:row = (MYSQL_ROWS *)alloc_root(result->alloc,                                       sizeof(MYSQL_ROWS) + pkt_len - 1)
						Identifier:row
						CastExpression:(MYSQL_ROWS *)alloc_root(result->alloc,                                       sizeof(MYSQL_ROWS) + pkt_len - 1)
							CastTarget:MYSQL_ROWS *
							CallExpression:alloc_root(result->alloc,                                       sizeof(MYSQL_ROWS) + pkt_len - 1)
								Callee:alloc_root
									Identifier:alloc_root
								ArgumentList:result->alloc
									Argument:result->alloc
										PtrMemberAccess:result->alloc
											Identifier:result
											Identifier:alloc
									Argument:sizeof(MYSQL_ROWS) + pkt_len - 1
										AdditiveExpression:sizeof(MYSQL_ROWS) + pkt_len - 1
											SizeofExpression:sizeof(MYSQL_ROWS)
												Sizeof:sizeof
												Identifier:MYSQL_ROWS
											AdditiveExpression:pkt_len - 1
												Identifier:pkt_len
												Constant:1
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_OUT_OF_MEMORY
								Identifier:CR_OUT_OF_MEMORY
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ReturnStatement:return 1;
					Constant:1
		ExpressionStatement:row->data = (MYSQL_ROW)(row + 1)
			AssignmentExpression:row->data = (MYSQL_ROW)(row + 1)
				PtrMemberAccess:row->data
					Identifier:row
					Identifier:data
				CastExpression:(MYSQL_ROW)(row + 1)
					CastTarget:MYSQL_ROW
					AdditiveExpression:row + 1
						Identifier:row
						Constant:1
		ExpressionStatement:**prev_ptr = row
			AssignmentExpression:**prev_ptr = row
				UnaryOperationExpression:**prev_ptr
					UnaryOperator:*
					UnaryOperationExpression:*prev_ptr
						UnaryOperator:*
						Identifier:prev_ptr
				Identifier:row
		ExpressionStatement:*prev_ptr = &row->next
			AssignmentExpression:*prev_ptr = &row->next
				UnaryOperationExpression:*prev_ptr
					UnaryOperator:*
					Identifier:prev_ptr
				UnaryOperationExpression:&row->next
					UnaryOperator:&
					PtrMemberAccess:row->next
						Identifier:row
						Identifier:next
		ExpressionStatement:memcpy((char *)row->data, (char *)cp + 1, pkt_len - 1)
			CallExpression:memcpy((char *)row->data, (char *)cp + 1, pkt_len - 1)
				Callee:memcpy
					Identifier:memcpy
				ArgumentList:(char *)row->data
					Argument:(char *)row->data
						CastExpression:(char *)row->data
							CastTarget:char *
							PtrMemberAccess:row->data
								Identifier:row
								Identifier:data
					Argument:(char *)cp + 1
						AdditiveExpression:(char *)cp + 1
							CastExpression:(char *)cp
								CastTarget:char *
								Identifier:cp
							Constant:1
					Argument:pkt_len - 1
						AdditiveExpression:pkt_len - 1
							Identifier:pkt_len
							Constant:1
		ExpressionStatement:row->length = pkt_len
			AssignmentExpression:row->length = pkt_len
				PtrMemberAccess:row->length
					Identifier:row
					Identifier:length
				Identifier:pkt_len
		Statement:/* To allow us to do sanity checks */
		ExpressionStatement:result->rows++
			PostIncDecOperationExpression:result->rows++
				PtrMemberAccess:result->rows
					Identifier:result
					Identifier:rows
				IncDec:++
		ReturnStatement:return 0;
			Constant:0
	ReturnType:static inline int
	Identifier:add_binary_row
	ParameterList:NET *net , MYSQL_STMT *stmt , ulong pkt_len , MYSQL_ROWS ***prev_ptr
		Parameter:NET *net
			ParameterType:NET *
			Identifier:net
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:ulong pkt_len
			ParameterType:ulong
			Identifier:pkt_len
		Parameter:MYSQL_ROWS ***prev_ptr
			ParameterType:MYSQL_ROWS * * *
			Identifier:prev_ptr
FunctionDef:execute (MYSQL_STMT *stmt , char *packet , ulong length)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		IdentifierDeclStatement:NET *net = &mysql->net;
			IdentifierDecl:*net = &mysql->net
				IdentifierDeclType:NET *
				Identifier:net
				AssignmentExpression:*net = &mysql->net
					Identifier:net
					UnaryOperationExpression:&mysql->net
						UnaryOperator:&
						PtrMemberAccess:mysql->net
							Identifier:mysql
							Identifier:net
		Statement:uchar
		Statement:buff
		Statement:[
		Statement:4
		Statement:/* size of stmt id */
		Statement:+
		Statement:5
		Statement:/* execution flags */
		Statement:]
		ExpressionStatement:
		IdentifierDeclStatement:bool res;
			IdentifierDecl:res
				IdentifierDeclType:bool
				Identifier:res
		IdentifierDeclStatement:bool is_data_packet = false;
			IdentifierDecl:is_data_packet = false
				IdentifierDeclType:bool
				Identifier:is_data_packet
				AssignmentExpression:is_data_packet = false
					Identifier:is_data_packet
					Identifier:false
		IdentifierDeclStatement:ulong pkt_len;
			IdentifierDecl:pkt_len
				IdentifierDeclType:ulong
				Identifier:pkt_len
		IdentifierDeclStatement:MYSQL_ROWS **prev_ptr = NULL;
			IdentifierDecl:**prev_ptr = NULL
				IdentifierDeclType:MYSQL_ROWS * *
				Identifier:prev_ptr
				AssignmentExpression:**prev_ptr = NULL
					Identifier:prev_ptr
					Identifier:NULL
		ExpressionStatement:DBUG_ENTER("execute")
			CallExpression:DBUG_ENTER("execute")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"execute"
					Argument:"execute"
						Constant:"execute"
		ExpressionStatement:DBUG_DUMP("packet", (uchar *)packet, length)
			CallExpression:DBUG_DUMP("packet", (uchar *)packet, length)
				Callee:DBUG_DUMP
					Identifier:DBUG_DUMP
				ArgumentList:"packet"
					Argument:"packet"
						Constant:"packet"
					Argument:(uchar *)packet
						CastExpression:(uchar *)packet
							CastTarget:uchar *
							Identifier:packet
					Argument:length
						Identifier:length
		ExpressionStatement:int4store(buff, stmt->stmt_id)
			CallExpression:int4store(buff, stmt->stmt_id)
				Callee:int4store
					Identifier:int4store
				ArgumentList:buff
					Argument:buff
						Identifier:buff
					Argument:stmt->stmt_id
						PtrMemberAccess:stmt->stmt_id
							Identifier:stmt
							Identifier:stmt_id
		Statement:/* Send stmt id to server */
		ExpressionStatement:buff[4] = (char)stmt->flags
			AssignmentExpression:buff[4] = (char)stmt->flags
				ArrayIndexing:buff[4]
					Identifier:buff
					Constant:4
				CastExpression:(char)stmt->flags
					CastTarget:char
					PtrMemberAccess:stmt->flags
						Identifier:stmt
						Identifier:flags
		ExpressionStatement:int4store(buff + 5, 1)
			CallExpression:int4store(buff + 5, 1)
				Callee:int4store
					Identifier:int4store
				ArgumentList:buff + 5
					Argument:buff + 5
						AdditiveExpression:buff + 5
							Identifier:buff
							Constant:5
					Argument:1
						Constant:1
		Statement:/* iteration count */
		ExpressionStatement:res = (cli_advanced_command(mysql, COM_STMT_EXECUTE, buff, sizeof(buff),                              (uchar *)packet, length, 1, stmt) ||         (*mysql->methods->read_query_result)(mysql))
			AssignmentExpression:res = (cli_advanced_command(mysql, COM_STMT_EXECUTE, buff, sizeof(buff),                              (uchar *)packet, length, 1, stmt) ||         (*mysql->methods->read_query_result)(mysql))
				Identifier:res
				OrExpression:cli_advanced_command(mysql, COM_STMT_EXECUTE, buff, sizeof(buff),                              (uchar *)packet, length, 1, stmt) ||         (*mysql->methods->read_query_result)(mysql)
					CallExpression:cli_advanced_command(mysql, COM_STMT_EXECUTE, buff, sizeof(buff),                              (uchar *)packet, length, 1, stmt)
						Callee:cli_advanced_command
							Identifier:cli_advanced_command
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:COM_STMT_EXECUTE
								Identifier:COM_STMT_EXECUTE
							Argument:buff
								Identifier:buff
							Argument:sizeof(buff)
								SizeofExpression:sizeof(buff)
									Sizeof:sizeof
									Identifier:buff
							Argument:(uchar *)packet
								CastExpression:(uchar *)packet
									CastTarget:uchar *
									Identifier:packet
							Argument:length
								Identifier:length
							Argument:1
								Constant:1
							Argument:stmt
								Identifier:stmt
					CallExpression:(*mysql->methods->read_query_result)(mysql)
						Callee:*mysql->methods->read_query_result
							UnaryOperationExpression:*mysql->methods->read_query_result
								UnaryOperator:*
								PtrMemberAccess:mysql->methods->read_query_result
									PtrMemberAccess:mysql->methods
										Identifier:mysql
										Identifier:methods
									Identifier:read_query_result
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
		IfStatement:if ((mysql->server_capabilities & CLIENT_DEPRECATE_EOF))
			Condition:mysql->server_capabilities & CLIENT_DEPRECATE_EOF
				BitAndExpression:mysql->server_capabilities & CLIENT_DEPRECATE_EOF
					PtrMemberAccess:mysql->server_capabilities
						Identifier:mysql
						Identifier:server_capabilities
					Identifier:CLIENT_DEPRECATE_EOF
			CompoundStatement:
				IfStatement:if (mysql->server_status & SERVER_STATUS_CURSOR_EXISTS)
					Condition:mysql->server_status & SERVER_STATUS_CURSOR_EXISTS
						BitAndExpression:mysql->server_status & SERVER_STATUS_CURSOR_EXISTS
							PtrMemberAccess:mysql->server_status
								Identifier:mysql
								Identifier:server_status
							Identifier:SERVER_STATUS_CURSOR_EXISTS
					ExpressionStatement:mysql->server_status &= ~SERVER_STATUS_CURSOR_EXISTS
						AssignmentExpression:mysql->server_status &= ~SERVER_STATUS_CURSOR_EXISTS
							PtrMemberAccess:mysql->server_status
								Identifier:mysql
								Identifier:server_status
							Identifier:~SERVER_STATUS_CURSOR_EXISTS
				Statement:/*      After having read the query result, we need to make sure that the client      does not end up into a hang waiting for the server to send a packet.      If the CURSOR_TYPE_READ_ONLY flag is set, we would want to perform the      additional packet read mainly for prepared statements involving SELECT      queries. For SELECT queries, the result format would either be      <Metadata><OK> or <Metadata><rows><OK>. We would have read the metadata      by now and have the field_count populated. The check for field_count will      help determine if we can expect an additional packet from the server.    */
				IfStatement:if (!res && (stmt->flags & CURSOR_TYPE_READ_ONLY) &&        mysql->field_count != 0)
					Condition:!res && (stmt->flags & CURSOR_TYPE_READ_ONLY) &&        mysql->field_count != 0
						AndExpression:!res && (stmt->flags & CURSOR_TYPE_READ_ONLY) &&        mysql->field_count != 0
							UnaryOperationExpression:!res
								UnaryOperator:!
								Identifier:res
							AndExpression:(stmt->flags & CURSOR_TYPE_READ_ONLY) &&        mysql->field_count != 0
								BitAndExpression:stmt->flags & CURSOR_TYPE_READ_ONLY
									PtrMemberAccess:stmt->flags
										Identifier:stmt
										Identifier:flags
									Identifier:CURSOR_TYPE_READ_ONLY
								EqualityExpression:mysql->field_count != 0
									PtrMemberAccess:mysql->field_count
										Identifier:mysql
										Identifier:field_count
									Constant:0
					CompoundStatement:
						Statement:/*        server can now respond with a cursor - then the respond will be        <Metadata><OK> or with binary rows result set <Metadata><row(s)><OK>.        The former can be the case when the prepared statement is a procedure        invocation, ie. call(). There also other cases. When server responds        with <OK> (cursor) packet we read it and get the server status. In case        it responds with binary row we add it to the binary rows result set        (the reset of the result set will be read in prepare_to_fetch_result).      */
						IfStatement:if ((pkt_len = cli_safe_read(mysql, &is_data_packet)) == packet_error)
							Condition:(pkt_len = cli_safe_read(mysql, &is_data_packet)) == packet_error
								EqualityExpression:(pkt_len = cli_safe_read(mysql, &is_data_packet)) == packet_error
									AssignmentExpression:pkt_len = cli_safe_read(mysql, &is_data_packet)
										Identifier:pkt_len
										CallExpression:cli_safe_read(mysql, &is_data_packet)
											Callee:cli_safe_read
												Identifier:cli_safe_read
											ArgumentList:mysql
												Argument:mysql
													Identifier:mysql
												Argument:&is_data_packet
													UnaryOperationExpression:&is_data_packet
														UnaryOperator:&
														Identifier:is_data_packet
									Identifier:packet_error
							ExpressionStatement:DBUG_RETURN(1)
								CallExpression:DBUG_RETURN(1)
									Callee:DBUG_RETURN
										Identifier:DBUG_RETURN
									ArgumentList:1
										Argument:1
											Constant:1
						IfStatement:if (is_data_packet)
							Condition:is_data_packet
								Identifier:is_data_packet
							CompoundStatement:
								ExpressionStatement:DBUG_ASSERT(stmt->result.rows == 0)
									CallExpression:DBUG_ASSERT(stmt->result.rows == 0)
										Callee:DBUG_ASSERT
											Identifier:DBUG_ASSERT
										ArgumentList:stmt->result.rows == 0
											Argument:stmt->result.rows == 0
												EqualityExpression:stmt->result.rows == 0
													MemberAccess:stmt->result.rows
														PtrMemberAccess:stmt->result
															Identifier:stmt
															Identifier:result
														Identifier:rows
													Constant:0
								ExpressionStatement:prev_ptr = &stmt->result.data
									AssignmentExpression:prev_ptr = &stmt->result.data
										Identifier:prev_ptr
										UnaryOperationExpression:&stmt->result.data
											UnaryOperator:&
											MemberAccess:stmt->result.data
												PtrMemberAccess:stmt->result
													Identifier:stmt
													Identifier:result
												Identifier:data
								IfStatement:if (add_binary_row(net, stmt, pkt_len, &prev_ptr))
									Condition:add_binary_row(net, stmt, pkt_len, &prev_ptr)
										CallExpression:add_binary_row(net, stmt, pkt_len, &prev_ptr)
											Callee:add_binary_row
												Identifier:add_binary_row
											ArgumentList:net
												Argument:net
													Identifier:net
												Argument:stmt
													Identifier:stmt
												Argument:pkt_len
													Identifier:pkt_len
												Argument:&prev_ptr
													UnaryOperationExpression:&prev_ptr
														UnaryOperator:&
														Identifier:prev_ptr
									ExpressionStatement:DBUG_RETURN(1)
										CallExpression:DBUG_RETURN(1)
											Callee:DBUG_RETURN
												Identifier:DBUG_RETURN
											ArgumentList:1
												Argument:1
													Constant:1
		ExpressionStatement:stmt->affected_rows = mysql->affected_rows
			AssignmentExpression:stmt->affected_rows = mysql->affected_rows
				PtrMemberAccess:stmt->affected_rows
					Identifier:stmt
					Identifier:affected_rows
				PtrMemberAccess:mysql->affected_rows
					Identifier:mysql
					Identifier:affected_rows
		ExpressionStatement:stmt->server_status = mysql->server_status
			AssignmentExpression:stmt->server_status = mysql->server_status
				PtrMemberAccess:stmt->server_status
					Identifier:stmt
					Identifier:server_status
				PtrMemberAccess:mysql->server_status
					Identifier:mysql
					Identifier:server_status
		ExpressionStatement:stmt->insert_id = mysql->insert_id
			AssignmentExpression:stmt->insert_id = mysql->insert_id
				PtrMemberAccess:stmt->insert_id
					Identifier:stmt
					Identifier:insert_id
				PtrMemberAccess:mysql->insert_id
					Identifier:mysql
					Identifier:insert_id
		IfStatement:if (res)
			Condition:res
				Identifier:res
			CompoundStatement:
				Statement:/*      Don't set stmt error if stmt->mysql is NULL, as the error in this case      has already been set by mysql_prune_stmt_list().    */
				IfStatement:if (stmt->mysql)
					Condition:stmt->mysql
						PtrMemberAccess:stmt->mysql
							Identifier:stmt
							Identifier:mysql
					ExpressionStatement:set_stmt_errmsg(stmt, net)
						CallExpression:set_stmt_errmsg(stmt, net)
							Callee:set_stmt_errmsg
								Identifier:set_stmt_errmsg
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:net
									Identifier:net
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:static bool
	Identifier:execute
	ParameterList:MYSQL_STMT *stmt , char *packet , ulong length
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:char *packet
			ParameterType:char *
			Identifier:packet
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:cli_stmt_execute (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("cli_stmt_execute")
			CallExpression:DBUG_ENTER("cli_stmt_execute")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"cli_stmt_execute"
					Argument:"cli_stmt_execute"
						Constant:"cli_stmt_execute"
		IfStatement:if (stmt->param_count)
			Condition:stmt->param_count
				PtrMemberAccess:stmt->param_count
					Identifier:stmt
					Identifier:param_count
			CompoundStatement:
				IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
					IdentifierDecl:*mysql = stmt->mysql
						IdentifierDeclType:MYSQL *
						Identifier:mysql
						AssignmentExpression:*mysql = stmt->mysql
							Identifier:mysql
							PtrMemberAccess:stmt->mysql
								Identifier:stmt
								Identifier:mysql
				IdentifierDeclStatement:NET *net = &mysql->net;
					IdentifierDecl:*net = &mysql->net
						IdentifierDeclType:NET *
						Identifier:net
						AssignmentExpression:*net = &mysql->net
							Identifier:net
							UnaryOperationExpression:&mysql->net
								UnaryOperator:&
								PtrMemberAccess:mysql->net
									Identifier:mysql
									Identifier:net
				IdentifierDeclStatement:MYSQL_BIND *param, *param_end;
					IdentifierDecl:*param
						IdentifierDeclType:MYSQL_BIND *
						Identifier:param
					IdentifierDecl:*param_end
						IdentifierDeclType:MYSQL_BIND *
						Identifier:param_end
				IdentifierDeclStatement:char *param_data;
					IdentifierDecl:*param_data
						IdentifierDeclType:char *
						Identifier:param_data
				IdentifierDeclStatement:ulong length;
					IdentifierDecl:length
						IdentifierDeclType:ulong
						Identifier:length
				IdentifierDeclStatement:uint null_count;
					IdentifierDecl:null_count
						IdentifierDeclType:uint
						Identifier:null_count
				IdentifierDeclStatement:bool result;
					IdentifierDecl:result
						IdentifierDeclType:bool
						Identifier:result
				IfStatement:if (!stmt->bind_param_done)
					Condition:!stmt->bind_param_done
						UnaryOperationExpression:!stmt->bind_param_done
							UnaryOperator:!
							PtrMemberAccess:stmt->bind_param_done
								Identifier:stmt
								Identifier:bind_param_done
					CompoundStatement:
						ExpressionStatement:set_stmt_error(stmt, CR_PARAMS_NOT_BOUND, unknown_sqlstate, NULL)
							CallExpression:set_stmt_error(stmt, CR_PARAMS_NOT_BOUND, unknown_sqlstate, NULL)
								Callee:set_stmt_error
									Identifier:set_stmt_error
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:CR_PARAMS_NOT_BOUND
										Identifier:CR_PARAMS_NOT_BOUND
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
									Argument:NULL
										Identifier:NULL
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
				IfStatement:if (mysql->status != MYSQL_STATUS_READY ||        mysql->server_status & SERVER_MORE_RESULTS_EXISTS)
					Condition:mysql->status != MYSQL_STATUS_READY ||        mysql->server_status & SERVER_MORE_RESULTS_EXISTS
						OrExpression:mysql->status != MYSQL_STATUS_READY ||        mysql->server_status & SERVER_MORE_RESULTS_EXISTS
							EqualityExpression:mysql->status != MYSQL_STATUS_READY
								PtrMemberAccess:mysql->status
									Identifier:mysql
									Identifier:status
								Identifier:MYSQL_STATUS_READY
							BitAndExpression:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
								PtrMemberAccess:mysql->server_status
									Identifier:mysql
									Identifier:server_status
								Identifier:SERVER_MORE_RESULTS_EXISTS
					CompoundStatement:
						ExpressionStatement:set_stmt_error(stmt, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate, NULL)
							CallExpression:set_stmt_error(stmt, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate, NULL)
								Callee:set_stmt_error
									Identifier:set_stmt_error
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:CR_COMMANDS_OUT_OF_SYNC
										Identifier:CR_COMMANDS_OUT_OF_SYNC
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
									Argument:NULL
										Identifier:NULL
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
				IfStatement:if (net->vio)
					Condition:net->vio
						PtrMemberAccess:net->vio
							Identifier:net
							Identifier:vio
					ExpressionStatement:net_clear(net, 1)
						CallExpression:net_clear(net, 1)
							Callee:net_clear
								Identifier:net_clear
							ArgumentList:net
								Argument:net
									Identifier:net
								Argument:1
									Constant:1
				Statement:/* Sets net->write_pos */
				Statement:/* Reserve place for null-marker bytes */
				ExpressionStatement:null_count = (stmt->param_count + 7) / 8
					AssignmentExpression:null_count = (stmt->param_count + 7) / 8
						Identifier:null_count
						MultiplicativeExpression:(stmt->param_count + 7) / 8
							AdditiveExpression:stmt->param_count + 7
								PtrMemberAccess:stmt->param_count
									Identifier:stmt
									Identifier:param_count
								Constant:7
							Constant:8
				IfStatement:if (my_realloc_str(net, null_count + 1))
					Condition:my_realloc_str(net, null_count + 1)
						CallExpression:my_realloc_str(net, null_count + 1)
							Callee:my_realloc_str
								Identifier:my_realloc_str
							ArgumentList:net
								Argument:net
									Identifier:net
								Argument:null_count + 1
									AdditiveExpression:null_count + 1
										Identifier:null_count
										Constant:1
					CompoundStatement:
						ExpressionStatement:set_stmt_errmsg(stmt, net)
							CallExpression:set_stmt_errmsg(stmt, net)
								Callee:set_stmt_errmsg
									Identifier:set_stmt_errmsg
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:net
										Identifier:net
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
				ExpressionStatement:memset(net->write_pos, 0, null_count)
					CallExpression:memset(net->write_pos, 0, null_count)
						Callee:memset
							Identifier:memset
						ArgumentList:net->write_pos
							Argument:net->write_pos
								PtrMemberAccess:net->write_pos
									Identifier:net
									Identifier:write_pos
							Argument:0
								Constant:0
							Argument:null_count
								Identifier:null_count
				ExpressionStatement:net->write_pos += null_count
					AssignmentExpression:net->write_pos += null_count
						PtrMemberAccess:net->write_pos
							Identifier:net
							Identifier:write_pos
						Identifier:null_count
				ExpressionStatement:param_end = stmt->params + stmt->param_count
					AssignmentExpression:param_end = stmt->params + stmt->param_count
						Identifier:param_end
						AdditiveExpression:stmt->params + stmt->param_count
							PtrMemberAccess:stmt->params
								Identifier:stmt
								Identifier:params
							PtrMemberAccess:stmt->param_count
								Identifier:stmt
								Identifier:param_count
				Statement:/* In case if buffers (type) altered, indicate to server */
				ExpressionStatement:*(net->write_pos)++ = (uchar)stmt->send_types_to_server
					AssignmentExpression:*(net->write_pos)++ = (uchar)stmt->send_types_to_server
						UnaryOperationExpression:*(net->write_pos)++
							UnaryOperator:*
							PostIncDecOperationExpression:(net->write_pos)++
								PtrMemberAccess:net->write_pos
									Identifier:net
									Identifier:write_pos
								IncDec:++
						CastExpression:(uchar)stmt->send_types_to_server
							CastTarget:uchar
							PtrMemberAccess:stmt->send_types_to_server
								Identifier:stmt
								Identifier:send_types_to_server
				IfStatement:if (stmt->send_types_to_server)
					Condition:stmt->send_types_to_server
						PtrMemberAccess:stmt->send_types_to_server
							Identifier:stmt
							Identifier:send_types_to_server
					CompoundStatement:
						IfStatement:if (my_realloc_str(net, 2 * stmt->param_count))
							Condition:my_realloc_str(net, 2 * stmt->param_count)
								CallExpression:my_realloc_str(net, 2 * stmt->param_count)
									Callee:my_realloc_str
										Identifier:my_realloc_str
									ArgumentList:net
										Argument:net
											Identifier:net
										Argument:2 * stmt->param_count
											MultiplicativeExpression:2 * stmt->param_count
												Constant:2
												PtrMemberAccess:stmt->param_count
													Identifier:stmt
													Identifier:param_count
							CompoundStatement:
								ExpressionStatement:set_stmt_errmsg(stmt, net)
									CallExpression:set_stmt_errmsg(stmt, net)
										Callee:set_stmt_errmsg
											Identifier:set_stmt_errmsg
										ArgumentList:stmt
											Argument:stmt
												Identifier:stmt
											Argument:net
												Identifier:net
								ExpressionStatement:DBUG_RETURN(1)
									CallExpression:DBUG_RETURN(1)
										Callee:DBUG_RETURN
											Identifier:DBUG_RETURN
										ArgumentList:1
											Argument:1
												Constant:1
						Statement:/*        Store types of parameters in first in first package        that is sent to the server.      */
						ForStatement:for (param = stmt->params; param < param_end; param++)
							ForInit:param = stmt->params;
								AssignmentExpression:param = stmt->params
									Identifier:param
									PtrMemberAccess:stmt->params
										Identifier:stmt
										Identifier:params
							Condition:param < param_end
								RelationalExpression:param < param_end
									Identifier:param
									Identifier:param_end
							PostIncDecOperationExpression:param++
								Identifier:param
								IncDec:++
							ExpressionStatement:store_param_type(&net->write_pos, param)
								CallExpression:store_param_type(&net->write_pos, param)
									Callee:store_param_type
										Identifier:store_param_type
									ArgumentList:&net->write_pos
										Argument:&net->write_pos
											UnaryOperationExpression:&net->write_pos
												UnaryOperator:&
												PtrMemberAccess:net->write_pos
													Identifier:net
													Identifier:write_pos
										Argument:param
											Identifier:param
				ForStatement:for (param = stmt->params; param < param_end; param++)
					ForInit:param = stmt->params;
						AssignmentExpression:param = stmt->params
							Identifier:param
							PtrMemberAccess:stmt->params
								Identifier:stmt
								Identifier:params
					Condition:param < param_end
						RelationalExpression:param < param_end
							Identifier:param
							Identifier:param_end
					PostIncDecOperationExpression:param++
						Identifier:param
						IncDec:++
					CompoundStatement:
						Statement:/* check if mysql_stmt_send_long_data() was used */
						IfStatement:if (param->long_data_used)
							Condition:param->long_data_used
								PtrMemberAccess:param->long_data_used
									Identifier:param
									Identifier:long_data_used
							ExpressionStatement:param->long_data_used = 0
								AssignmentExpression:param->long_data_used = 0
									PtrMemberAccess:param->long_data_used
										Identifier:param
										Identifier:long_data_used
									Constant:0
						Statement:/* Clear for next execute call */
				ExpressionStatement:length = (ulong)(net->write_pos - net->buff)
					AssignmentExpression:length = (ulong)(net->write_pos - net->buff)
						Identifier:length
						CastExpression:(ulong)(net->write_pos - net->buff)
							CastTarget:ulong
							AdditiveExpression:net->write_pos - net->buff
								PtrMemberAccess:net->write_pos
									Identifier:net
									Identifier:write_pos
								PtrMemberAccess:net->buff
									Identifier:net
									Identifier:buff
				Statement:/* TODO: Look into avoding the following memdup */
				Statement:if
				Statement:(
				Statement:!
				Statement:(
				Statement:param_data
				Statement:=
				Statement:pointer_cast
				Statement:<
				Statement:char
				Statement:*
				Statement:>
				Statement:(
				Statement:my_memdup
				Statement:(
				Statement:PSI_NOT_INSTRUMENTED
				Statement:,
				Statement:net
				Statement:->
				Statement:buff
				Statement:,
				Statement:length
				Statement:,
				Statement:MYF
				Statement:(
				Statement:0
				Statement:)
				Statement:)
				Statement:)
				Statement:)
				Statement:)
				CompoundStatement:
					ExpressionStatement:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
						CallExpression:set_stmt_error(stmt, CR_OUT_OF_MEMORY, unknown_sqlstate, NULL)
							Callee:set_stmt_error
								Identifier:set_stmt_error
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:CR_OUT_OF_MEMORY
									Identifier:CR_OUT_OF_MEMORY
								Argument:unknown_sqlstate
									Identifier:unknown_sqlstate
								Argument:NULL
									Identifier:NULL
					ExpressionStatement:DBUG_RETURN(1)
						CallExpression:DBUG_RETURN(1)
							Callee:DBUG_RETURN
								Identifier:DBUG_RETURN
							ArgumentList:1
								Argument:1
									Constant:1
				ExpressionStatement:result = execute(stmt, param_data, length)
					AssignmentExpression:result = execute(stmt, param_data, length)
						Identifier:result
						CallExpression:execute(stmt, param_data, length)
							Callee:execute
								Identifier:execute
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:param_data
									Identifier:param_data
								Argument:length
									Identifier:length
				ExpressionStatement:stmt->send_types_to_server = 0
					AssignmentExpression:stmt->send_types_to_server = 0
						PtrMemberAccess:stmt->send_types_to_server
							Identifier:stmt
							Identifier:send_types_to_server
						Constant:0
				ExpressionStatement:my_free(param_data)
					CallExpression:my_free(param_data)
						Callee:my_free
							Identifier:my_free
						ArgumentList:param_data
							Argument:param_data
								Identifier:param_data
				ExpressionStatement:DBUG_RETURN(result)
					CallExpression:DBUG_RETURN(result)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:result
							Argument:result
								Identifier:result
		ExpressionStatement:DBUG_RETURN((int)execute(stmt, 0, 0))
			CallExpression:DBUG_RETURN((int)execute(stmt, 0, 0))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:(int)execute(stmt, 0, 0)
					Argument:(int)execute(stmt, 0, 0)
						CastExpression:(int)execute(stmt, 0, 0)
							CastTarget:int
							CallExpression:execute(stmt, 0, 0)
								Callee:execute
									Identifier:execute
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:0
										Constant:0
									Argument:0
										Constant:0
	ReturnType:int
	Identifier:cli_stmt_execute
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:stmt_read_row_buffered (MYSQL_STMT *stmt , unsigned char **row)
	CompoundStatement:
		IfStatement:if (stmt->data_cursor)
			Condition:stmt->data_cursor
				PtrMemberAccess:stmt->data_cursor
					Identifier:stmt
					Identifier:data_cursor
			CompoundStatement:
				ExpressionStatement:*row = (uchar *)stmt->data_cursor->data
					AssignmentExpression:*row = (uchar *)stmt->data_cursor->data
						UnaryOperationExpression:*row
							UnaryOperator:*
							Identifier:row
						CastExpression:(uchar *)stmt->data_cursor->data
							CastTarget:uchar *
							PtrMemberAccess:stmt->data_cursor->data
								PtrMemberAccess:stmt->data_cursor
									Identifier:stmt
									Identifier:data_cursor
								Identifier:data
				ExpressionStatement:stmt->data_cursor = stmt->data_cursor->next
					AssignmentExpression:stmt->data_cursor = stmt->data_cursor->next
						PtrMemberAccess:stmt->data_cursor
							Identifier:stmt
							Identifier:data_cursor
						PtrMemberAccess:stmt->data_cursor->next
							PtrMemberAccess:stmt->data_cursor
								Identifier:stmt
								Identifier:data_cursor
							Identifier:next
				ReturnStatement:return 0;
					Constant:0
		ExpressionStatement:*row = 0
			AssignmentExpression:*row = 0
				UnaryOperationExpression:*row
					UnaryOperator:*
					Identifier:row
				Constant:0
		ReturnStatement:return MYSQL_NO_DATA;
			Identifier:MYSQL_NO_DATA
	ReturnType:static int
	Identifier:stmt_read_row_buffered
	ParameterList:MYSQL_STMT *stmt , unsigned char **row
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:unsigned char **row
			ParameterType:unsigned char * *
			Identifier:row
FunctionDef:stmt_read_row_unbuffered (MYSQL_STMT *stmt , unsigned char **row)
	CompoundStatement:
		IdentifierDeclStatement:int rc = 1;
			IdentifierDecl:rc = 1
				IdentifierDeclType:int
				Identifier:rc
				AssignmentExpression:rc = 1
					Identifier:rc
					Constant:1
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		Statement:/*    This function won't be called if stmt->field_count is zero    or execution wasn't done: this is ensured by mysql_stmt_execute.  */
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_SERVER_LOST
								Identifier:CR_SERVER_LOST
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ReturnStatement:return 1;
					Constant:1
		IfStatement:if (mysql->status != MYSQL_STATUS_STATEMENT_GET_RESULT)
			Condition:mysql->status != MYSQL_STATUS_STATEMENT_GET_RESULT
				EqualityExpression:mysql->status != MYSQL_STATUS_STATEMENT_GET_RESULT
					PtrMemberAccess:mysql->status
						Identifier:mysql
						Identifier:status
					Identifier:MYSQL_STATUS_STATEMENT_GET_RESULT
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt,                   stmt->unbuffered_fetch_cancelled ? CR_FETCH_CANCELED                                                    : CR_COMMANDS_OUT_OF_SYNC,                   unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt,                   stmt->unbuffered_fetch_cancelled ? CR_FETCH_CANCELED                                                    : CR_COMMANDS_OUT_OF_SYNC,                   unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:stmt->unbuffered_fetch_cancelled ? CR_FETCH_CANCELED                                                    : CR_COMMANDS_OUT_OF_SYNC
								ConditionalExpression:stmt->unbuffered_fetch_cancelled ? CR_FETCH_CANCELED                                                    : CR_COMMANDS_OUT_OF_SYNC
									Condition:stmt->unbuffered_fetch_cancelled
										PtrMemberAccess:stmt->unbuffered_fetch_cancelled
											Identifier:stmt
											Identifier:unbuffered_fetch_cancelled
									Identifier:CR_FETCH_CANCELED
									Identifier:CR_COMMANDS_OUT_OF_SYNC
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				GotoStatement:goto error;
					Identifier:error
		IfStatement:if ((*mysql->methods->unbuffered_fetch)(mysql, (char **)row))
			Condition:(*mysql->methods->unbuffered_fetch)(mysql, (char **)row)
				CallExpression:(*mysql->methods->unbuffered_fetch)(mysql, (char **)row)
					Callee:*mysql->methods->unbuffered_fetch
						UnaryOperationExpression:*mysql->methods->unbuffered_fetch
							UnaryOperator:*
							PtrMemberAccess:mysql->methods->unbuffered_fetch
								PtrMemberAccess:mysql->methods
									Identifier:mysql
									Identifier:methods
								Identifier:unbuffered_fetch
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:(char **)row
							CastExpression:(char **)row
								CastTarget:char **
								Identifier:row
			CompoundStatement:
				ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
					CallExpression:set_stmt_errmsg(stmt, &mysql->net)
						Callee:set_stmt_errmsg
							Identifier:set_stmt_errmsg
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:&mysql->net
								UnaryOperationExpression:&mysql->net
									UnaryOperator:&
									PtrMemberAccess:mysql->net
										Identifier:mysql
										Identifier:net
				Statement:/*      If there was an error, there are no more pending rows:      reset statement status to not hang up in following      mysql_stmt_close (it will try to flush result set before      closing the statement).    */
				ExpressionStatement:mysql->status = MYSQL_STATUS_READY
					AssignmentExpression:mysql->status = MYSQL_STATUS_READY
						PtrMemberAccess:mysql->status
							Identifier:mysql
							Identifier:status
						Identifier:MYSQL_STATUS_READY
				GotoStatement:goto error;
					Identifier:error
		IfStatement:if (!*row)
			Condition:!*row
				UnaryOperationExpression:!*row
					UnaryOperator:!
					UnaryOperationExpression:*row
						UnaryOperator:*
						Identifier:row
			CompoundStatement:
				ExpressionStatement:mysql->status = MYSQL_STATUS_READY
					AssignmentExpression:mysql->status = MYSQL_STATUS_READY
						PtrMemberAccess:mysql->status
							Identifier:mysql
							Identifier:status
						Identifier:MYSQL_STATUS_READY
				ExpressionStatement:rc = MYSQL_NO_DATA
					AssignmentExpression:rc = MYSQL_NO_DATA
						Identifier:rc
						Identifier:MYSQL_NO_DATA
				GotoStatement:goto error;
					Identifier:error
		ReturnStatement:return 0;
			Constant:0
		Label:error:
			Identifier:error
		IfStatement:if (mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled)
			Condition:mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled
				EqualityExpression:mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled
					PtrMemberAccess:mysql->unbuffered_fetch_owner
						Identifier:mysql
						Identifier:unbuffered_fetch_owner
					UnaryOperationExpression:&stmt->unbuffered_fetch_cancelled
						UnaryOperator:&
						PtrMemberAccess:stmt->unbuffered_fetch_cancelled
							Identifier:stmt
							Identifier:unbuffered_fetch_cancelled
			ExpressionStatement:mysql->unbuffered_fetch_owner = 0
				AssignmentExpression:mysql->unbuffered_fetch_owner = 0
					PtrMemberAccess:mysql->unbuffered_fetch_owner
						Identifier:mysql
						Identifier:unbuffered_fetch_owner
					Constant:0
		ReturnStatement:return rc;
			Identifier:rc
	ReturnType:static int
	Identifier:stmt_read_row_unbuffered
	ParameterList:MYSQL_STMT *stmt , unsigned char **row
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:unsigned char **row
			ParameterType:unsigned char * *
			Identifier:row
FunctionDef:stmt_read_row_from_cursor (MYSQL_STMT *stmt , unsigned char **row)
	CompoundStatement:
		IfStatement:if (stmt->data_cursor)
			Condition:stmt->data_cursor
				PtrMemberAccess:stmt->data_cursor
					Identifier:stmt
					Identifier:data_cursor
			ReturnStatement:return stmt_read_row_buffered(stmt, row);
				CallExpression:stmt_read_row_buffered(stmt, row)
					Callee:stmt_read_row_buffered
						Identifier:stmt_read_row_buffered
					ArgumentList:stmt
						Argument:stmt
							Identifier:stmt
						Argument:row
							Identifier:row
		IfStatement:if (stmt->server_status & SERVER_STATUS_LAST_ROW_SENT)
			Condition:stmt->server_status & SERVER_STATUS_LAST_ROW_SENT
				BitAndExpression:stmt->server_status & SERVER_STATUS_LAST_ROW_SENT
					PtrMemberAccess:stmt->server_status
						Identifier:stmt
						Identifier:server_status
					Identifier:SERVER_STATUS_LAST_ROW_SENT
			ExpressionStatement:stmt->server_status &= ~SERVER_STATUS_LAST_ROW_SENT
				AssignmentExpression:stmt->server_status &= ~SERVER_STATUS_LAST_ROW_SENT
					PtrMemberAccess:stmt->server_status
						Identifier:stmt
						Identifier:server_status
					Identifier:~SERVER_STATUS_LAST_ROW_SENT
		ExpressionStatement:*row = 0
			AssignmentExpression:*row = 0
				UnaryOperationExpression:*row
					UnaryOperator:*
					Identifier:row
				Constant:0
		ReturnStatement:return MYSQL_NO_DATA;
			Identifier:MYSQL_NO_DATA
	ReturnType:static int
	Identifier:stmt_read_row_from_cursor
	ParameterList:MYSQL_STMT *stmt , unsigned char **row
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:unsigned char **row
			ParameterType:unsigned char * *
			Identifier:row
FunctionDef:mysql_stmt_attr_set (MYSQL_STMT *stmt , enum enum_stmt_attr_type attr_type , const void *value)
	CompoundStatement:
		SwitchStatement:switch (attr_type)
			Condition:attr_type
				Identifier:attr_type
			CompoundStatement:
				Label:case STMT_ATTR_UPDATE_MAX_LENGTH:
					Identifier:STMT_ATTR_UPDATE_MAX_LENGTH
				ExpressionStatement:stmt->update_max_length = value ? *(const bool *)value : 0
					AssignmentExpression:stmt->update_max_length = value ? *(const bool *)value : 0
						PtrMemberAccess:stmt->update_max_length
							Identifier:stmt
							Identifier:update_max_length
						ConditionalExpression:value ? *(const bool *)value : 0
							Condition:value
								Identifier:value
							UnaryOperationExpression:*(const bool *)value
								UnaryOperator:*
								CastExpression:(const bool *)value
									CastTarget:const bool *
									Identifier:value
							Constant:0
				BreakStatement:break;
				Label:case STMT_ATTR_CURSOR_TYPE:
					Identifier:STMT_ATTR_CURSOR_TYPE
				CompoundStatement:
					IdentifierDeclStatement:ulong cursor_type;
						IdentifierDecl:cursor_type
							IdentifierDeclType:ulong
							Identifier:cursor_type
					ExpressionStatement:cursor_type = value ? *(ulong *)value : 0UL
						AssignmentExpression:cursor_type = value ? *(ulong *)value : 0UL
							Identifier:cursor_type
							ConditionalExpression:value ? *(ulong *)value : 0UL
								Condition:value
									Identifier:value
								UnaryOperationExpression:*(ulong *)value
									UnaryOperator:*
									CastExpression:(ulong *)value
										CastTarget:ulong *
										Identifier:value
								Constant:0UL
					IfStatement:if (cursor_type > (ulong)CURSOR_TYPE_READ_ONLY)
						Condition:cursor_type > (ulong)CURSOR_TYPE_READ_ONLY
							RelationalExpression:cursor_type > (ulong)CURSOR_TYPE_READ_ONLY
								Identifier:cursor_type
								CastExpression:(ulong)CURSOR_TYPE_READ_ONLY
									CastTarget:ulong
									Identifier:CURSOR_TYPE_READ_ONLY
						GotoStatement:goto err_not_implemented;
							Identifier:err_not_implemented
					ExpressionStatement:stmt->flags = cursor_type
						AssignmentExpression:stmt->flags = cursor_type
							PtrMemberAccess:stmt->flags
								Identifier:stmt
								Identifier:flags
							Identifier:cursor_type
					BreakStatement:break;
				Label:case STMT_ATTR_PREFETCH_ROWS:
					Identifier:STMT_ATTR_PREFETCH_ROWS
				CompoundStatement:
					IdentifierDeclStatement:ulong prefetch_rows = value ? *(ulong *)value : DEFAULT_PREFETCH_ROWS;
						IdentifierDecl:prefetch_rows = value ? *(ulong *)value : DEFAULT_PREFETCH_ROWS
							IdentifierDeclType:ulong
							Identifier:prefetch_rows
							AssignmentExpression:prefetch_rows = value ? *(ulong *)value : DEFAULT_PREFETCH_ROWS
								Identifier:prefetch_rows
								ConditionalExpression:value ? *(ulong *)value : DEFAULT_PREFETCH_ROWS
									Condition:value
										Identifier:value
									UnaryOperationExpression:*(ulong *)value
										UnaryOperator:*
										CastExpression:(ulong *)value
											CastTarget:ulong *
											Identifier:value
									Identifier:DEFAULT_PREFETCH_ROWS
					IfStatement:if (value == 0)
						Condition:value == 0
							EqualityExpression:value == 0
								Identifier:value
								Constant:0
						ReturnStatement:return true;
							Identifier:true
					ExpressionStatement:stmt->prefetch_rows = prefetch_rows
						AssignmentExpression:stmt->prefetch_rows = prefetch_rows
							PtrMemberAccess:stmt->prefetch_rows
								Identifier:stmt
								Identifier:prefetch_rows
							Identifier:prefetch_rows
					BreakStatement:break;
				Label:default:
					Identifier:default
				GotoStatement:goto err_not_implemented;
					Identifier:err_not_implemented
		ReturnStatement:return false;
			Identifier:false
		Label:err_not_implemented:
			Identifier:err_not_implemented
		ExpressionStatement:set_stmt_error(stmt, CR_NOT_IMPLEMENTED, unknown_sqlstate, NULL)
			CallExpression:set_stmt_error(stmt, CR_NOT_IMPLEMENTED, unknown_sqlstate, NULL)
				Callee:set_stmt_error
					Identifier:set_stmt_error
				ArgumentList:stmt
					Argument:stmt
						Identifier:stmt
					Argument:CR_NOT_IMPLEMENTED
						Identifier:CR_NOT_IMPLEMENTED
					Argument:unknown_sqlstate
						Identifier:unknown_sqlstate
					Argument:NULL
						Identifier:NULL
		ReturnStatement:return true;
			Identifier:true
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_attr_set
	ParameterList:MYSQL_STMT *stmt , enum enum_stmt_attr_type attr_type , const void *value
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:enum enum_stmt_attr_type attr_type
			ParameterType:enum enum_stmt_attr_type
			Identifier:attr_type
		Parameter:const void *value
			ParameterType:const void *
			Identifier:value
FunctionDef:mysql_stmt_attr_get (MYSQL_STMT *stmt , enum enum_stmt_attr_type attr_type , void *value)
	CompoundStatement:
		SwitchStatement:switch (attr_type)
			Condition:attr_type
				Identifier:attr_type
			CompoundStatement:
				Label:case STMT_ATTR_UPDATE_MAX_LENGTH:
					Identifier:STMT_ATTR_UPDATE_MAX_LENGTH
				ExpressionStatement:*(bool *)value = stmt->update_max_length
					AssignmentExpression:*(bool *)value = stmt->update_max_length
						UnaryOperationExpression:*(bool *)value
							UnaryOperator:*
							CastExpression:(bool *)value
								CastTarget:bool *
								Identifier:value
						PtrMemberAccess:stmt->update_max_length
							Identifier:stmt
							Identifier:update_max_length
				BreakStatement:break;
				Label:case STMT_ATTR_CURSOR_TYPE:
					Identifier:STMT_ATTR_CURSOR_TYPE
				ExpressionStatement:*(ulong *)value = stmt->flags
					AssignmentExpression:*(ulong *)value = stmt->flags
						UnaryOperationExpression:*(ulong *)value
							UnaryOperator:*
							CastExpression:(ulong *)value
								CastTarget:ulong *
								Identifier:value
						PtrMemberAccess:stmt->flags
							Identifier:stmt
							Identifier:flags
				BreakStatement:break;
				Label:case STMT_ATTR_PREFETCH_ROWS:
					Identifier:STMT_ATTR_PREFETCH_ROWS
				ExpressionStatement:*(ulong *)value = stmt->prefetch_rows
					AssignmentExpression:*(ulong *)value = stmt->prefetch_rows
						UnaryOperationExpression:*(ulong *)value
							UnaryOperator:*
							CastExpression:(ulong *)value
								CastTarget:ulong *
								Identifier:value
						PtrMemberAccess:stmt->prefetch_rows
							Identifier:stmt
							Identifier:prefetch_rows
				BreakStatement:break;
				Label:default:
					Identifier:default
				ReturnStatement:return true;
					Identifier:true
		ReturnStatement:return false;
			Identifier:false
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_attr_get
	ParameterList:MYSQL_STMT *stmt , enum enum_stmt_attr_type attr_type , void *value
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:enum enum_stmt_attr_type attr_type
			ParameterType:enum enum_stmt_attr_type
			Identifier:attr_type
		Parameter:void *value
			ParameterType:void *
			Identifier:value
FunctionDef:reinit_result_set_metadata (MYSQL_STMT *stmt)
	CompoundStatement:
		Statement:/* Server has sent result set metadata */
		IfStatement:if (stmt->field_count == 0)
			Condition:stmt->field_count == 0
				EqualityExpression:stmt->field_count == 0
					PtrMemberAccess:stmt->field_count
						Identifier:stmt
						Identifier:field_count
					Constant:0
			CompoundStatement:
				Statement:/*      This is 'SHOW'/'EXPLAIN'-like query. Current implementation of      prepared statements can't send result set metadata for these queries      on prepare stage. Read it now.    */
				ExpressionStatement:stmt->field_count = stmt->mysql->field_count
					AssignmentExpression:stmt->field_count = stmt->mysql->field_count
						PtrMemberAccess:stmt->field_count
							Identifier:stmt
							Identifier:field_count
						PtrMemberAccess:stmt->mysql->field_count
							PtrMemberAccess:stmt->mysql
								Identifier:stmt
								Identifier:mysql
							Identifier:field_count
				ExpressionStatement:alloc_stmt_fields(stmt)
					CallExpression:alloc_stmt_fields(stmt)
						Callee:alloc_stmt_fields
							Identifier:alloc_stmt_fields
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
	ReturnType:static void
	Identifier:reinit_result_set_metadata
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:prepare_to_fetch_result (MYSQL_STMT *stmt)
	CompoundStatement:
		IfStatement:if (stmt->server_status & SERVER_STATUS_CURSOR_EXISTS)
			Condition:stmt->server_status & SERVER_STATUS_CURSOR_EXISTS
				BitAndExpression:stmt->server_status & SERVER_STATUS_CURSOR_EXISTS
					PtrMemberAccess:stmt->server_status
						Identifier:stmt
						Identifier:server_status
					Identifier:SERVER_STATUS_CURSOR_EXISTS
			CompoundStatement:
				ExpressionStatement:stmt->mysql->status = MYSQL_STATUS_READY
					AssignmentExpression:stmt->mysql->status = MYSQL_STATUS_READY
						PtrMemberAccess:stmt->mysql->status
							PtrMemberAccess:stmt->mysql
								Identifier:stmt
								Identifier:mysql
							Identifier:status
						Identifier:MYSQL_STATUS_READY
				ExpressionStatement:stmt->read_row_func = stmt_read_row_from_cursor
					AssignmentExpression:stmt->read_row_func = stmt_read_row_from_cursor
						PtrMemberAccess:stmt->read_row_func
							Identifier:stmt
							Identifier:read_row_func
						Identifier:stmt_read_row_from_cursor
	ReturnType:static void
	Identifier:prepare_to_fetch_result
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_execute (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		ExpressionStatement:DBUG_ENTER("mysql_stmt_execute")
			CallExpression:DBUG_ENTER("mysql_stmt_execute")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_execute"
					Argument:"mysql_stmt_execute"
						Constant:"mysql_stmt_execute"
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			CompoundStatement:
				Statement:/* Error is already set in mysql_detatch_stmt_list */
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if (reset_stmt_handle(stmt, RESET_STORE_RESULT | RESET_CLEAR_ERROR))
			Condition:reset_stmt_handle(stmt, RESET_STORE_RESULT | RESET_CLEAR_ERROR)
				CallExpression:reset_stmt_handle(stmt, RESET_STORE_RESULT | RESET_CLEAR_ERROR)
					Callee:reset_stmt_handle
						Identifier:reset_stmt_handle
					ArgumentList:stmt
						Argument:stmt
							Identifier:stmt
						Argument:RESET_STORE_RESULT | RESET_CLEAR_ERROR
							InclusiveOrExpression:RESET_STORE_RESULT | RESET_CLEAR_ERROR
								Identifier:RESET_STORE_RESULT
								Identifier:RESET_CLEAR_ERROR
			ExpressionStatement:DBUG_RETURN(1)
				CallExpression:DBUG_RETURN(1)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:1
						Argument:1
							Constant:1
		Statement:/*    No need to check for stmt->state: if the statement wasn't    prepared we'll get 'unknown statement handler' error from server.  */
		IfStatement:if (mysql->methods->stmt_execute(stmt))
			Condition:mysql->methods->stmt_execute(stmt)
				CallExpression:mysql->methods->stmt_execute(stmt)
					Callee:mysql->methods->stmt_execute
						PtrMemberAccess:mysql->methods->stmt_execute
							PtrMemberAccess:mysql->methods
								Identifier:mysql
								Identifier:methods
							Identifier:stmt_execute
					ArgumentList:stmt
						Argument:stmt
							Identifier:stmt
			ExpressionStatement:DBUG_RETURN(1)
				CallExpression:DBUG_RETURN(1)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:1
						Argument:1
							Constant:1
		ExpressionStatement:stmt->state = MYSQL_STMT_EXECUTE_DONE
			AssignmentExpression:stmt->state = MYSQL_STMT_EXECUTE_DONE
				PtrMemberAccess:stmt->state
					Identifier:stmt
					Identifier:state
				Identifier:MYSQL_STMT_EXECUTE_DONE
		IfStatement:if (mysql->field_count)
			Condition:mysql->field_count
				PtrMemberAccess:mysql->field_count
					Identifier:mysql
					Identifier:field_count
			CompoundStatement:
				ExpressionStatement:reinit_result_set_metadata(stmt)
					CallExpression:reinit_result_set_metadata(stmt)
						Callee:reinit_result_set_metadata
							Identifier:reinit_result_set_metadata
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
				ExpressionStatement:prepare_to_fetch_result(stmt)
					CallExpression:prepare_to_fetch_result(stmt)
						Callee:prepare_to_fetch_result
							Identifier:prepare_to_fetch_result
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
		ExpressionStatement:DBUG_RETURN(stmt->last_errno != 0)
			CallExpression:DBUG_RETURN(stmt->last_errno != 0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->last_errno != 0
					Argument:stmt->last_errno != 0
						EqualityExpression:stmt->last_errno != 0
							PtrMemberAccess:stmt->last_errno
								Identifier:stmt
								Identifier:last_errno
							Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_stmt_execute
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_param_count (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_param_count")
			CallExpression:DBUG_ENTER("mysql_stmt_param_count")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_param_count"
					Argument:"mysql_stmt_param_count"
						Constant:"mysql_stmt_param_count"
		ExpressionStatement:DBUG_RETURN(stmt->param_count)
			CallExpression:DBUG_RETURN(stmt->param_count)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->param_count
					Argument:stmt->param_count
						PtrMemberAccess:stmt->param_count
							Identifier:stmt
							Identifier:param_count
	ReturnType:ulong STDCALL
	Identifier:mysql_stmt_param_count
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_affected_rows (MYSQL_STMT *stmt)
	CompoundStatement:
		ReturnStatement:return stmt->affected_rows;
			PtrMemberAccess:stmt->affected_rows
				Identifier:stmt
				Identifier:affected_rows
	ReturnType:my_ulonglong STDCALL
	Identifier:mysql_stmt_affected_rows
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_field_count (MYSQL_STMT *stmt)
	CompoundStatement:
		ReturnStatement:return stmt->field_count;
			PtrMemberAccess:stmt->field_count
				Identifier:stmt
				Identifier:field_count
	ReturnType:unsigned int STDCALL
	Identifier:mysql_stmt_field_count
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_insert_id (MYSQL_STMT *stmt)
	CompoundStatement:
		ReturnStatement:return stmt->insert_id;
			PtrMemberAccess:stmt->insert_id
				Identifier:stmt
				Identifier:insert_id
	ReturnType:my_ulonglong STDCALL
	Identifier:mysql_stmt_insert_id
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
IdentifierDeclStatement:null
	IdentifierDecl:int_is_null_true
		IdentifierDeclType:bool
		Identifier:int_is_null_true
IdentifierDeclStatement:null
	IdentifierDecl:int_is_null_false
		IdentifierDeclType:bool
		Identifier:int_is_null_false
FunctionDef:mysql_stmt_bind_param (MYSQL_STMT *stmt , MYSQL_BIND *my_bind)
	CompoundStatement:
		IdentifierDeclStatement:uint count = 0;
			IdentifierDecl:count = 0
				IdentifierDeclType:uint
				Identifier:count
				AssignmentExpression:count = 0
					Identifier:count
					Constant:0
		IdentifierDeclStatement:MYSQL_BIND *param, *end;
			IdentifierDecl:*param
				IdentifierDeclType:MYSQL_BIND *
				Identifier:param
			IdentifierDecl:*end
				IdentifierDeclType:MYSQL_BIND *
				Identifier:end
		ExpressionStatement:DBUG_ENTER("mysql_stmt_bind_param")
			CallExpression:DBUG_ENTER("mysql_stmt_bind_param")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_bind_param"
					Argument:"mysql_stmt_bind_param"
						Constant:"mysql_stmt_bind_param"
		IfStatement:if (!stmt->param_count)
			Condition:!stmt->param_count
				UnaryOperationExpression:!stmt->param_count
					UnaryOperator:!
					PtrMemberAccess:stmt->param_count
						Identifier:stmt
						Identifier:param_count
			CompoundStatement:
				IfStatement:if ((int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE)
					Condition:(int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE
						RelationalExpression:(int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE
							CastExpression:(int)stmt->state
								CastTarget:int
								PtrMemberAccess:stmt->state
									Identifier:stmt
									Identifier:state
							CastExpression:(int)MYSQL_STMT_PREPARE_DONE
								CastTarget:int
								Identifier:MYSQL_STMT_PREPARE_DONE
					CompoundStatement:
						ExpressionStatement:set_stmt_error(stmt, CR_NO_PREPARE_STMT, unknown_sqlstate, NULL)
							CallExpression:set_stmt_error(stmt, CR_NO_PREPARE_STMT, unknown_sqlstate, NULL)
								Callee:set_stmt_error
									Identifier:set_stmt_error
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:CR_NO_PREPARE_STMT
										Identifier:CR_NO_PREPARE_STMT
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
									Argument:NULL
										Identifier:NULL
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
				ExpressionStatement:DBUG_RETURN(0)
					CallExpression:DBUG_RETURN(0)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:0
							Argument:0
								Constant:0
		Statement:/* Allocated on prepare */
		ExpressionStatement:memcpy((char *)stmt->params, (char *)my_bind,         sizeof(MYSQL_BIND) * stmt->param_count)
			CallExpression:memcpy((char *)stmt->params, (char *)my_bind,         sizeof(MYSQL_BIND) * stmt->param_count)
				Callee:memcpy
					Identifier:memcpy
				ArgumentList:(char *)stmt->params
					Argument:(char *)stmt->params
						CastExpression:(char *)stmt->params
							CastTarget:char *
							PtrMemberAccess:stmt->params
								Identifier:stmt
								Identifier:params
					Argument:(char *)my_bind
						CastExpression:(char *)my_bind
							CastTarget:char *
							Identifier:my_bind
					Argument:sizeof(MYSQL_BIND) * stmt->param_count
						MultiplicativeExpression:sizeof(MYSQL_BIND) * stmt->param_count
							SizeofExpression:sizeof(MYSQL_BIND)
								Sizeof:sizeof
								Identifier:MYSQL_BIND
							PtrMemberAccess:stmt->param_count
								Identifier:stmt
								Identifier:param_count
		ForStatement:for (param = stmt->params, end = param + stmt->param_count; param < end;       param++)
			ForInit:param = stmt->params, end = param + stmt->param_count;
				Expression:param = stmt->params, end = param + stmt->param_count
					AssignmentExpression:param = stmt->params
						Identifier:param
						PtrMemberAccess:stmt->params
							Identifier:stmt
							Identifier:params
					AssignmentExpression:end = param + stmt->param_count
						Identifier:end
						AdditiveExpression:param + stmt->param_count
							Identifier:param
							PtrMemberAccess:stmt->param_count
								Identifier:stmt
								Identifier:param_count
			Condition:param < end
				RelationalExpression:param < end
					Identifier:param
					Identifier:end
			PostIncDecOperationExpression:param++
				Identifier:param
				IncDec:++
			CompoundStatement:
				ExpressionStatement:param->param_number = count++
					AssignmentExpression:param->param_number = count++
						PtrMemberAccess:param->param_number
							Identifier:param
							Identifier:param_number
						PostIncDecOperationExpression:count++
							Identifier:count
							IncDec:++
				ExpressionStatement:param->long_data_used = 0
					AssignmentExpression:param->long_data_used = 0
						PtrMemberAccess:param->long_data_used
							Identifier:param
							Identifier:long_data_used
						Constant:0
				Statement:/* If param->is_null is not set, then the value can never be NULL */
				IfStatement:if (!param->is_null)
					Condition:!param->is_null
						UnaryOperationExpression:!param->is_null
							UnaryOperator:!
							PtrMemberAccess:param->is_null
								Identifier:param
								Identifier:is_null
					ExpressionStatement:param->is_null = &int_is_null_false
						AssignmentExpression:param->is_null = &int_is_null_false
							PtrMemberAccess:param->is_null
								Identifier:param
								Identifier:is_null
							UnaryOperationExpression:&int_is_null_false
								UnaryOperator:&
								Identifier:int_is_null_false
				Statement:/* Setup data copy functions for the different supported types */
				SwitchStatement:switch (param->buffer_type)
					Condition:param->buffer_type
						PtrMemberAccess:param->buffer_type
							Identifier:param
							Identifier:buffer_type
					CompoundStatement:
						Label:case MYSQL_TYPE_NULL:
							Identifier:MYSQL_TYPE_NULL
						ExpressionStatement:param->is_null = &int_is_null_true
							AssignmentExpression:param->is_null = &int_is_null_true
								PtrMemberAccess:param->is_null
									Identifier:param
									Identifier:is_null
								UnaryOperationExpression:&int_is_null_true
									UnaryOperator:&
									Identifier:int_is_null_true
						BreakStatement:break;
						Label:case MYSQL_TYPE_TINY:
							Identifier:MYSQL_TYPE_TINY
						Statement:/* Force param->length as this is fixed for this type */
						ExpressionStatement:param->length = &param->buffer_length
							AssignmentExpression:param->length = &param->buffer_length
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
								UnaryOperationExpression:&param->buffer_length
									UnaryOperator:&
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
						ExpressionStatement:param->buffer_length = 1
							AssignmentExpression:param->buffer_length = 1
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Constant:1
						ExpressionStatement:param->store_param_func = store_param_tinyint
							AssignmentExpression:param->store_param_func = store_param_tinyint
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_tinyint
						BreakStatement:break;
						Label:case MYSQL_TYPE_SHORT:
							Identifier:MYSQL_TYPE_SHORT
						ExpressionStatement:param->length = &param->buffer_length
							AssignmentExpression:param->length = &param->buffer_length
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
								UnaryOperationExpression:&param->buffer_length
									UnaryOperator:&
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
						ExpressionStatement:param->buffer_length = 2
							AssignmentExpression:param->buffer_length = 2
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Constant:2
						ExpressionStatement:param->store_param_func = store_param_short
							AssignmentExpression:param->store_param_func = store_param_short
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_short
						BreakStatement:break;
						Label:case MYSQL_TYPE_LONG:
							Identifier:MYSQL_TYPE_LONG
						ExpressionStatement:param->length = &param->buffer_length
							AssignmentExpression:param->length = &param->buffer_length
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
								UnaryOperationExpression:&param->buffer_length
									UnaryOperator:&
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
						ExpressionStatement:param->buffer_length = 4
							AssignmentExpression:param->buffer_length = 4
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Constant:4
						ExpressionStatement:param->store_param_func = store_param_int32
							AssignmentExpression:param->store_param_func = store_param_int32
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_int32
						BreakStatement:break;
						Label:case MYSQL_TYPE_LONGLONG:
							Identifier:MYSQL_TYPE_LONGLONG
						ExpressionStatement:param->length = &param->buffer_length
							AssignmentExpression:param->length = &param->buffer_length
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
								UnaryOperationExpression:&param->buffer_length
									UnaryOperator:&
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
						ExpressionStatement:param->buffer_length = 8
							AssignmentExpression:param->buffer_length = 8
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Constant:8
						ExpressionStatement:param->store_param_func = store_param_int64
							AssignmentExpression:param->store_param_func = store_param_int64
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_int64
						BreakStatement:break;
						Label:case MYSQL_TYPE_FLOAT:
							Identifier:MYSQL_TYPE_FLOAT
						ExpressionStatement:param->length = &param->buffer_length
							AssignmentExpression:param->length = &param->buffer_length
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
								UnaryOperationExpression:&param->buffer_length
									UnaryOperator:&
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
						ExpressionStatement:param->buffer_length = 4
							AssignmentExpression:param->buffer_length = 4
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Constant:4
						ExpressionStatement:param->store_param_func = store_param_float
							AssignmentExpression:param->store_param_func = store_param_float
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_float
						BreakStatement:break;
						Label:case MYSQL_TYPE_DOUBLE:
							Identifier:MYSQL_TYPE_DOUBLE
						ExpressionStatement:param->length = &param->buffer_length
							AssignmentExpression:param->length = &param->buffer_length
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
								UnaryOperationExpression:&param->buffer_length
									UnaryOperator:&
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
						ExpressionStatement:param->buffer_length = 8
							AssignmentExpression:param->buffer_length = 8
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Constant:8
						ExpressionStatement:param->store_param_func = store_param_double
							AssignmentExpression:param->store_param_func = store_param_double
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_double
						BreakStatement:break;
						Label:case MYSQL_TYPE_TIME:
							Identifier:MYSQL_TYPE_TIME
						ExpressionStatement:param->store_param_func = store_param_time
							AssignmentExpression:param->store_param_func = store_param_time
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_time
						ExpressionStatement:param->buffer_length = MAX_TIME_REP_LENGTH
							AssignmentExpression:param->buffer_length = MAX_TIME_REP_LENGTH
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Identifier:MAX_TIME_REP_LENGTH
						BreakStatement:break;
						Label:case MYSQL_TYPE_DATE:
							Identifier:MYSQL_TYPE_DATE
						ExpressionStatement:param->store_param_func = store_param_date
							AssignmentExpression:param->store_param_func = store_param_date
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_date
						ExpressionStatement:param->buffer_length = MAX_DATE_REP_LENGTH
							AssignmentExpression:param->buffer_length = MAX_DATE_REP_LENGTH
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Identifier:MAX_DATE_REP_LENGTH
						BreakStatement:break;
						Label:case MYSQL_TYPE_DATETIME:
							Identifier:MYSQL_TYPE_DATETIME
						Label:case MYSQL_TYPE_TIMESTAMP:
							Identifier:MYSQL_TYPE_TIMESTAMP
						ExpressionStatement:param->store_param_func = store_param_datetime
							AssignmentExpression:param->store_param_func = store_param_datetime
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_datetime
						ExpressionStatement:param->buffer_length = MAX_DATETIME_REP_LENGTH
							AssignmentExpression:param->buffer_length = MAX_DATETIME_REP_LENGTH
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
								Identifier:MAX_DATETIME_REP_LENGTH
						BreakStatement:break;
						Label:case MYSQL_TYPE_TINY_BLOB:
							Identifier:MYSQL_TYPE_TINY_BLOB
						Label:case MYSQL_TYPE_MEDIUM_BLOB:
							Identifier:MYSQL_TYPE_MEDIUM_BLOB
						Label:case MYSQL_TYPE_LONG_BLOB:
							Identifier:MYSQL_TYPE_LONG_BLOB
						Label:case MYSQL_TYPE_BLOB:
							Identifier:MYSQL_TYPE_BLOB
						Label:case MYSQL_TYPE_VARCHAR:
							Identifier:MYSQL_TYPE_VARCHAR
						Label:case MYSQL_TYPE_VAR_STRING:
							Identifier:MYSQL_TYPE_VAR_STRING
						Label:case MYSQL_TYPE_STRING:
							Identifier:MYSQL_TYPE_STRING
						Label:case MYSQL_TYPE_DECIMAL:
							Identifier:MYSQL_TYPE_DECIMAL
						Label:case MYSQL_TYPE_NEWDECIMAL:
							Identifier:MYSQL_TYPE_NEWDECIMAL
						Label:case MYSQL_TYPE_JSON:
							Identifier:MYSQL_TYPE_JSON
						ExpressionStatement:param->store_param_func = store_param_str
							AssignmentExpression:param->store_param_func = store_param_str
								PtrMemberAccess:param->store_param_func
									Identifier:param
									Identifier:store_param_func
								Identifier:store_param_str
						Statement:/*          For variable length types user must set either length or          buffer_length.        */
						BreakStatement:break;
						Label:default:
							Identifier:default
						ExpressionStatement:my_stpcpy(stmt->sqlstate, unknown_sqlstate)
							CallExpression:my_stpcpy(stmt->sqlstate, unknown_sqlstate)
								Callee:my_stpcpy
									Identifier:my_stpcpy
								ArgumentList:stmt->sqlstate
									Argument:stmt->sqlstate
										PtrMemberAccess:stmt->sqlstate
											Identifier:stmt
											Identifier:sqlstate
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
						ExpressionStatement:sprintf(stmt->last_error,                ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE),                param->buffer_type, count)
							CallExpression:sprintf(stmt->last_error,                ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE),                param->buffer_type, count)
								Callee:sprintf
									Identifier:sprintf
								ArgumentList:stmt->last_error
									Argument:stmt->last_error
										PtrMemberAccess:stmt->last_error
											Identifier:stmt
											Identifier:last_error
									Argument:ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE)
										CallExpression:ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE)
											Callee:ER_CLIENT
												Identifier:ER_CLIENT
											ArgumentList:stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE
												Argument:stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE
													AssignmentExpression:stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE
														PtrMemberAccess:stmt->last_errno
															Identifier:stmt
															Identifier:last_errno
														Identifier:CR_UNSUPPORTED_PARAM_TYPE
									Argument:param->buffer_type
										PtrMemberAccess:param->buffer_type
											Identifier:param
											Identifier:buffer_type
									Argument:count
										Identifier:count
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
				Statement:/*      If param->length is not given, change it to point to buffer_length.      This way we can always use *param->length to get the length of data    */
				IfStatement:if (!param->length)
					Condition:!param->length
						UnaryOperationExpression:!param->length
							UnaryOperator:!
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
					ExpressionStatement:param->length = &param->buffer_length
						AssignmentExpression:param->length = &param->buffer_length
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
							UnaryOperationExpression:&param->buffer_length
								UnaryOperator:&
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
		Statement:/* We have to send/resend type information to MySQL */
		ExpressionStatement:stmt->send_types_to_server = true
			AssignmentExpression:stmt->send_types_to_server = true
				PtrMemberAccess:stmt->send_types_to_server
					Identifier:stmt
					Identifier:send_types_to_server
				Identifier:true
		ExpressionStatement:stmt->bind_param_done = true
			AssignmentExpression:stmt->bind_param_done = true
				PtrMemberAccess:stmt->bind_param_done
					Identifier:stmt
					Identifier:bind_param_done
				Identifier:true
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_bind_param
	ParameterList:MYSQL_STMT *stmt , MYSQL_BIND *my_bind
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:MYSQL_BIND *my_bind
			ParameterType:MYSQL_BIND *
			Identifier:my_bind
FunctionDef:mysql_stmt_send_long_data (MYSQL_STMT *stmt , uint param_number , const char *data , ulong length)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_BIND *param;
			IdentifierDecl:*param
				IdentifierDeclType:MYSQL_BIND *
				Identifier:param
		ExpressionStatement:DBUG_ENTER("mysql_stmt_send_long_data")
			CallExpression:DBUG_ENTER("mysql_stmt_send_long_data")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_send_long_data"
					Argument:"mysql_stmt_send_long_data"
						Constant:"mysql_stmt_send_long_data"
		ExpressionStatement:DBUG_ASSERT(stmt != 0)
			CallExpression:DBUG_ASSERT(stmt != 0)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:stmt != 0
					Argument:stmt != 0
						EqualityExpression:stmt != 0
							Identifier:stmt
							Constant:0
		ExpressionStatement:DBUG_PRINT("enter", ("param no: %d  data: %p, length : %ld", param_number,                       data, length))
			CallExpression:DBUG_PRINT("enter", ("param no: %d  data: %p, length : %ld", param_number,                       data, length))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"param no: %d  data: %p, length : %ld", param_number,                       data, length
						Expression:"param no: %d  data: %p, length : %ld", param_number,                       data, length
							Constant:"param no: %d  data: %p, length : %ld"
							Expression:param_number,                       data, length
								Identifier:param_number
								Expression:data, length
									Identifier:data
									Identifier:length
		Statement:/*    We only need to check for stmt->param_count, if it's not null    prepare was done.  */
		IfStatement:if (param_number >= stmt->param_count)
			Condition:param_number >= stmt->param_count
				RelationalExpression:param_number >= stmt->param_count
					Identifier:param_number
					PtrMemberAccess:stmt->param_count
						Identifier:stmt
						Identifier:param_count
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_INVALID_PARAMETER_NO, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_INVALID_PARAMETER_NO, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_INVALID_PARAMETER_NO
								Identifier:CR_INVALID_PARAMETER_NO
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		ExpressionStatement:param = stmt->params + param_number
			AssignmentExpression:param = stmt->params + param_number
				Identifier:param
				AdditiveExpression:stmt->params + param_number
					PtrMemberAccess:stmt->params
						Identifier:stmt
						Identifier:params
					Identifier:param_number
		IfStatement:if (!IS_LONGDATA(param->buffer_type))
			Condition:!IS_LONGDATA(param->buffer_type)
				UnaryOperationExpression:!IS_LONGDATA(param->buffer_type)
					UnaryOperator:!
					CallExpression:IS_LONGDATA(param->buffer_type)
						Callee:IS_LONGDATA
							Identifier:IS_LONGDATA
						ArgumentList:param->buffer_type
							Argument:param->buffer_type
								PtrMemberAccess:param->buffer_type
									Identifier:param
									Identifier:buffer_type
			CompoundStatement:
				Statement:/* Long data handling should be used only for string/binary types */
				ExpressionStatement:my_stpcpy(stmt->sqlstate, unknown_sqlstate)
					CallExpression:my_stpcpy(stmt->sqlstate, unknown_sqlstate)
						Callee:my_stpcpy
							Identifier:my_stpcpy
						ArgumentList:stmt->sqlstate
							Argument:stmt->sqlstate
								PtrMemberAccess:stmt->sqlstate
									Identifier:stmt
									Identifier:sqlstate
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				ExpressionStatement:sprintf(stmt->last_error,            ER_CLIENT(stmt->last_errno = CR_INVALID_BUFFER_USE),            param->param_number)
					CallExpression:sprintf(stmt->last_error,            ER_CLIENT(stmt->last_errno = CR_INVALID_BUFFER_USE),            param->param_number)
						Callee:sprintf
							Identifier:sprintf
						ArgumentList:stmt->last_error
							Argument:stmt->last_error
								PtrMemberAccess:stmt->last_error
									Identifier:stmt
									Identifier:last_error
							Argument:ER_CLIENT(stmt->last_errno = CR_INVALID_BUFFER_USE)
								CallExpression:ER_CLIENT(stmt->last_errno = CR_INVALID_BUFFER_USE)
									Callee:ER_CLIENT
										Identifier:ER_CLIENT
									ArgumentList:stmt->last_errno = CR_INVALID_BUFFER_USE
										Argument:stmt->last_errno = CR_INVALID_BUFFER_USE
											AssignmentExpression:stmt->last_errno = CR_INVALID_BUFFER_USE
												PtrMemberAccess:stmt->last_errno
													Identifier:stmt
													Identifier:last_errno
												Identifier:CR_INVALID_BUFFER_USE
							Argument:param->param_number
								PtrMemberAccess:param->param_number
									Identifier:param
									Identifier:param_number
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		Statement:/*    Send long data packet if there is data or we're sending long data    for the first time.  */
		IfStatement:if (length || param->long_data_used == 0)
			Condition:length || param->long_data_used == 0
				OrExpression:length || param->long_data_used == 0
					Identifier:length
					EqualityExpression:param->long_data_used == 0
						PtrMemberAccess:param->long_data_used
							Identifier:param
							Identifier:long_data_used
						Constant:0
			CompoundStatement:
				IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
					IdentifierDecl:*mysql = stmt->mysql
						IdentifierDeclType:MYSQL *
						Identifier:mysql
						AssignmentExpression:*mysql = stmt->mysql
							Identifier:mysql
							PtrMemberAccess:stmt->mysql
								Identifier:stmt
								Identifier:mysql
				Statement:/* Packet header: stmt id (4 bytes), param no (2 bytes) */
				IdentifierDeclStatement:uchar buff[MYSQL_LONG_DATA_HEADER];
					IdentifierDecl:buff[MYSQL_LONG_DATA_HEADER]
						IdentifierDeclType:uchar [ MYSQL_LONG_DATA_HEADER ]
						Identifier:buff
						Identifier:MYSQL_LONG_DATA_HEADER
				ExpressionStatement:int4store(buff, stmt->stmt_id)
					CallExpression:int4store(buff, stmt->stmt_id)
						Callee:int4store
							Identifier:int4store
						ArgumentList:buff
							Argument:buff
								Identifier:buff
							Argument:stmt->stmt_id
								PtrMemberAccess:stmt->stmt_id
									Identifier:stmt
									Identifier:stmt_id
				ExpressionStatement:int2store(buff + 4, param_number)
					CallExpression:int2store(buff + 4, param_number)
						Callee:int2store
							Identifier:int2store
						ArgumentList:buff + 4
							Argument:buff + 4
								AdditiveExpression:buff + 4
									Identifier:buff
									Constant:4
							Argument:param_number
								Identifier:param_number
				ExpressionStatement:param->long_data_used = 1
					AssignmentExpression:param->long_data_used = 1
						PtrMemberAccess:param->long_data_used
							Identifier:param
							Identifier:long_data_used
						Constant:1
				Statement:/*      Note that we don't get any ok packet from the server in this case      This is intentional to save bandwidth.    */
				IfStatement:if ((*mysql->methods->advanced_command)(mysql, COM_STMT_SEND_LONG_DATA,                                            buff, sizeof(buff), (uchar *)data,                                            length, 1, stmt))
					Condition:(*mysql->methods->advanced_command)(mysql, COM_STMT_SEND_LONG_DATA,                                            buff, sizeof(buff), (uchar *)data,                                            length, 1, stmt)
						CallExpression:(*mysql->methods->advanced_command)(mysql, COM_STMT_SEND_LONG_DATA,                                            buff, sizeof(buff), (uchar *)data,                                            length, 1, stmt)
							Callee:*mysql->methods->advanced_command
								UnaryOperationExpression:*mysql->methods->advanced_command
									UnaryOperator:*
									PtrMemberAccess:mysql->methods->advanced_command
										PtrMemberAccess:mysql->methods
											Identifier:mysql
											Identifier:methods
										Identifier:advanced_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_STMT_SEND_LONG_DATA
									Identifier:COM_STMT_SEND_LONG_DATA
								Argument:buff
									Identifier:buff
								Argument:sizeof(buff)
									SizeofExpression:sizeof(buff)
										Sizeof:sizeof
										Identifier:buff
								Argument:(uchar *)data
									CastExpression:(uchar *)data
										CastTarget:uchar *
										Identifier:data
								Argument:length
									Identifier:length
								Argument:1
									Constant:1
								Argument:stmt
									Identifier:stmt
					CompoundStatement:
						Statement:/*        Don't set stmt error if stmt->mysql is NULL, as the error in this case        has already been set by mysql_prune_stmt_list().      */
						IfStatement:if (stmt->mysql)
							Condition:stmt->mysql
								PtrMemberAccess:stmt->mysql
									Identifier:stmt
									Identifier:mysql
							ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
								CallExpression:set_stmt_errmsg(stmt, &mysql->net)
									Callee:set_stmt_errmsg
										Identifier:set_stmt_errmsg
									ArgumentList:stmt
										Argument:stmt
											Identifier:stmt
										Argument:&mysql->net
											UnaryOperationExpression:&mysql->net
												UnaryOperator:&
												PtrMemberAccess:mysql->net
													Identifier:mysql
													Identifier:net
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_send_long_data
	ParameterList:MYSQL_STMT *stmt , uint param_number , const char *data , ulong length
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:uint param_number
			ParameterType:uint
			Identifier:param_number
		Parameter:const char *data
			ParameterType:const char *
			Identifier:data
		Parameter:ulong length
			ParameterType:ulong
			Identifier:length
FunctionDef:read_binary_time (MYSQL_TIME *tm , uchar **pos)
	CompoundStatement:
		Statement:/* net_field_length will set pos to the first byte of data */
		IdentifierDeclStatement:uint length = net_field_length(pos);
			IdentifierDecl:length = net_field_length(pos)
				IdentifierDeclType:uint
				Identifier:length
				AssignmentExpression:length = net_field_length(pos)
					Identifier:length
					CallExpression:net_field_length(pos)
						Callee:net_field_length
							Identifier:net_field_length
						ArgumentList:pos
							Argument:pos
								Identifier:pos
		IfStatement:if (length)
			Condition:length
				Identifier:length
			CompoundStatement:
				IdentifierDeclStatement:uchar *to = *pos;
					IdentifierDecl:*to = *pos
						IdentifierDeclType:uchar *
						Identifier:to
						AssignmentExpression:*to = *pos
							Identifier:to
							UnaryOperationExpression:*pos
								UnaryOperator:*
								Identifier:pos
				ExpressionStatement:tm->neg = to[0]
					AssignmentExpression:tm->neg = to[0]
						PtrMemberAccess:tm->neg
							Identifier:tm
							Identifier:neg
						ArrayIndexing:to[0]
							Identifier:to
							Constant:0
				ExpressionStatement:tm->day = (ulong)sint4korr(to + 1)
					AssignmentExpression:tm->day = (ulong)sint4korr(to + 1)
						PtrMemberAccess:tm->day
							Identifier:tm
							Identifier:day
						CastExpression:(ulong)sint4korr(to + 1)
							CastTarget:ulong
							CallExpression:sint4korr(to + 1)
								Callee:sint4korr
									Identifier:sint4korr
								ArgumentList:to + 1
									Argument:to + 1
										AdditiveExpression:to + 1
											Identifier:to
											Constant:1
				ExpressionStatement:tm->hour = (uint)to[5]
					AssignmentExpression:tm->hour = (uint)to[5]
						PtrMemberAccess:tm->hour
							Identifier:tm
							Identifier:hour
						CastExpression:(uint)to[5]
							CastTarget:uint
							ArrayIndexing:to[5]
								Identifier:to
								Constant:5
				ExpressionStatement:tm->minute = (uint)to[6]
					AssignmentExpression:tm->minute = (uint)to[6]
						PtrMemberAccess:tm->minute
							Identifier:tm
							Identifier:minute
						CastExpression:(uint)to[6]
							CastTarget:uint
							ArrayIndexing:to[6]
								Identifier:to
								Constant:6
				ExpressionStatement:tm->second = (uint)to[7]
					AssignmentExpression:tm->second = (uint)to[7]
						PtrMemberAccess:tm->second
							Identifier:tm
							Identifier:second
						CastExpression:(uint)to[7]
							CastTarget:uint
							ArrayIndexing:to[7]
								Identifier:to
								Constant:7
				ExpressionStatement:tm->second_part = (length > 8) ? (ulong)sint4korr(to + 8) : 0
					AssignmentExpression:tm->second_part = (length > 8) ? (ulong)sint4korr(to + 8) : 0
						PtrMemberAccess:tm->second_part
							Identifier:tm
							Identifier:second_part
						ConditionalExpression:(length > 8) ? (ulong)sint4korr(to + 8) : 0
							Condition:length > 8
								RelationalExpression:length > 8
									Identifier:length
									Constant:8
							CastExpression:(ulong)sint4korr(to + 8)
								CastTarget:ulong
								CallExpression:sint4korr(to + 8)
									Callee:sint4korr
										Identifier:sint4korr
									ArgumentList:to + 8
										Argument:to + 8
											AdditiveExpression:to + 8
												Identifier:to
												Constant:8
							Constant:0
				ExpressionStatement:tm->year = tm->month = 0
					AssignmentExpression:tm->year = tm->month = 0
						PtrMemberAccess:tm->year
							Identifier:tm
							Identifier:year
						AssignmentExpression:tm->month = 0
							PtrMemberAccess:tm->month
								Identifier:tm
								Identifier:month
							Constant:0
				IfStatement:if (tm->day)
					Condition:tm->day
						PtrMemberAccess:tm->day
							Identifier:tm
							Identifier:day
					CompoundStatement:
						Statement:/* Convert days to hours at once */
						ExpressionStatement:tm->hour += tm->day * 24
							AssignmentExpression:tm->hour += tm->day * 24
								PtrMemberAccess:tm->hour
									Identifier:tm
									Identifier:hour
								MultiplicativeExpression:tm->day * 24
									PtrMemberAccess:tm->day
										Identifier:tm
										Identifier:day
									Constant:24
						ExpressionStatement:tm->day = 0
							AssignmentExpression:tm->day = 0
								PtrMemberAccess:tm->day
									Identifier:tm
									Identifier:day
								Constant:0
				ExpressionStatement:tm->time_type = MYSQL_TIMESTAMP_TIME
					AssignmentExpression:tm->time_type = MYSQL_TIMESTAMP_TIME
						PtrMemberAccess:tm->time_type
							Identifier:tm
							Identifier:time_type
						Identifier:MYSQL_TIMESTAMP_TIME
				ExpressionStatement:*pos += length
					AssignmentExpression:*pos += length
						UnaryOperationExpression:*pos
							UnaryOperator:*
							Identifier:pos
						Identifier:length
	ReturnType:static void
	Identifier:read_binary_time
	ParameterList:MYSQL_TIME *tm , uchar **pos
		Parameter:MYSQL_TIME *tm
			ParameterType:MYSQL_TIME *
			Identifier:tm
		Parameter:uchar **pos
			ParameterType:uchar * *
			Identifier:pos
FunctionDef:read_binary_datetime (MYSQL_TIME *tm , uchar **pos)
	CompoundStatement:
		IdentifierDeclStatement:uint length = net_field_length(pos);
			IdentifierDecl:length = net_field_length(pos)
				IdentifierDeclType:uint
				Identifier:length
				AssignmentExpression:length = net_field_length(pos)
					Identifier:length
					CallExpression:net_field_length(pos)
						Callee:net_field_length
							Identifier:net_field_length
						ArgumentList:pos
							Argument:pos
								Identifier:pos
		IfStatement:if (length)
			Condition:length
				Identifier:length
			CompoundStatement:
				IdentifierDeclStatement:uchar *to = *pos;
					IdentifierDecl:*to = *pos
						IdentifierDeclType:uchar *
						Identifier:to
						AssignmentExpression:*to = *pos
							Identifier:to
							UnaryOperationExpression:*pos
								UnaryOperator:*
								Identifier:pos
				ExpressionStatement:tm->neg = 0
					AssignmentExpression:tm->neg = 0
						PtrMemberAccess:tm->neg
							Identifier:tm
							Identifier:neg
						Constant:0
				ExpressionStatement:tm->year = (uint)sint2korr(to)
					AssignmentExpression:tm->year = (uint)sint2korr(to)
						PtrMemberAccess:tm->year
							Identifier:tm
							Identifier:year
						CastExpression:(uint)sint2korr(to)
							CastTarget:uint
							CallExpression:sint2korr(to)
								Callee:sint2korr
									Identifier:sint2korr
								ArgumentList:to
									Argument:to
										Identifier:to
				ExpressionStatement:tm->month = (uint)to[2]
					AssignmentExpression:tm->month = (uint)to[2]
						PtrMemberAccess:tm->month
							Identifier:tm
							Identifier:month
						CastExpression:(uint)to[2]
							CastTarget:uint
							ArrayIndexing:to[2]
								Identifier:to
								Constant:2
				ExpressionStatement:tm->day = (uint)to[3]
					AssignmentExpression:tm->day = (uint)to[3]
						PtrMemberAccess:tm->day
							Identifier:tm
							Identifier:day
						CastExpression:(uint)to[3]
							CastTarget:uint
							ArrayIndexing:to[3]
								Identifier:to
								Constant:3
				IfStatement:if (length > 4)
					Condition:length > 4
						RelationalExpression:length > 4
							Identifier:length
							Constant:4
					CompoundStatement:
						ExpressionStatement:tm->hour = (uint)to[4]
							AssignmentExpression:tm->hour = (uint)to[4]
								PtrMemberAccess:tm->hour
									Identifier:tm
									Identifier:hour
								CastExpression:(uint)to[4]
									CastTarget:uint
									ArrayIndexing:to[4]
										Identifier:to
										Constant:4
						ExpressionStatement:tm->minute = (uint)to[5]
							AssignmentExpression:tm->minute = (uint)to[5]
								PtrMemberAccess:tm->minute
									Identifier:tm
									Identifier:minute
								CastExpression:(uint)to[5]
									CastTarget:uint
									ArrayIndexing:to[5]
										Identifier:to
										Constant:5
						ExpressionStatement:tm->second = (uint)to[6]
							AssignmentExpression:tm->second = (uint)to[6]
								PtrMemberAccess:tm->second
									Identifier:tm
									Identifier:second
								CastExpression:(uint)to[6]
									CastTarget:uint
									ArrayIndexing:to[6]
										Identifier:to
										Constant:6
				ExpressionStatement:tm->second_part = (length > 7) ? (ulong)sint4korr(to + 7) : 0
					AssignmentExpression:tm->second_part = (length > 7) ? (ulong)sint4korr(to + 7) : 0
						PtrMemberAccess:tm->second_part
							Identifier:tm
							Identifier:second_part
						ConditionalExpression:(length > 7) ? (ulong)sint4korr(to + 7) : 0
							Condition:length > 7
								RelationalExpression:length > 7
									Identifier:length
									Constant:7
							CastExpression:(ulong)sint4korr(to + 7)
								CastTarget:ulong
								CallExpression:sint4korr(to + 7)
									Callee:sint4korr
										Identifier:sint4korr
									ArgumentList:to + 7
										Argument:to + 7
											AdditiveExpression:to + 7
												Identifier:to
												Constant:7
							Constant:0
				ExpressionStatement:tm->time_type = MYSQL_TIMESTAMP_DATETIME
					AssignmentExpression:tm->time_type = MYSQL_TIMESTAMP_DATETIME
						PtrMemberAccess:tm->time_type
							Identifier:tm
							Identifier:time_type
						Identifier:MYSQL_TIMESTAMP_DATETIME
				ExpressionStatement:*pos += length
					AssignmentExpression:*pos += length
						UnaryOperationExpression:*pos
							UnaryOperator:*
							Identifier:pos
						Identifier:length
	ReturnType:static void
	Identifier:read_binary_datetime
	ParameterList:MYSQL_TIME *tm , uchar **pos
		Parameter:MYSQL_TIME *tm
			ParameterType:MYSQL_TIME *
			Identifier:tm
		Parameter:uchar **pos
			ParameterType:uchar * *
			Identifier:pos
FunctionDef:read_binary_date (MYSQL_TIME *tm , uchar **pos)
	CompoundStatement:
		IdentifierDeclStatement:uint length = net_field_length(pos);
			IdentifierDecl:length = net_field_length(pos)
				IdentifierDeclType:uint
				Identifier:length
				AssignmentExpression:length = net_field_length(pos)
					Identifier:length
					CallExpression:net_field_length(pos)
						Callee:net_field_length
							Identifier:net_field_length
						ArgumentList:pos
							Argument:pos
								Identifier:pos
		IfStatement:if (length)
			Condition:length
				Identifier:length
			CompoundStatement:
				IdentifierDeclStatement:uchar *to = *pos;
					IdentifierDecl:*to = *pos
						IdentifierDeclType:uchar *
						Identifier:to
						AssignmentExpression:*to = *pos
							Identifier:to
							UnaryOperationExpression:*pos
								UnaryOperator:*
								Identifier:pos
				ExpressionStatement:tm->year = (uint)sint2korr(to)
					AssignmentExpression:tm->year = (uint)sint2korr(to)
						PtrMemberAccess:tm->year
							Identifier:tm
							Identifier:year
						CastExpression:(uint)sint2korr(to)
							CastTarget:uint
							CallExpression:sint2korr(to)
								Callee:sint2korr
									Identifier:sint2korr
								ArgumentList:to
									Argument:to
										Identifier:to
				ExpressionStatement:tm->month = (uint)to[2]
					AssignmentExpression:tm->month = (uint)to[2]
						PtrMemberAccess:tm->month
							Identifier:tm
							Identifier:month
						CastExpression:(uint)to[2]
							CastTarget:uint
							ArrayIndexing:to[2]
								Identifier:to
								Constant:2
				ExpressionStatement:tm->day = (uint)to[3]
					AssignmentExpression:tm->day = (uint)to[3]
						PtrMemberAccess:tm->day
							Identifier:tm
							Identifier:day
						CastExpression:(uint)to[3]
							CastTarget:uint
							ArrayIndexing:to[3]
								Identifier:to
								Constant:3
				ExpressionStatement:tm->hour = tm->minute = tm->second = 0
					AssignmentExpression:tm->hour = tm->minute = tm->second = 0
						PtrMemberAccess:tm->hour
							Identifier:tm
							Identifier:hour
						AssignmentExpression:tm->minute = tm->second = 0
							PtrMemberAccess:tm->minute
								Identifier:tm
								Identifier:minute
							AssignmentExpression:tm->second = 0
								PtrMemberAccess:tm->second
									Identifier:tm
									Identifier:second
								Constant:0
				ExpressionStatement:tm->second_part = 0
					AssignmentExpression:tm->second_part = 0
						PtrMemberAccess:tm->second_part
							Identifier:tm
							Identifier:second_part
						Constant:0
				ExpressionStatement:tm->neg = 0
					AssignmentExpression:tm->neg = 0
						PtrMemberAccess:tm->neg
							Identifier:tm
							Identifier:neg
						Constant:0
				ExpressionStatement:tm->time_type = MYSQL_TIMESTAMP_DATE
					AssignmentExpression:tm->time_type = MYSQL_TIMESTAMP_DATE
						PtrMemberAccess:tm->time_type
							Identifier:tm
							Identifier:time_type
						Identifier:MYSQL_TIMESTAMP_DATE
				ExpressionStatement:*pos += length
					AssignmentExpression:*pos += length
						UnaryOperationExpression:*pos
							UnaryOperator:*
							Identifier:pos
						Identifier:length
	ReturnType:static void
	Identifier:read_binary_date
	ParameterList:MYSQL_TIME *tm , uchar **pos
		Parameter:MYSQL_TIME *tm
			ParameterType:MYSQL_TIME *
			Identifier:tm
		Parameter:uchar **pos
			ParameterType:uchar * *
			Identifier:pos
FunctionDef:fetch_string_with_conversion (MYSQL_BIND *param , char *value , size_t length)
	CompoundStatement:
		Statement:uchar
		Statement:*
		Statement:buffer
		Statement:=
		Statement:pointer_cast
		Statement:<
		Statement:uchar
		Statement:*
		Statement:>
		ExpressionStatement:param->buffer
			PtrMemberAccess:param->buffer
				Identifier:param
				Identifier:buffer
		IdentifierDeclStatement:const char *endptr = value + length;
			IdentifierDecl:*endptr = value + length
				IdentifierDeclType:const char *
				Identifier:endptr
				AssignmentExpression:*endptr = value + length
					Identifier:endptr
					AdditiveExpression:value + length
						Identifier:value
						Identifier:length
		Statement:/*    This function should support all target buffer types: the rest    of conversion functions can delegate conversion to it.  */
		SwitchStatement:switch (param->buffer_type)
			Condition:param->buffer_type
				PtrMemberAccess:param->buffer_type
					Identifier:param
					Identifier:buffer_type
			CompoundStatement:
				Label:case MYSQL_TYPE_NULL:
					Identifier:MYSQL_TYPE_NULL
				Statement:/* do nothing */
				BreakStatement:break;
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				CompoundStatement:
					IdentifierDeclStatement:int err;
						IdentifierDecl:err
							IdentifierDeclType:int
							Identifier:err
					IdentifierDeclStatement:longlong data = my_strtoll10(value, &endptr, &err);
						IdentifierDecl:data = my_strtoll10(value, &endptr, &err)
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data = my_strtoll10(value, &endptr, &err)
								Identifier:data
								CallExpression:my_strtoll10(value, &endptr, &err)
									Callee:my_strtoll10
										Identifier:my_strtoll10
									ArgumentList:value
										Argument:value
											Identifier:value
										Argument:&endptr
											UnaryOperationExpression:&endptr
												UnaryOperator:&
												Identifier:endptr
										Argument:&err
											UnaryOperationExpression:&err
												UnaryOperator:&
												Identifier:err
					ExpressionStatement:*param->error = (IS_TRUNCATED(data, param->is_unsigned, INT_MIN8,                                    INT_MAX8, UINT_MAX8) ||                       err > 0)
						AssignmentExpression:*param->error = (IS_TRUNCATED(data, param->is_unsigned, INT_MIN8,                                    INT_MAX8, UINT_MAX8) ||                       err > 0)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							OrExpression:IS_TRUNCATED(data, param->is_unsigned, INT_MIN8,                                    INT_MAX8, UINT_MAX8) ||                       err > 0
								CallExpression:IS_TRUNCATED(data, param->is_unsigned, INT_MIN8,                                    INT_MAX8, UINT_MAX8)
									Callee:IS_TRUNCATED
										Identifier:IS_TRUNCATED
									ArgumentList:data
										Argument:data
											Identifier:data
										Argument:param->is_unsigned
											PtrMemberAccess:param->is_unsigned
												Identifier:param
												Identifier:is_unsigned
										Argument:INT_MIN8
											Identifier:INT_MIN8
										Argument:INT_MAX8
											Identifier:INT_MAX8
										Argument:UINT_MAX8
											Identifier:UINT_MAX8
								RelationalExpression:err > 0
									Identifier:err
									Constant:0
					ExpressionStatement:*buffer = (uchar)data
						AssignmentExpression:*buffer = (uchar)data
							UnaryOperationExpression:*buffer
								UnaryOperator:*
								Identifier:buffer
							CastExpression:(uchar)data
								CastTarget:uchar
								Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				CompoundStatement:
					IdentifierDeclStatement:int err;
						IdentifierDecl:err
							IdentifierDeclType:int
							Identifier:err
					IdentifierDeclStatement:longlong data = my_strtoll10(value, &endptr, &err);
						IdentifierDecl:data = my_strtoll10(value, &endptr, &err)
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data = my_strtoll10(value, &endptr, &err)
								Identifier:data
								CallExpression:my_strtoll10(value, &endptr, &err)
									Callee:my_strtoll10
										Identifier:my_strtoll10
									ArgumentList:value
										Argument:value
											Identifier:value
										Argument:&endptr
											UnaryOperationExpression:&endptr
												UnaryOperator:&
												Identifier:endptr
										Argument:&err
											UnaryOperationExpression:&err
												UnaryOperator:&
												Identifier:err
					ExpressionStatement:*param->error = (IS_TRUNCATED(data, param->is_unsigned, INT_MIN16,                                    INT_MAX16, UINT_MAX16) ||                       err > 0)
						AssignmentExpression:*param->error = (IS_TRUNCATED(data, param->is_unsigned, INT_MIN16,                                    INT_MAX16, UINT_MAX16) ||                       err > 0)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							OrExpression:IS_TRUNCATED(data, param->is_unsigned, INT_MIN16,                                    INT_MAX16, UINT_MAX16) ||                       err > 0
								CallExpression:IS_TRUNCATED(data, param->is_unsigned, INT_MIN16,                                    INT_MAX16, UINT_MAX16)
									Callee:IS_TRUNCATED
										Identifier:IS_TRUNCATED
									ArgumentList:data
										Argument:data
											Identifier:data
										Argument:param->is_unsigned
											PtrMemberAccess:param->is_unsigned
												Identifier:param
												Identifier:is_unsigned
										Argument:INT_MIN16
											Identifier:INT_MIN16
										Argument:INT_MAX16
											Identifier:INT_MAX16
										Argument:UINT_MAX16
											Identifier:UINT_MAX16
								RelationalExpression:err > 0
									Identifier:err
									Constant:0
					ExpressionStatement:shortstore(buffer, (short)data)
						CallExpression:shortstore(buffer, (short)data)
							Callee:shortstore
								Identifier:shortstore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:(short)data
									CastExpression:(short)data
										CastTarget:short
										Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				CompoundStatement:
					IdentifierDeclStatement:int err;
						IdentifierDecl:err
							IdentifierDeclType:int
							Identifier:err
					IdentifierDeclStatement:longlong data = my_strtoll10(value, &endptr, &err);
						IdentifierDecl:data = my_strtoll10(value, &endptr, &err)
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data = my_strtoll10(value, &endptr, &err)
								Identifier:data
								CallExpression:my_strtoll10(value, &endptr, &err)
									Callee:my_strtoll10
										Identifier:my_strtoll10
									ArgumentList:value
										Argument:value
											Identifier:value
										Argument:&endptr
											UnaryOperationExpression:&endptr
												UnaryOperator:&
												Identifier:endptr
										Argument:&err
											UnaryOperationExpression:&err
												UnaryOperator:&
												Identifier:err
					ExpressionStatement:*param->error = (IS_TRUNCATED(data, param->is_unsigned, INT_MIN32,                                    INT_MAX32, UINT_MAX32) ||                       err > 0)
						AssignmentExpression:*param->error = (IS_TRUNCATED(data, param->is_unsigned, INT_MIN32,                                    INT_MAX32, UINT_MAX32) ||                       err > 0)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							OrExpression:IS_TRUNCATED(data, param->is_unsigned, INT_MIN32,                                    INT_MAX32, UINT_MAX32) ||                       err > 0
								CallExpression:IS_TRUNCATED(data, param->is_unsigned, INT_MIN32,                                    INT_MAX32, UINT_MAX32)
									Callee:IS_TRUNCATED
										Identifier:IS_TRUNCATED
									ArgumentList:data
										Argument:data
											Identifier:data
										Argument:param->is_unsigned
											PtrMemberAccess:param->is_unsigned
												Identifier:param
												Identifier:is_unsigned
										Argument:INT_MIN32
											Identifier:INT_MIN32
										Argument:INT_MAX32
											Identifier:INT_MAX32
										Argument:UINT_MAX32
											Identifier:UINT_MAX32
								RelationalExpression:err > 0
									Identifier:err
									Constant:0
					ExpressionStatement:longstore(buffer, (int32)data)
						CallExpression:longstore(buffer, (int32)data)
							Callee:longstore
								Identifier:longstore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:(int32)data
									CastExpression:(int32)data
										CastTarget:int32
										Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				CompoundStatement:
					IdentifierDeclStatement:int err;
						IdentifierDecl:err
							IdentifierDeclType:int
							Identifier:err
					IdentifierDeclStatement:longlong data = my_strtoll10(value, &endptr, &err);
						IdentifierDecl:data = my_strtoll10(value, &endptr, &err)
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data = my_strtoll10(value, &endptr, &err)
								Identifier:data
								CallExpression:my_strtoll10(value, &endptr, &err)
									Callee:my_strtoll10
										Identifier:my_strtoll10
									ArgumentList:value
										Argument:value
											Identifier:value
										Argument:&endptr
											UnaryOperationExpression:&endptr
												UnaryOperator:&
												Identifier:endptr
										Argument:&err
											UnaryOperationExpression:&err
												UnaryOperator:&
												Identifier:err
					ExpressionStatement:*param->error =          param->is_unsigned ? err != 0 : (err > 0 || (err == 0 && data < 0))
						AssignmentExpression:*param->error =          param->is_unsigned ? err != 0 : (err > 0 || (err == 0 && data < 0))
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							ConditionalExpression:param->is_unsigned ? err != 0 : (err > 0 || (err == 0 && data < 0))
								Condition:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								EqualityExpression:err != 0
									Identifier:err
									Constant:0
								OrExpression:err > 0 || (err == 0 && data < 0)
									RelationalExpression:err > 0
										Identifier:err
										Constant:0
									AndExpression:err == 0 && data < 0
										EqualityExpression:err == 0
											Identifier:err
											Constant:0
										RelationalExpression:data < 0
											Identifier:data
											Constant:0
					ExpressionStatement:longlongstore(buffer, data)
						CallExpression:longlongstore(buffer, data)
							Callee:longlongstore
								Identifier:longlongstore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:data
									Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				CompoundStatement:
					IdentifierDeclStatement:int err;
						IdentifierDecl:err
							IdentifierDeclType:int
							Identifier:err
					IdentifierDeclStatement:double data =          my_strntod(&my_charset_latin1, value, length, &endptr, &err);
						IdentifierDecl:data =          my_strntod(&my_charset_latin1, value, length, &endptr, &err)
							IdentifierDeclType:double
							Identifier:data
							AssignmentExpression:data =          my_strntod(&my_charset_latin1, value, length, &endptr, &err)
								Identifier:data
								CallExpression:my_strntod(&my_charset_latin1, value, length, &endptr, &err)
									Callee:my_strntod
										Identifier:my_strntod
									ArgumentList:&my_charset_latin1
										Argument:&my_charset_latin1
											UnaryOperationExpression:&my_charset_latin1
												UnaryOperator:&
												Identifier:my_charset_latin1
										Argument:value
											Identifier:value
										Argument:length
											Identifier:length
										Argument:&endptr
											UnaryOperationExpression:&endptr
												UnaryOperator:&
												Identifier:endptr
										Argument:&err
											UnaryOperationExpression:&err
												UnaryOperator:&
												Identifier:err
					IdentifierDeclStatement:float fdata = (float)data;
						IdentifierDecl:fdata = (float)data
							IdentifierDeclType:float
							Identifier:fdata
							AssignmentExpression:fdata = (float)data
								Identifier:fdata
								CastExpression:(float)data
									CastTarget:float
									Identifier:data
					ExpressionStatement:*param->error = (fdata != data) | MY_TEST(err)
						AssignmentExpression:*param->error = (fdata != data) | MY_TEST(err)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							InclusiveOrExpression:(fdata != data) | MY_TEST(err)
								EqualityExpression:fdata != data
									Identifier:fdata
									Identifier:data
								CallExpression:MY_TEST(err)
									Callee:MY_TEST
										Identifier:MY_TEST
									ArgumentList:err
										Argument:err
											Identifier:err
					ExpressionStatement:floatstore(buffer, fdata)
						CallExpression:floatstore(buffer, fdata)
							Callee:floatstore
								Identifier:floatstore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:fdata
									Identifier:fdata
					BreakStatement:break;
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				CompoundStatement:
					IdentifierDeclStatement:int err;
						IdentifierDecl:err
							IdentifierDeclType:int
							Identifier:err
					IdentifierDeclStatement:double data =          my_strntod(&my_charset_latin1, value, length, &endptr, &err);
						IdentifierDecl:data =          my_strntod(&my_charset_latin1, value, length, &endptr, &err)
							IdentifierDeclType:double
							Identifier:data
							AssignmentExpression:data =          my_strntod(&my_charset_latin1, value, length, &endptr, &err)
								Identifier:data
								CallExpression:my_strntod(&my_charset_latin1, value, length, &endptr, &err)
									Callee:my_strntod
										Identifier:my_strntod
									ArgumentList:&my_charset_latin1
										Argument:&my_charset_latin1
											UnaryOperationExpression:&my_charset_latin1
												UnaryOperator:&
												Identifier:my_charset_latin1
										Argument:value
											Identifier:value
										Argument:length
											Identifier:length
										Argument:&endptr
											UnaryOperationExpression:&endptr
												UnaryOperator:&
												Identifier:endptr
										Argument:&err
											UnaryOperationExpression:&err
												UnaryOperator:&
												Identifier:err
					ExpressionStatement:*param->error = MY_TEST(err)
						AssignmentExpression:*param->error = MY_TEST(err)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							CallExpression:MY_TEST(err)
								Callee:MY_TEST
									Identifier:MY_TEST
								ArgumentList:err
									Argument:err
										Identifier:err
					ExpressionStatement:doublestore(buffer, data)
						CallExpression:doublestore(buffer, data)
							Callee:doublestore
								Identifier:doublestore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:data
									Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_TIME:
					Identifier:MYSQL_TYPE_TIME
				CompoundStatement:
					IdentifierDeclStatement:MYSQL_TIME_STATUS status;
						IdentifierDecl:status
							IdentifierDeclType:MYSQL_TIME_STATUS
							Identifier:status
					IdentifierDeclStatement:MYSQL_TIME *tm = (MYSQL_TIME *)buffer;
						IdentifierDecl:*tm = (MYSQL_TIME *)buffer
							IdentifierDeclType:MYSQL_TIME *
							Identifier:tm
							AssignmentExpression:*tm = (MYSQL_TIME *)buffer
								Identifier:tm
								CastExpression:(MYSQL_TIME *)buffer
									CastTarget:MYSQL_TIME *
									Identifier:buffer
					ExpressionStatement:str_to_time(value, length, tm, &status)
						CallExpression:str_to_time(value, length, tm, &status)
							Callee:str_to_time
								Identifier:str_to_time
							ArgumentList:value
								Argument:value
									Identifier:value
								Argument:length
									Identifier:length
								Argument:tm
									Identifier:tm
								Argument:&status
									UnaryOperationExpression:&status
										UnaryOperator:&
										Identifier:status
					ExpressionStatement:*param->error = MY_TEST(status.warnings)
						AssignmentExpression:*param->error = MY_TEST(status.warnings)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							CallExpression:MY_TEST(status.warnings)
								Callee:MY_TEST
									Identifier:MY_TEST
								ArgumentList:status.warnings
									Argument:status.warnings
										MemberAccess:status.warnings
											Identifier:status
											Identifier:warnings
					BreakStatement:break;
				Label:case MYSQL_TYPE_DATE:
					Identifier:MYSQL_TYPE_DATE
				Label:case MYSQL_TYPE_DATETIME:
					Identifier:MYSQL_TYPE_DATETIME
				Label:case MYSQL_TYPE_TIMESTAMP:
					Identifier:MYSQL_TYPE_TIMESTAMP
				CompoundStatement:
					IdentifierDeclStatement:MYSQL_TIME_STATUS status;
						IdentifierDecl:status
							IdentifierDeclType:MYSQL_TIME_STATUS
							Identifier:status
					IdentifierDeclStatement:MYSQL_TIME *tm = (MYSQL_TIME *)buffer;
						IdentifierDecl:*tm = (MYSQL_TIME *)buffer
							IdentifierDeclType:MYSQL_TIME *
							Identifier:tm
							AssignmentExpression:*tm = (MYSQL_TIME *)buffer
								Identifier:tm
								CastExpression:(MYSQL_TIME *)buffer
									CastTarget:MYSQL_TIME *
									Identifier:buffer
					ExpressionStatement:(void)str_to_datetime(value, length, tm, TIME_FUZZY_DATE, &status)
						CastExpression:(void)str_to_datetime(value, length, tm, TIME_FUZZY_DATE, &status)
							CastTarget:void
							CallExpression:str_to_datetime(value, length, tm, TIME_FUZZY_DATE, &status)
								Callee:str_to_datetime
									Identifier:str_to_datetime
								ArgumentList:value
									Argument:value
										Identifier:value
									Argument:length
										Identifier:length
									Argument:tm
										Identifier:tm
									Argument:TIME_FUZZY_DATE
										Identifier:TIME_FUZZY_DATE
									Argument:&status
										UnaryOperationExpression:&status
											UnaryOperator:&
											Identifier:status
					ExpressionStatement:*param->error =          MY_TEST(status.warnings) && (param->buffer_type == MYSQL_TYPE_DATE &&                                       tm->time_type != MYSQL_TIMESTAMP_DATE)
						AssignmentExpression:*param->error =          MY_TEST(status.warnings) && (param->buffer_type == MYSQL_TYPE_DATE &&                                       tm->time_type != MYSQL_TIMESTAMP_DATE)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							AndExpression:MY_TEST(status.warnings) && (param->buffer_type == MYSQL_TYPE_DATE &&                                       tm->time_type != MYSQL_TIMESTAMP_DATE)
								CallExpression:MY_TEST(status.warnings)
									Callee:MY_TEST
										Identifier:MY_TEST
									ArgumentList:status.warnings
										Argument:status.warnings
											MemberAccess:status.warnings
												Identifier:status
												Identifier:warnings
								AndExpression:param->buffer_type == MYSQL_TYPE_DATE &&                                       tm->time_type != MYSQL_TIMESTAMP_DATE
									EqualityExpression:param->buffer_type == MYSQL_TYPE_DATE
										PtrMemberAccess:param->buffer_type
											Identifier:param
											Identifier:buffer_type
										Identifier:MYSQL_TYPE_DATE
									EqualityExpression:tm->time_type != MYSQL_TIMESTAMP_DATE
										PtrMemberAccess:tm->time_type
											Identifier:tm
											Identifier:time_type
										Identifier:MYSQL_TIMESTAMP_DATE
					BreakStatement:break;
				Label:case MYSQL_TYPE_TINY_BLOB:
					Identifier:MYSQL_TYPE_TINY_BLOB
				Label:case MYSQL_TYPE_MEDIUM_BLOB:
					Identifier:MYSQL_TYPE_MEDIUM_BLOB
				Label:case MYSQL_TYPE_LONG_BLOB:
					Identifier:MYSQL_TYPE_LONG_BLOB
				Label:case MYSQL_TYPE_BLOB:
					Identifier:MYSQL_TYPE_BLOB
				Label:case MYSQL_TYPE_DECIMAL:
					Identifier:MYSQL_TYPE_DECIMAL
				Label:case MYSQL_TYPE_NEWDECIMAL:
					Identifier:MYSQL_TYPE_NEWDECIMAL
				Label:default:
					Identifier:default
				CompoundStatement:
					Statement:/*        Copy column data to the buffer taking into account offset,        data length and buffer length.      */
					IdentifierDeclStatement:char *start = value + param->offset;
						IdentifierDecl:*start = value + param->offset
							IdentifierDeclType:char *
							Identifier:start
							AssignmentExpression:*start = value + param->offset
								Identifier:start
								AdditiveExpression:value + param->offset
									Identifier:value
									PtrMemberAccess:param->offset
										Identifier:param
										Identifier:offset
					IdentifierDeclStatement:char *end = value + length;
						IdentifierDecl:*end = value + length
							IdentifierDeclType:char *
							Identifier:end
							AssignmentExpression:*end = value + length
								Identifier:end
								AdditiveExpression:value + length
									Identifier:value
									Identifier:length
					IdentifierDeclStatement:size_t copy_length;
						IdentifierDecl:copy_length
							IdentifierDeclType:size_t
							Identifier:copy_length
					IfStatement:if (start < end)
						Condition:start < end
							RelationalExpression:start < end
								Identifier:start
								Identifier:end
						CompoundStatement:
							ExpressionStatement:copy_length = end - start
								AssignmentExpression:copy_length = end - start
									Identifier:copy_length
									AdditiveExpression:end - start
										Identifier:end
										Identifier:start
							Statement:/* We've got some data beyond offset: copy up to buffer_length bytes */
							IfStatement:if (param->buffer_length)
								Condition:param->buffer_length
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
								ExpressionStatement:memcpy(buffer, start, MY_MIN(copy_length, param->buffer_length))
									CallExpression:memcpy(buffer, start, MY_MIN(copy_length, param->buffer_length))
										Callee:memcpy
											Identifier:memcpy
										ArgumentList:buffer
											Argument:buffer
												Identifier:buffer
											Argument:start
												Identifier:start
											Argument:MY_MIN(copy_length, param->buffer_length)
												CallExpression:MY_MIN(copy_length, param->buffer_length)
													Callee:MY_MIN
														Identifier:MY_MIN
													ArgumentList:copy_length
														Argument:copy_length
															Identifier:copy_length
														Argument:param->buffer_length
															PtrMemberAccess:param->buffer_length
																Identifier:param
																Identifier:buffer_length
					IfStatement:if (copy_length < param->buffer_length)
						Condition:copy_length < param->buffer_length
							RelationalExpression:copy_length < param->buffer_length
								Identifier:copy_length
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
						ExpressionStatement:buffer[copy_length] = '\0'
							AssignmentExpression:buffer[copy_length] = '\0'
								ArrayIndexing:buffer[copy_length]
									Identifier:buffer
									Identifier:copy_length
								Constant:'\0'
					ExpressionStatement:*param->error = copy_length > param->buffer_length
						AssignmentExpression:*param->error = copy_length > param->buffer_length
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							RelationalExpression:copy_length > param->buffer_length
								Identifier:copy_length
								PtrMemberAccess:param->buffer_length
									Identifier:param
									Identifier:buffer_length
					Statement:/*        param->length will always contain length of entire column;        number of copied bytes may be way different:      */
					ExpressionStatement:*param->length = (unsigned long)length
						AssignmentExpression:*param->length = (unsigned long)length
							UnaryOperationExpression:*param->length
								UnaryOperator:*
								PtrMemberAccess:param->length
									Identifier:param
									Identifier:length
							CastExpression:(unsigned long)length
								CastTarget:unsigned long
								Identifier:length
					BreakStatement:break;
	ReturnType:static void
	Identifier:fetch_string_with_conversion
	ParameterList:MYSQL_BIND *param , char *value , size_t length
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:char *value
			ParameterType:char *
			Identifier:value
		Parameter:size_t length
			ParameterType:size_t
			Identifier:length
FunctionDef:fetch_long_with_conversion (MYSQL_BIND *param , MYSQL_FIELD *field , longlong value , bool is_unsigned)
	CompoundStatement:
		Statement:uchar
		Statement:*
		Statement:buffer
		Statement:=
		Statement:pointer_cast
		Statement:<
		Statement:uchar
		Statement:*
		Statement:>
		ExpressionStatement:param->buffer
			PtrMemberAccess:param->buffer
				Identifier:param
				Identifier:buffer
		SwitchStatement:switch (param->buffer_type)
			Condition:param->buffer_type
				PtrMemberAccess:param->buffer_type
					Identifier:param
					Identifier:buffer_type
			CompoundStatement:
				Label:case MYSQL_TYPE_NULL:
					Identifier:MYSQL_TYPE_NULL
				Statement:/* do nothing */
				BreakStatement:break;
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				ExpressionStatement:*param->error = IS_TRUNCATED(value, param->is_unsigned, INT_MIN8,                                   INT_MAX8, UINT_MAX8)
					AssignmentExpression:*param->error = IS_TRUNCATED(value, param->is_unsigned, INT_MIN8,                                   INT_MAX8, UINT_MAX8)
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						CallExpression:IS_TRUNCATED(value, param->is_unsigned, INT_MIN8,                                   INT_MAX8, UINT_MAX8)
							Callee:IS_TRUNCATED
								Identifier:IS_TRUNCATED
							ArgumentList:value
								Argument:value
									Identifier:value
								Argument:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								Argument:INT_MIN8
									Identifier:INT_MIN8
								Argument:INT_MAX8
									Identifier:INT_MAX8
								Argument:UINT_MAX8
									Identifier:UINT_MAX8
				ExpressionStatement:*(uchar *)param->buffer = (uchar)value
					AssignmentExpression:*(uchar *)param->buffer = (uchar)value
						UnaryOperationExpression:*(uchar *)param->buffer
							UnaryOperator:*
							CastExpression:(uchar *)param->buffer
								CastTarget:uchar *
								PtrMemberAccess:param->buffer
									Identifier:param
									Identifier:buffer
						CastExpression:(uchar)value
							CastTarget:uchar
							Identifier:value
				BreakStatement:break;
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				ExpressionStatement:*param->error = IS_TRUNCATED(value, param->is_unsigned, INT_MIN16,                                   INT_MAX16, UINT_MAX16)
					AssignmentExpression:*param->error = IS_TRUNCATED(value, param->is_unsigned, INT_MIN16,                                   INT_MAX16, UINT_MAX16)
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						CallExpression:IS_TRUNCATED(value, param->is_unsigned, INT_MIN16,                                   INT_MAX16, UINT_MAX16)
							Callee:IS_TRUNCATED
								Identifier:IS_TRUNCATED
							ArgumentList:value
								Argument:value
									Identifier:value
								Argument:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								Argument:INT_MIN16
									Identifier:INT_MIN16
								Argument:INT_MAX16
									Identifier:INT_MAX16
								Argument:UINT_MAX16
									Identifier:UINT_MAX16
				ExpressionStatement:shortstore(buffer, (short)value)
					CallExpression:shortstore(buffer, (short)value)
						Callee:shortstore
							Identifier:shortstore
						ArgumentList:buffer
							Argument:buffer
								Identifier:buffer
							Argument:(short)value
								CastExpression:(short)value
									CastTarget:short
									Identifier:value
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				ExpressionStatement:*param->error = IS_TRUNCATED(value, param->is_unsigned, INT_MIN32,                                   INT_MAX32, UINT_MAX32)
					AssignmentExpression:*param->error = IS_TRUNCATED(value, param->is_unsigned, INT_MIN32,                                   INT_MAX32, UINT_MAX32)
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						CallExpression:IS_TRUNCATED(value, param->is_unsigned, INT_MIN32,                                   INT_MAX32, UINT_MAX32)
							Callee:IS_TRUNCATED
								Identifier:IS_TRUNCATED
							ArgumentList:value
								Argument:value
									Identifier:value
								Argument:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								Argument:INT_MIN32
									Identifier:INT_MIN32
								Argument:INT_MAX32
									Identifier:INT_MAX32
								Argument:UINT_MAX32
									Identifier:UINT_MAX32
				ExpressionStatement:longstore(buffer, (int32)value)
					CallExpression:longstore(buffer, (int32)value)
						Callee:longstore
							Identifier:longstore
						ArgumentList:buffer
							Argument:buffer
								Identifier:buffer
							Argument:(int32)value
								CastExpression:(int32)value
									CastTarget:int32
									Identifier:value
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				ExpressionStatement:longlongstore(buffer, value)
					CallExpression:longlongstore(buffer, value)
						Callee:longlongstore
							Identifier:longlongstore
						ArgumentList:buffer
							Argument:buffer
								Identifier:buffer
							Argument:value
								Identifier:value
				ExpressionStatement:*param->error = param->is_unsigned != is_unsigned && value < 0
					AssignmentExpression:*param->error = param->is_unsigned != is_unsigned && value < 0
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						AndExpression:param->is_unsigned != is_unsigned && value < 0
							EqualityExpression:param->is_unsigned != is_unsigned
								PtrMemberAccess:param->is_unsigned
									Identifier:param
									Identifier:is_unsigned
								Identifier:is_unsigned
							RelationalExpression:value < 0
								Identifier:value
								Constant:0
				BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				CompoundStatement:
					Statement:/*        We need to mark the local variable volatile to        workaround Intel FPU executive precision feature.        (See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=323 for details)      */
					IdentifierDeclStatement:volatile float data;
						IdentifierDecl:data
							IdentifierDeclType:volatile float
							Identifier:data
					IfStatement:if (is_unsigned)
						Condition:is_unsigned
							Identifier:is_unsigned
						CompoundStatement:
							ExpressionStatement:data = (float)ulonglong2double(value)
								AssignmentExpression:data = (float)ulonglong2double(value)
									Identifier:data
									CastExpression:(float)ulonglong2double(value)
										CastTarget:float
										CallExpression:ulonglong2double(value)
											Callee:ulonglong2double
												Identifier:ulonglong2double
											ArgumentList:value
												Argument:value
													Identifier:value
							ExpressionStatement:*param->error = ((ulonglong)value) != ((ulonglong)data)
								AssignmentExpression:*param->error = ((ulonglong)value) != ((ulonglong)data)
									UnaryOperationExpression:*param->error
										UnaryOperator:*
										PtrMemberAccess:param->error
											Identifier:param
											Identifier:error
									EqualityExpression:((ulonglong)value) != ((ulonglong)data)
										CastExpression:(ulonglong)value
											CastTarget:ulonglong
											Identifier:value
										CastExpression:(ulonglong)data
											CastTarget:ulonglong
											Identifier:data
					ExpressionStatement:floatstore(buffer, data)
						CallExpression:floatstore(buffer, data)
							Callee:floatstore
								Identifier:floatstore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:data
									Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				CompoundStatement:
					IdentifierDeclStatement:volatile double data;
						IdentifierDecl:data
							IdentifierDeclType:volatile double
							Identifier:data
					IfStatement:if (is_unsigned)
						Condition:is_unsigned
							Identifier:is_unsigned
						CompoundStatement:
							ExpressionStatement:data = ulonglong2double(value)
								AssignmentExpression:data = ulonglong2double(value)
									Identifier:data
									CallExpression:ulonglong2double(value)
										Callee:ulonglong2double
											Identifier:ulonglong2double
										ArgumentList:value
											Argument:value
												Identifier:value
							ExpressionStatement:*param->error =            data >= ULLONG_MAX || ((ulonglong)value) != ((ulonglong)data)
								AssignmentExpression:*param->error =            data >= ULLONG_MAX || ((ulonglong)value) != ((ulonglong)data)
									UnaryOperationExpression:*param->error
										UnaryOperator:*
										PtrMemberAccess:param->error
											Identifier:param
											Identifier:error
									OrExpression:data >= ULLONG_MAX || ((ulonglong)value) != ((ulonglong)data)
										RelationalExpression:data >= ULLONG_MAX
											Identifier:data
											Identifier:ULLONG_MAX
										EqualityExpression:((ulonglong)value) != ((ulonglong)data)
											CastExpression:(ulonglong)value
												CastTarget:ulonglong
												Identifier:value
											CastExpression:(ulonglong)data
												CastTarget:ulonglong
												Identifier:data
					ExpressionStatement:doublestore(buffer, data)
						CallExpression:doublestore(buffer, data)
							Callee:doublestore
								Identifier:doublestore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:data
									Identifier:data
					BreakStatement:break;
				Label:case MYSQL_TYPE_TIME:
					Identifier:MYSQL_TYPE_TIME
				Label:case MYSQL_TYPE_DATE:
					Identifier:MYSQL_TYPE_DATE
				Label:case MYSQL_TYPE_TIMESTAMP:
					Identifier:MYSQL_TYPE_TIMESTAMP
				Label:case MYSQL_TYPE_DATETIME:
					Identifier:MYSQL_TYPE_DATETIME
				CompoundStatement:
					IdentifierDeclStatement:int error;
						IdentifierDecl:error
							IdentifierDeclType:int
							Identifier:error
					ExpressionStatement:value = number_to_datetime(value, (MYSQL_TIME *)buffer, TIME_FUZZY_DATE,                                 &error)
						AssignmentExpression:value = number_to_datetime(value, (MYSQL_TIME *)buffer, TIME_FUZZY_DATE,                                 &error)
							Identifier:value
							CallExpression:number_to_datetime(value, (MYSQL_TIME *)buffer, TIME_FUZZY_DATE,                                 &error)
								Callee:number_to_datetime
									Identifier:number_to_datetime
								ArgumentList:value
									Argument:value
										Identifier:value
									Argument:(MYSQL_TIME *)buffer
										CastExpression:(MYSQL_TIME *)buffer
											CastTarget:MYSQL_TIME *
											Identifier:buffer
									Argument:TIME_FUZZY_DATE
										Identifier:TIME_FUZZY_DATE
									Argument:&error
										UnaryOperationExpression:&error
											UnaryOperator:&
											Identifier:error
					ExpressionStatement:*param->error = MY_TEST(error)
						AssignmentExpression:*param->error = MY_TEST(error)
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							CallExpression:MY_TEST(error)
								Callee:MY_TEST
									Identifier:MY_TEST
								ArgumentList:error
									Argument:error
										Identifier:error
					BreakStatement:break;
				Label:default:
					Identifier:default
				CompoundStatement:
					IdentifierDeclStatement:uchar buff[22];
						IdentifierDecl:buff[22]
							IdentifierDeclType:uchar [ 22 ]
							Identifier:buff
							Constant:22
					Statement:/* Enough for longlong */
					IdentifierDeclStatement:uchar *end = (uchar *)longlong10_to_str(value, (char *)buff,                                              is_unsigned ? 10 : -10);
						IdentifierDecl:*end = (uchar *)longlong10_to_str(value, (char *)buff,                                              is_unsigned ? 10 : -10)
							IdentifierDeclType:uchar *
							Identifier:end
							AssignmentExpression:*end = (uchar *)longlong10_to_str(value, (char *)buff,                                              is_unsigned ? 10 : -10)
								Identifier:end
								CastExpression:(uchar *)longlong10_to_str(value, (char *)buff,                                              is_unsigned ? 10 : -10)
									CastTarget:uchar *
									CallExpression:longlong10_to_str(value, (char *)buff,                                              is_unsigned ? 10 : -10)
										Callee:longlong10_to_str
											Identifier:longlong10_to_str
										ArgumentList:value
											Argument:value
												Identifier:value
											Argument:(char *)buff
												CastExpression:(char *)buff
													CastTarget:char *
													Identifier:buff
											Argument:is_unsigned ? 10 : -10
												ConditionalExpression:is_unsigned ? 10 : -10
													Condition:is_unsigned
														Identifier:is_unsigned
													Constant:10
													UnaryOperationExpression:-10
														UnaryOperator:-
														Constant:10
					Statement:/* Resort to string conversion which supports all typecodes */
					IdentifierDeclStatement:uint length = (uint)(end - buff);
						IdentifierDecl:length = (uint)(end - buff)
							IdentifierDeclType:uint
							Identifier:length
							AssignmentExpression:length = (uint)(end - buff)
								Identifier:length
								CastExpression:(uint)(end - buff)
									CastTarget:uint
									AdditiveExpression:end - buff
										Identifier:end
										Identifier:buff
					IfStatement:if (field->flags & ZEROFILL_FLAG && length < field->length &&          field->length < 21)
						Condition:field->flags & ZEROFILL_FLAG && length < field->length &&          field->length < 21
							AndExpression:field->flags & ZEROFILL_FLAG && length < field->length &&          field->length < 21
								BitAndExpression:field->flags & ZEROFILL_FLAG
									PtrMemberAccess:field->flags
										Identifier:field
										Identifier:flags
									Identifier:ZEROFILL_FLAG
								AndExpression:length < field->length &&          field->length < 21
									RelationalExpression:length < field->length
										Identifier:length
										PtrMemberAccess:field->length
											Identifier:field
											Identifier:length
									RelationalExpression:field->length < 21
										PtrMemberAccess:field->length
											Identifier:field
											Identifier:length
										Constant:21
						CompoundStatement:
							ExpressionStatement:memmove(buff + field->length - length, buff, length)
								CallExpression:memmove(buff + field->length - length, buff, length)
									Callee:memmove
										Identifier:memmove
									ArgumentList:buff + field->length - length
										Argument:buff + field->length - length
											AdditiveExpression:buff + field->length - length
												Identifier:buff
												AdditiveExpression:field->length - length
													PtrMemberAccess:field->length
														Identifier:field
														Identifier:length
													Identifier:length
										Argument:buff
											Identifier:buff
										Argument:length
											Identifier:length
							ExpressionStatement:memset(buff, '0', field->length - length)
								CallExpression:memset(buff, '0', field->length - length)
									Callee:memset
										Identifier:memset
									ArgumentList:buff
										Argument:buff
											Identifier:buff
										Argument:'0'
											Constant:'0'
										Argument:field->length - length
											AdditiveExpression:field->length - length
												PtrMemberAccess:field->length
													Identifier:field
													Identifier:length
												Identifier:length
							ExpressionStatement:length = field->length
								AssignmentExpression:length = field->length
									Identifier:length
									PtrMemberAccess:field->length
										Identifier:field
										Identifier:length
					ExpressionStatement:fetch_string_with_conversion(param, (char *)buff, length)
						CallExpression:fetch_string_with_conversion(param, (char *)buff, length)
							Callee:fetch_string_with_conversion
								Identifier:fetch_string_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:(char *)buff
									CastExpression:(char *)buff
										CastTarget:char *
										Identifier:buff
								Argument:length
									Identifier:length
					BreakStatement:break;
	ReturnType:static void
	Identifier:fetch_long_with_conversion
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field , longlong value , bool is_unsigned
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
		Parameter:longlong value
			ParameterType:longlong
			Identifier:value
		Parameter:bool is_unsigned
			ParameterType:bool
			Identifier:is_unsigned
FunctionDef:fetch_float_with_conversion (MYSQL_BIND *param , MYSQL_FIELD *field , double value , my_gcvt_arg_type type)
	CompoundStatement:
		Statement:uchar
		Statement:*
		Statement:buffer
		Statement:=
		Statement:pointer_cast
		Statement:<
		Statement:uchar
		Statement:*
		Statement:>
		ExpressionStatement:param->buffer
			PtrMemberAccess:param->buffer
				Identifier:param
				Identifier:buffer
		IdentifierDeclStatement:double val64 = (value < 0 ? -floor(-value) : floor(value));
			IdentifierDecl:val64 = (value < 0 ? -floor(-value) : floor(value))
				IdentifierDeclType:double
				Identifier:val64
				AssignmentExpression:val64 = (value < 0 ? -floor(-value) : floor(value))
					Identifier:val64
					ConditionalExpression:value < 0 ? -floor(-value) : floor(value)
						Condition:value < 0
							RelationalExpression:value < 0
								Identifier:value
								Constant:0
						UnaryOperationExpression:-floor(-value)
							UnaryOperator:-
							CallExpression:floor(-value)
								Callee:floor
									Identifier:floor
								ArgumentList:-value
									Argument:-value
										UnaryOperationExpression:-value
											UnaryOperator:-
											Identifier:value
						CallExpression:floor(value)
							Callee:floor
								Identifier:floor
							ArgumentList:value
								Argument:value
									Identifier:value
		SwitchStatement:switch (param->buffer_type)
			Condition:param->buffer_type
				PtrMemberAccess:param->buffer_type
					Identifier:param
					Identifier:buffer_type
			CompoundStatement:
				Label:case MYSQL_TYPE_NULL:
					Identifier:MYSQL_TYPE_NULL
				Statement:/* do nothing */
				BreakStatement:break;
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				Statement:/*        We need to _store_ data in the buffer before the truncation check to        workaround Intel FPU executive precision feature.        (See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=323 for details)        Sic: AFAIU it does not guarantee to work.      */
				IfStatement:if (param->is_unsigned)
					Condition:param->is_unsigned
						PtrMemberAccess:param->is_unsigned
							Identifier:param
							Identifier:is_unsigned
					CompoundStatement:
						IfStatement:if (value < 0.0)
							Condition:value < 0.0
								RelationalExpression:value < 0.0
									Identifier:value
									Constant:0.0
							CompoundStatement:
								ExpressionStatement:*param->error = true
									AssignmentExpression:*param->error = true
										UnaryOperationExpression:*param->error
											UnaryOperator:*
											PtrMemberAccess:param->error
												Identifier:param
												Identifier:error
										Identifier:true
								BreakStatement:break;
						ExpressionStatement:*buffer = (uint8)value
							AssignmentExpression:*buffer = (uint8)value
								UnaryOperationExpression:*buffer
									UnaryOperator:*
									Identifier:buffer
								CastExpression:(uint8)value
									CastTarget:uint8
									Identifier:value
				ExpressionStatement:*param->error = val64 != (param->is_unsigned ? (double)((uint8)*buffer)                                                   : (double)((int8)*buffer))
					AssignmentExpression:*param->error = val64 != (param->is_unsigned ? (double)((uint8)*buffer)                                                   : (double)((int8)*buffer))
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						EqualityExpression:val64 != (param->is_unsigned ? (double)((uint8)*buffer)                                                   : (double)((int8)*buffer))
							Identifier:val64
							ConditionalExpression:param->is_unsigned ? (double)((uint8)*buffer)                                                   : (double)((int8)*buffer)
								Condition:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								CastExpression:(double)((uint8)*buffer)
									CastTarget:double
									CastExpression:(uint8)*buffer
										CastTarget:uint8
										UnaryOperationExpression:*buffer
											UnaryOperator:*
											Identifier:buffer
								CastExpression:(double)((int8)*buffer)
									CastTarget:double
									CastExpression:(int8)*buffer
										CastTarget:int8
										UnaryOperationExpression:*buffer
											UnaryOperator:*
											Identifier:buffer
				BreakStatement:break;
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				IfStatement:if (param->is_unsigned)
					Condition:param->is_unsigned
						PtrMemberAccess:param->is_unsigned
							Identifier:param
							Identifier:is_unsigned
					CompoundStatement:
						IfStatement:if (value < 0.0)
							Condition:value < 0.0
								RelationalExpression:value < 0.0
									Identifier:value
									Constant:0.0
							CompoundStatement:
								ExpressionStatement:*param->error = true
									AssignmentExpression:*param->error = true
										UnaryOperationExpression:*param->error
											UnaryOperator:*
											PtrMemberAccess:param->error
												Identifier:param
												Identifier:error
										Identifier:true
								BreakStatement:break;
						IdentifierDeclStatement:ushort data = (ushort)value;
							IdentifierDecl:data = (ushort)value
								IdentifierDeclType:ushort
								Identifier:data
								AssignmentExpression:data = (ushort)value
									Identifier:data
									CastExpression:(ushort)value
										CastTarget:ushort
										Identifier:value
						ExpressionStatement:shortstore(buffer, data)
							CallExpression:shortstore(buffer, data)
								Callee:shortstore
									Identifier:shortstore
								ArgumentList:buffer
									Argument:buffer
										Identifier:buffer
									Argument:data
										Identifier:data
				ExpressionStatement:*param->error =          val64 != (param->is_unsigned ? (double)(*(ushort *)buffer)                                       : (double)(*(short *)buffer))
					AssignmentExpression:*param->error =          val64 != (param->is_unsigned ? (double)(*(ushort *)buffer)                                       : (double)(*(short *)buffer))
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						EqualityExpression:val64 != (param->is_unsigned ? (double)(*(ushort *)buffer)                                       : (double)(*(short *)buffer))
							Identifier:val64
							ConditionalExpression:param->is_unsigned ? (double)(*(ushort *)buffer)                                       : (double)(*(short *)buffer)
								Condition:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								CastExpression:(double)(*(ushort *)buffer)
									CastTarget:double
									UnaryOperationExpression:*(ushort *)buffer
										UnaryOperator:*
										CastExpression:(ushort *)buffer
											CastTarget:ushort *
											Identifier:buffer
								CastExpression:(double)(*(short *)buffer)
									CastTarget:double
									UnaryOperationExpression:*(short *)buffer
										UnaryOperator:*
										CastExpression:(short *)buffer
											CastTarget:short *
											Identifier:buffer
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				IfStatement:if (param->is_unsigned)
					Condition:param->is_unsigned
						PtrMemberAccess:param->is_unsigned
							Identifier:param
							Identifier:is_unsigned
					CompoundStatement:
						IfStatement:if (value < 0.0)
							Condition:value < 0.0
								RelationalExpression:value < 0.0
									Identifier:value
									Constant:0.0
							CompoundStatement:
								ExpressionStatement:*param->error = true
									AssignmentExpression:*param->error = true
										UnaryOperationExpression:*param->error
											UnaryOperator:*
											PtrMemberAccess:param->error
												Identifier:param
												Identifier:error
										Identifier:true
								BreakStatement:break;
						IdentifierDeclStatement:uint32 data = (uint32)value;
							IdentifierDecl:data = (uint32)value
								IdentifierDeclType:uint32
								Identifier:data
								AssignmentExpression:data = (uint32)value
									Identifier:data
									CastExpression:(uint32)value
										CastTarget:uint32
										Identifier:value
						ExpressionStatement:longstore(buffer, data)
							CallExpression:longstore(buffer, data)
								Callee:longstore
									Identifier:longstore
								ArgumentList:buffer
									Argument:buffer
										Identifier:buffer
									Argument:data
										Identifier:data
				ExpressionStatement:*param->error =          val64 != (param->is_unsigned ? (double)(*(uint32 *)buffer)                                       : (double)(*(int32 *)buffer))
					AssignmentExpression:*param->error =          val64 != (param->is_unsigned ? (double)(*(uint32 *)buffer)                                       : (double)(*(int32 *)buffer))
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						EqualityExpression:val64 != (param->is_unsigned ? (double)(*(uint32 *)buffer)                                       : (double)(*(int32 *)buffer))
							Identifier:val64
							ConditionalExpression:param->is_unsigned ? (double)(*(uint32 *)buffer)                                       : (double)(*(int32 *)buffer)
								Condition:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								CastExpression:(double)(*(uint32 *)buffer)
									CastTarget:double
									UnaryOperationExpression:*(uint32 *)buffer
										UnaryOperator:*
										CastExpression:(uint32 *)buffer
											CastTarget:uint32 *
											Identifier:buffer
								CastExpression:(double)(*(int32 *)buffer)
									CastTarget:double
									UnaryOperationExpression:*(int32 *)buffer
										UnaryOperator:*
										CastExpression:(int32 *)buffer
											CastTarget:int32 *
											Identifier:buffer
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				IfStatement:if (param->is_unsigned)
					Condition:param->is_unsigned
						PtrMemberAccess:param->is_unsigned
							Identifier:param
							Identifier:is_unsigned
					CompoundStatement:
						IfStatement:if (value < 0.0)
							Condition:value < 0.0
								RelationalExpression:value < 0.0
									Identifier:value
									Constant:0.0
							CompoundStatement:
								ExpressionStatement:*param->error = true
									AssignmentExpression:*param->error = true
										UnaryOperationExpression:*param->error
											UnaryOperator:*
											PtrMemberAccess:param->error
												Identifier:param
												Identifier:error
										Identifier:true
								BreakStatement:break;
						IdentifierDeclStatement:ulonglong data = (ulonglong)value;
							IdentifierDecl:data = (ulonglong)value
								IdentifierDeclType:ulonglong
								Identifier:data
								AssignmentExpression:data = (ulonglong)value
									Identifier:data
									CastExpression:(ulonglong)value
										CastTarget:ulonglong
										Identifier:value
						ExpressionStatement:longlongstore(buffer, data)
							CallExpression:longlongstore(buffer, data)
								Callee:longlongstore
									Identifier:longlongstore
								ArgumentList:buffer
									Argument:buffer
										Identifier:buffer
									Argument:data
										Identifier:data
				ExpressionStatement:*param->error =          val64 != (param->is_unsigned ? ulonglong2double(*(ulonglong *)buffer)                                       : (double)(*(longlong *)buffer))
					AssignmentExpression:*param->error =          val64 != (param->is_unsigned ? ulonglong2double(*(ulonglong *)buffer)                                       : (double)(*(longlong *)buffer))
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						EqualityExpression:val64 != (param->is_unsigned ? ulonglong2double(*(ulonglong *)buffer)                                       : (double)(*(longlong *)buffer))
							Identifier:val64
							ConditionalExpression:param->is_unsigned ? ulonglong2double(*(ulonglong *)buffer)                                       : (double)(*(longlong *)buffer)
								Condition:param->is_unsigned
									PtrMemberAccess:param->is_unsigned
										Identifier:param
										Identifier:is_unsigned
								CallExpression:ulonglong2double(*(ulonglong *)buffer)
									Callee:ulonglong2double
										Identifier:ulonglong2double
									ArgumentList:*(ulonglong *)buffer
										Argument:*(ulonglong *)buffer
											UnaryOperationExpression:*(ulonglong *)buffer
												UnaryOperator:*
												CastExpression:(ulonglong *)buffer
													CastTarget:ulonglong *
													Identifier:buffer
								CastExpression:(double)(*(longlong *)buffer)
									CastTarget:double
									UnaryOperationExpression:*(longlong *)buffer
										UnaryOperator:*
										CastExpression:(longlong *)buffer
											CastTarget:longlong *
											Identifier:buffer
				BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				CompoundStatement:
					IdentifierDeclStatement:float data = (float)value;
						IdentifierDecl:data = (float)value
							IdentifierDeclType:float
							Identifier:data
							AssignmentExpression:data = (float)value
								Identifier:data
								CastExpression:(float)value
									CastTarget:float
									Identifier:value
					ExpressionStatement:floatstore(buffer, data)
						CallExpression:floatstore(buffer, data)
							Callee:floatstore
								Identifier:floatstore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:data
									Identifier:data
					ExpressionStatement:*param->error = (*(float *)buffer) != value
						AssignmentExpression:*param->error = (*(float *)buffer) != value
							UnaryOperationExpression:*param->error
								UnaryOperator:*
								PtrMemberAccess:param->error
									Identifier:param
									Identifier:error
							EqualityExpression:(*(float *)buffer) != value
								UnaryOperationExpression:*(float *)buffer
									UnaryOperator:*
									CastExpression:(float *)buffer
										CastTarget:float *
										Identifier:buffer
								Identifier:value
					BreakStatement:break;
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				CompoundStatement:
					ExpressionStatement:doublestore(buffer, value)
						CallExpression:doublestore(buffer, value)
							Callee:doublestore
								Identifier:doublestore
							ArgumentList:buffer
								Argument:buffer
									Identifier:buffer
								Argument:value
									Identifier:value
					BreakStatement:break;
				Label:default:
					Identifier:default
				CompoundStatement:
					Statement:/*        Resort to fetch_string_with_conversion: this should handle        floating point -> string conversion nicely, honor all typecodes        and param->offset possibly set in mysql_stmt_fetch_column      */
					IdentifierDeclStatement:char buff[FLOATING_POINT_BUFFER];
						IdentifierDecl:buff[FLOATING_POINT_BUFFER]
							IdentifierDeclType:char [ FLOATING_POINT_BUFFER ]
							Identifier:buff
							Identifier:FLOATING_POINT_BUFFER
					IdentifierDeclStatement:size_t len;
						IdentifierDecl:len
							IdentifierDeclType:size_t
							Identifier:len
					IfStatement:if (field->decimals >= NOT_FIXED_DEC)
						Condition:field->decimals >= NOT_FIXED_DEC
							RelationalExpression:field->decimals >= NOT_FIXED_DEC
								PtrMemberAccess:field->decimals
									Identifier:field
									Identifier:decimals
								Identifier:NOT_FIXED_DEC
						ExpressionStatement:len = my_gcvt(value, type,                      (int)MY_MIN(sizeof(buff) - 1, param->buffer_length), buff,                      NULL)
							AssignmentExpression:len = my_gcvt(value, type,                      (int)MY_MIN(sizeof(buff) - 1, param->buffer_length), buff,                      NULL)
								Identifier:len
								CallExpression:my_gcvt(value, type,                      (int)MY_MIN(sizeof(buff) - 1, param->buffer_length), buff,                      NULL)
									Callee:my_gcvt
										Identifier:my_gcvt
									ArgumentList:value
										Argument:value
											Identifier:value
										Argument:type
											Identifier:type
										Argument:(int)MY_MIN(sizeof(buff) - 1, param->buffer_length)
											CastExpression:(int)MY_MIN(sizeof(buff) - 1, param->buffer_length)
												CastTarget:int
												CallExpression:MY_MIN(sizeof(buff) - 1, param->buffer_length)
													Callee:MY_MIN
														Identifier:MY_MIN
													ArgumentList:sizeof(buff) - 1
														Argument:sizeof(buff) - 1
															AdditiveExpression:sizeof(buff) - 1
																SizeofExpression:sizeof(buff)
																	Sizeof:sizeof
																	Identifier:buff
																Constant:1
														Argument:param->buffer_length
															PtrMemberAccess:param->buffer_length
																Identifier:param
																Identifier:buffer_length
										Argument:buff
											Identifier:buff
										Argument:NULL
											Identifier:NULL
					IfStatement:if (field->flags & ZEROFILL_FLAG && len < field->length &&          field->length < MAX_DOUBLE_STRING_REP_LENGTH - 1)
						Condition:field->flags & ZEROFILL_FLAG && len < field->length &&          field->length < MAX_DOUBLE_STRING_REP_LENGTH - 1
							AndExpression:field->flags & ZEROFILL_FLAG && len < field->length &&          field->length < MAX_DOUBLE_STRING_REP_LENGTH - 1
								BitAndExpression:field->flags & ZEROFILL_FLAG
									PtrMemberAccess:field->flags
										Identifier:field
										Identifier:flags
									Identifier:ZEROFILL_FLAG
								AndExpression:len < field->length &&          field->length < MAX_DOUBLE_STRING_REP_LENGTH - 1
									RelationalExpression:len < field->length
										Identifier:len
										PtrMemberAccess:field->length
											Identifier:field
											Identifier:length
									RelationalExpression:field->length < MAX_DOUBLE_STRING_REP_LENGTH - 1
										PtrMemberAccess:field->length
											Identifier:field
											Identifier:length
										AdditiveExpression:MAX_DOUBLE_STRING_REP_LENGTH - 1
											Identifier:MAX_DOUBLE_STRING_REP_LENGTH
											Constant:1
						CompoundStatement:
							ExpressionStatement:memmove(buff + field->length - len, buff, len)
								CallExpression:memmove(buff + field->length - len, buff, len)
									Callee:memmove
										Identifier:memmove
									ArgumentList:buff + field->length - len
										Argument:buff + field->length - len
											AdditiveExpression:buff + field->length - len
												Identifier:buff
												AdditiveExpression:field->length - len
													PtrMemberAccess:field->length
														Identifier:field
														Identifier:length
													Identifier:len
										Argument:buff
											Identifier:buff
										Argument:len
											Identifier:len
							ExpressionStatement:memset(buff, '0', field->length - len)
								CallExpression:memset(buff, '0', field->length - len)
									Callee:memset
										Identifier:memset
									ArgumentList:buff
										Argument:buff
											Identifier:buff
										Argument:'0'
											Constant:'0'
										Argument:field->length - len
											AdditiveExpression:field->length - len
												PtrMemberAccess:field->length
													Identifier:field
													Identifier:length
												Identifier:len
							ExpressionStatement:len = field->length
								AssignmentExpression:len = field->length
									Identifier:len
									PtrMemberAccess:field->length
										Identifier:field
										Identifier:length
					ExpressionStatement:fetch_string_with_conversion(param, buff, len)
						CallExpression:fetch_string_with_conversion(param, buff, len)
							Callee:fetch_string_with_conversion
								Identifier:fetch_string_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:buff
									Identifier:buff
								Argument:len
									Identifier:len
					BreakStatement:break;
	ReturnType:static void
	Identifier:fetch_float_with_conversion
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field , double value , my_gcvt_arg_type type
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
		Parameter:double value
			ParameterType:double
			Identifier:value
		Parameter:my_gcvt_arg_type type
			ParameterType:my_gcvt_arg_type
			Identifier:type
FunctionDef:fetch_datetime_with_conversion (MYSQL_BIND *param , MYSQL_FIELD *field , MYSQL_TIME *my_time)
	CompoundStatement:
		SwitchStatement:switch (param->buffer_type)
			Condition:param->buffer_type
				PtrMemberAccess:param->buffer_type
					Identifier:param
					Identifier:buffer_type
			CompoundStatement:
				Label:case MYSQL_TYPE_NULL:
					Identifier:MYSQL_TYPE_NULL
				Statement:/* do nothing */
				BreakStatement:break;
				Label:case MYSQL_TYPE_DATE:
					Identifier:MYSQL_TYPE_DATE
				ExpressionStatement:*(MYSQL_TIME *)(param->buffer) = *my_time
					AssignmentExpression:*(MYSQL_TIME *)(param->buffer) = *my_time
						UnaryOperationExpression:*(MYSQL_TIME *)(param->buffer)
							UnaryOperator:*
							CastExpression:(MYSQL_TIME *)(param->buffer)
								CastTarget:MYSQL_TIME *
								PtrMemberAccess:param->buffer
									Identifier:param
									Identifier:buffer
						UnaryOperationExpression:*my_time
							UnaryOperator:*
							Identifier:my_time
				ExpressionStatement:*param->error = my_time->time_type != MYSQL_TIMESTAMP_DATE
					AssignmentExpression:*param->error = my_time->time_type != MYSQL_TIMESTAMP_DATE
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						EqualityExpression:my_time->time_type != MYSQL_TIMESTAMP_DATE
							PtrMemberAccess:my_time->time_type
								Identifier:my_time
								Identifier:time_type
							Identifier:MYSQL_TIMESTAMP_DATE
				BreakStatement:break;
				Label:case MYSQL_TYPE_TIME:
					Identifier:MYSQL_TYPE_TIME
				ExpressionStatement:*(MYSQL_TIME *)(param->buffer) = *my_time
					AssignmentExpression:*(MYSQL_TIME *)(param->buffer) = *my_time
						UnaryOperationExpression:*(MYSQL_TIME *)(param->buffer)
							UnaryOperator:*
							CastExpression:(MYSQL_TIME *)(param->buffer)
								CastTarget:MYSQL_TIME *
								PtrMemberAccess:param->buffer
									Identifier:param
									Identifier:buffer
						UnaryOperationExpression:*my_time
							UnaryOperator:*
							Identifier:my_time
				ExpressionStatement:*param->error = my_time->time_type != MYSQL_TIMESTAMP_TIME
					AssignmentExpression:*param->error = my_time->time_type != MYSQL_TIMESTAMP_TIME
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						EqualityExpression:my_time->time_type != MYSQL_TIMESTAMP_TIME
							PtrMemberAccess:my_time->time_type
								Identifier:my_time
								Identifier:time_type
							Identifier:MYSQL_TIMESTAMP_TIME
				BreakStatement:break;
				Label:case MYSQL_TYPE_DATETIME:
					Identifier:MYSQL_TYPE_DATETIME
				Label:case MYSQL_TYPE_TIMESTAMP:
					Identifier:MYSQL_TYPE_TIMESTAMP
				ExpressionStatement:*(MYSQL_TIME *)(param->buffer) = *my_time
					AssignmentExpression:*(MYSQL_TIME *)(param->buffer) = *my_time
						UnaryOperationExpression:*(MYSQL_TIME *)(param->buffer)
							UnaryOperator:*
							CastExpression:(MYSQL_TIME *)(param->buffer)
								CastTarget:MYSQL_TIME *
								PtrMemberAccess:param->buffer
									Identifier:param
									Identifier:buffer
						UnaryOperationExpression:*my_time
							UnaryOperator:*
							Identifier:my_time
				Statement:/* No error: time and date are compatible with datetime */
				BreakStatement:break;
				Label:case MYSQL_TYPE_YEAR:
					Identifier:MYSQL_TYPE_YEAR
				Statement:shortstore
				Statement:(
				Statement:pointer_cast
				Statement:<
				Statement:uchar
				Statement:*
				Statement:>
				Statement:(
				Statement:param
				Statement:->
				Statement:buffer
				Statement:)
				Statement:,
				Statement:my_time
				Statement:->
				Statement:year
				Statement:)
				ExpressionStatement:
				ExpressionStatement:*param->error = 1
					AssignmentExpression:*param->error = 1
						UnaryOperationExpression:*param->error
							UnaryOperator:*
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
						Constant:1
				BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				CompoundStatement:
					IdentifierDeclStatement:ulonglong value = TIME_to_ulonglong(*my_time);
						IdentifierDecl:value = TIME_to_ulonglong(*my_time)
							IdentifierDeclType:ulonglong
							Identifier:value
							AssignmentExpression:value = TIME_to_ulonglong(*my_time)
								Identifier:value
								CallExpression:TIME_to_ulonglong(*my_time)
									Callee:TIME_to_ulonglong
										Identifier:TIME_to_ulonglong
									ArgumentList:*my_time
										Argument:*my_time
											UnaryOperationExpression:*my_time
												UnaryOperator:*
												Identifier:my_time
					ExpressionStatement:fetch_float_with_conversion(param, field, ulonglong2double(value),                                  MY_GCVT_ARG_DOUBLE)
						CallExpression:fetch_float_with_conversion(param, field, ulonglong2double(value),                                  MY_GCVT_ARG_DOUBLE)
							Callee:fetch_float_with_conversion
								Identifier:fetch_float_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:ulonglong2double(value)
									CallExpression:ulonglong2double(value)
										Callee:ulonglong2double
											Identifier:ulonglong2double
										ArgumentList:value
											Argument:value
												Identifier:value
								Argument:MY_GCVT_ARG_DOUBLE
									Identifier:MY_GCVT_ARG_DOUBLE
					BreakStatement:break;
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				Label:case MYSQL_TYPE_INT24:
					Identifier:MYSQL_TYPE_INT24
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				CompoundStatement:
					IdentifierDeclStatement:longlong value = (longlong)TIME_to_ulonglong(*my_time);
						IdentifierDecl:value = (longlong)TIME_to_ulonglong(*my_time)
							IdentifierDeclType:longlong
							Identifier:value
							AssignmentExpression:value = (longlong)TIME_to_ulonglong(*my_time)
								Identifier:value
								CastExpression:(longlong)TIME_to_ulonglong(*my_time)
									CastTarget:longlong
									CallExpression:TIME_to_ulonglong(*my_time)
										Callee:TIME_to_ulonglong
											Identifier:TIME_to_ulonglong
										ArgumentList:*my_time
											Argument:*my_time
												UnaryOperationExpression:*my_time
													UnaryOperator:*
													Identifier:my_time
					ExpressionStatement:fetch_long_with_conversion(param, field, value, true)
						CallExpression:fetch_long_with_conversion(param, field, value, true)
							Callee:fetch_long_with_conversion
								Identifier:fetch_long_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:value
									Identifier:value
								Argument:true
									Identifier:true
					BreakStatement:break;
				Label:default:
					Identifier:default
				CompoundStatement:
					Statement:/*        Convert time value  to string and delegate the rest to        fetch_string_with_conversion:      */
					IdentifierDeclStatement:char buff[MAX_DATE_STRING_REP_LENGTH];
						IdentifierDecl:buff[MAX_DATE_STRING_REP_LENGTH]
							IdentifierDeclType:char [ MAX_DATE_STRING_REP_LENGTH ]
							Identifier:buff
							Identifier:MAX_DATE_STRING_REP_LENGTH
					IdentifierDeclStatement:uint length = my_TIME_to_str(*my_time, buff, field->decimals);
						IdentifierDecl:length = my_TIME_to_str(*my_time, buff, field->decimals)
							IdentifierDeclType:uint
							Identifier:length
							AssignmentExpression:length = my_TIME_to_str(*my_time, buff, field->decimals)
								Identifier:length
								CallExpression:my_TIME_to_str(*my_time, buff, field->decimals)
									Callee:my_TIME_to_str
										Identifier:my_TIME_to_str
									ArgumentList:*my_time
										Argument:*my_time
											UnaryOperationExpression:*my_time
												UnaryOperator:*
												Identifier:my_time
										Argument:buff
											Identifier:buff
										Argument:field->decimals
											PtrMemberAccess:field->decimals
												Identifier:field
												Identifier:decimals
					Statement:/* Resort to string conversion */
					ExpressionStatement:fetch_string_with_conversion(param, (char *)buff, length)
						CallExpression:fetch_string_with_conversion(param, (char *)buff, length)
							Callee:fetch_string_with_conversion
								Identifier:fetch_string_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:(char *)buff
									CastExpression:(char *)buff
										CastTarget:char *
										Identifier:buff
								Argument:length
									Identifier:length
					BreakStatement:break;
	ReturnType:static void
	Identifier:fetch_datetime_with_conversion
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field , MYSQL_TIME *my_time
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
		Parameter:MYSQL_TIME *my_time
			ParameterType:MYSQL_TIME *
			Identifier:my_time
FunctionDef:fetch_result_with_conversion (MYSQL_BIND *param , MYSQL_FIELD *field , uchar **row)
	CompoundStatement:
		IdentifierDeclStatement:enum enum_field_types field_type = field->type;
			IdentifierDecl:field_type = field->type
				IdentifierDeclType:enum enum_field_types
				Identifier:field_type
				AssignmentExpression:field_type = field->type
					Identifier:field_type
					PtrMemberAccess:field->type
						Identifier:field
						Identifier:type
		IdentifierDeclStatement:uint field_is_unsigned = field->flags & UNSIGNED_FLAG;
			IdentifierDecl:field_is_unsigned = field->flags & UNSIGNED_FLAG
				IdentifierDeclType:uint
				Identifier:field_is_unsigned
				AssignmentExpression:field_is_unsigned = field->flags & UNSIGNED_FLAG
					Identifier:field_is_unsigned
					BitAndExpression:field->flags & UNSIGNED_FLAG
						PtrMemberAccess:field->flags
							Identifier:field
							Identifier:flags
						Identifier:UNSIGNED_FLAG
		SwitchStatement:switch (field_type)
			Condition:field_type
				Identifier:field_type
			CompoundStatement:
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				CompoundStatement:
					IdentifierDeclStatement:uchar value = **row;
						IdentifierDecl:value = **row
							IdentifierDeclType:uchar
							Identifier:value
							AssignmentExpression:value = **row
								Identifier:value
								UnaryOperationExpression:**row
									UnaryOperator:*
									UnaryOperationExpression:*row
										UnaryOperator:*
										Identifier:row
					Statement:/* sic: we need to cast to 'signed char' as 'char' may be unsigned */
					IdentifierDeclStatement:longlong data =          field_is_unsigned ? (longlong)value : (longlong)(signed char)value;
						IdentifierDecl:data =          field_is_unsigned ? (longlong)value : (longlong)(signed char)value
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data =          field_is_unsigned ? (longlong)value : (longlong)(signed char)value
								Identifier:data
								ConditionalExpression:field_is_unsigned ? (longlong)value : (longlong)(signed char)value
									Condition:field_is_unsigned
										Identifier:field_is_unsigned
									CastExpression:(longlong)value
										CastTarget:longlong
										Identifier:value
									CastExpression:(longlong)(signed char)value
										CastTarget:longlong
										CastExpression:(signed char)value
											CastTarget:signed char
											Identifier:value
					ExpressionStatement:fetch_long_with_conversion(param, field, data, 0)
						CallExpression:fetch_long_with_conversion(param, field, data, 0)
							Callee:fetch_long_with_conversion
								Identifier:fetch_long_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:data
									Identifier:data
								Argument:0
									Constant:0
					ExpressionStatement:*row += 1
						AssignmentExpression:*row += 1
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Constant:1
					BreakStatement:break;
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				Label:case MYSQL_TYPE_YEAR:
					Identifier:MYSQL_TYPE_YEAR
				CompoundStatement:
					IdentifierDeclStatement:short value = sint2korr(*row);
						IdentifierDecl:value = sint2korr(*row)
							IdentifierDeclType:short
							Identifier:value
							AssignmentExpression:value = sint2korr(*row)
								Identifier:value
								CallExpression:sint2korr(*row)
									Callee:sint2korr
										Identifier:sint2korr
									ArgumentList:*row
										Argument:*row
											UnaryOperationExpression:*row
												UnaryOperator:*
												Identifier:row
					IdentifierDeclStatement:longlong data =          field_is_unsigned ? (longlong)(unsigned short)value : (longlong)value;
						IdentifierDecl:data =          field_is_unsigned ? (longlong)(unsigned short)value : (longlong)value
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data =          field_is_unsigned ? (longlong)(unsigned short)value : (longlong)value
								Identifier:data
								ConditionalExpression:field_is_unsigned ? (longlong)(unsigned short)value : (longlong)value
									Condition:field_is_unsigned
										Identifier:field_is_unsigned
									CastExpression:(longlong)(unsigned short)value
										CastTarget:longlong
										CastExpression:(unsigned short)value
											CastTarget:unsigned short
											Identifier:value
									CastExpression:(longlong)value
										CastTarget:longlong
										Identifier:value
					ExpressionStatement:fetch_long_with_conversion(param, field, data, 0)
						CallExpression:fetch_long_with_conversion(param, field, data, 0)
							Callee:fetch_long_with_conversion
								Identifier:fetch_long_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:data
									Identifier:data
								Argument:0
									Constant:0
					ExpressionStatement:*row += 2
						AssignmentExpression:*row += 2
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Constant:2
					BreakStatement:break;
				Label:case MYSQL_TYPE_INT24:
					Identifier:MYSQL_TYPE_INT24
				Statement:/* mediumint is sent as 4 bytes int */
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				CompoundStatement:
					IdentifierDeclStatement:int32 value = sint4korr(*row);
						IdentifierDecl:value = sint4korr(*row)
							IdentifierDeclType:int32
							Identifier:value
							AssignmentExpression:value = sint4korr(*row)
								Identifier:value
								CallExpression:sint4korr(*row)
									Callee:sint4korr
										Identifier:sint4korr
									ArgumentList:*row
										Argument:*row
											UnaryOperationExpression:*row
												UnaryOperator:*
												Identifier:row
					IdentifierDeclStatement:longlong data =          field_is_unsigned ? (longlong)(uint32)value : (longlong)value;
						IdentifierDecl:data =          field_is_unsigned ? (longlong)(uint32)value : (longlong)value
							IdentifierDeclType:longlong
							Identifier:data
							AssignmentExpression:data =          field_is_unsigned ? (longlong)(uint32)value : (longlong)value
								Identifier:data
								ConditionalExpression:field_is_unsigned ? (longlong)(uint32)value : (longlong)value
									Condition:field_is_unsigned
										Identifier:field_is_unsigned
									CastExpression:(longlong)(uint32)value
										CastTarget:longlong
										CastExpression:(uint32)value
											CastTarget:uint32
											Identifier:value
									CastExpression:(longlong)value
										CastTarget:longlong
										Identifier:value
					ExpressionStatement:fetch_long_with_conversion(param, field, data, 0)
						CallExpression:fetch_long_with_conversion(param, field, data, 0)
							Callee:fetch_long_with_conversion
								Identifier:fetch_long_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:data
									Identifier:data
								Argument:0
									Constant:0
					ExpressionStatement:*row += 4
						AssignmentExpression:*row += 4
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Constant:4
					BreakStatement:break;
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				CompoundStatement:
					IdentifierDeclStatement:longlong value = (longlong)sint8korr(*row);
						IdentifierDecl:value = (longlong)sint8korr(*row)
							IdentifierDeclType:longlong
							Identifier:value
							AssignmentExpression:value = (longlong)sint8korr(*row)
								Identifier:value
								CastExpression:(longlong)sint8korr(*row)
									CastTarget:longlong
									CallExpression:sint8korr(*row)
										Callee:sint8korr
											Identifier:sint8korr
										ArgumentList:*row
											Argument:*row
												UnaryOperationExpression:*row
													UnaryOperator:*
													Identifier:row
					ExpressionStatement:fetch_long_with_conversion(param, field, value,                                 field->flags & UNSIGNED_FLAG)
						CallExpression:fetch_long_with_conversion(param, field, value,                                 field->flags & UNSIGNED_FLAG)
							Callee:fetch_long_with_conversion
								Identifier:fetch_long_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:value
									Identifier:value
								Argument:field->flags & UNSIGNED_FLAG
									BitAndExpression:field->flags & UNSIGNED_FLAG
										PtrMemberAccess:field->flags
											Identifier:field
											Identifier:flags
										Identifier:UNSIGNED_FLAG
					ExpressionStatement:*row += 8
						AssignmentExpression:*row += 8
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Constant:8
					BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				CompoundStatement:
					IdentifierDeclStatement:float value;
						IdentifierDecl:value
							IdentifierDeclType:float
							Identifier:value
					ExpressionStatement:float4get(&value, *row)
						CallExpression:float4get(&value, *row)
							Callee:float4get
								Identifier:float4get
							ArgumentList:&value
								Argument:&value
									UnaryOperationExpression:&value
										UnaryOperator:&
										Identifier:value
								Argument:*row
									UnaryOperationExpression:*row
										UnaryOperator:*
										Identifier:row
					ExpressionStatement:fetch_float_with_conversion(param, field, value, MY_GCVT_ARG_FLOAT)
						CallExpression:fetch_float_with_conversion(param, field, value, MY_GCVT_ARG_FLOAT)
							Callee:fetch_float_with_conversion
								Identifier:fetch_float_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:value
									Identifier:value
								Argument:MY_GCVT_ARG_FLOAT
									Identifier:MY_GCVT_ARG_FLOAT
					ExpressionStatement:*row += 4
						AssignmentExpression:*row += 4
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Constant:4
					BreakStatement:break;
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				CompoundStatement:
					IdentifierDeclStatement:double value;
						IdentifierDecl:value
							IdentifierDeclType:double
							Identifier:value
					ExpressionStatement:float8get(&value, *row)
						CallExpression:float8get(&value, *row)
							Callee:float8get
								Identifier:float8get
							ArgumentList:&value
								Argument:&value
									UnaryOperationExpression:&value
										UnaryOperator:&
										Identifier:value
								Argument:*row
									UnaryOperationExpression:*row
										UnaryOperator:*
										Identifier:row
					ExpressionStatement:fetch_float_with_conversion(param, field, value, MY_GCVT_ARG_DOUBLE)
						CallExpression:fetch_float_with_conversion(param, field, value, MY_GCVT_ARG_DOUBLE)
							Callee:fetch_float_with_conversion
								Identifier:fetch_float_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:value
									Identifier:value
								Argument:MY_GCVT_ARG_DOUBLE
									Identifier:MY_GCVT_ARG_DOUBLE
					ExpressionStatement:*row += 8
						AssignmentExpression:*row += 8
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Constant:8
					BreakStatement:break;
				Label:case MYSQL_TYPE_DATE:
					Identifier:MYSQL_TYPE_DATE
				CompoundStatement:
					IdentifierDeclStatement:MYSQL_TIME tm;
						IdentifierDecl:tm
							IdentifierDeclType:MYSQL_TIME
							Identifier:tm
					ExpressionStatement:read_binary_date(&tm, row)
						CallExpression:read_binary_date(&tm, row)
							Callee:read_binary_date
								Identifier:read_binary_date
							ArgumentList:&tm
								Argument:&tm
									UnaryOperationExpression:&tm
										UnaryOperator:&
										Identifier:tm
								Argument:row
									Identifier:row
					ExpressionStatement:fetch_datetime_with_conversion(param, field, &tm)
						CallExpression:fetch_datetime_with_conversion(param, field, &tm)
							Callee:fetch_datetime_with_conversion
								Identifier:fetch_datetime_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:&tm
									UnaryOperationExpression:&tm
										UnaryOperator:&
										Identifier:tm
					BreakStatement:break;
				Label:case MYSQL_TYPE_TIME:
					Identifier:MYSQL_TYPE_TIME
				CompoundStatement:
					IdentifierDeclStatement:MYSQL_TIME tm;
						IdentifierDecl:tm
							IdentifierDeclType:MYSQL_TIME
							Identifier:tm
					ExpressionStatement:read_binary_time(&tm, row)
						CallExpression:read_binary_time(&tm, row)
							Callee:read_binary_time
								Identifier:read_binary_time
							ArgumentList:&tm
								Argument:&tm
									UnaryOperationExpression:&tm
										UnaryOperator:&
										Identifier:tm
								Argument:row
									Identifier:row
					ExpressionStatement:fetch_datetime_with_conversion(param, field, &tm)
						CallExpression:fetch_datetime_with_conversion(param, field, &tm)
							Callee:fetch_datetime_with_conversion
								Identifier:fetch_datetime_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:&tm
									UnaryOperationExpression:&tm
										UnaryOperator:&
										Identifier:tm
					BreakStatement:break;
				Label:case MYSQL_TYPE_DATETIME:
					Identifier:MYSQL_TYPE_DATETIME
				Label:case MYSQL_TYPE_TIMESTAMP:
					Identifier:MYSQL_TYPE_TIMESTAMP
				CompoundStatement:
					IdentifierDeclStatement:MYSQL_TIME tm;
						IdentifierDecl:tm
							IdentifierDeclType:MYSQL_TIME
							Identifier:tm
					ExpressionStatement:read_binary_datetime(&tm, row)
						CallExpression:read_binary_datetime(&tm, row)
							Callee:read_binary_datetime
								Identifier:read_binary_datetime
							ArgumentList:&tm
								Argument:&tm
									UnaryOperationExpression:&tm
										UnaryOperator:&
										Identifier:tm
								Argument:row
									Identifier:row
					ExpressionStatement:fetch_datetime_with_conversion(param, field, &tm)
						CallExpression:fetch_datetime_with_conversion(param, field, &tm)
							Callee:fetch_datetime_with_conversion
								Identifier:fetch_datetime_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
								Argument:&tm
									UnaryOperationExpression:&tm
										UnaryOperator:&
										Identifier:tm
					BreakStatement:break;
				Label:default:
					Identifier:default
				CompoundStatement:
					IdentifierDeclStatement:ulong length = net_field_length(row);
						IdentifierDecl:length = net_field_length(row)
							IdentifierDeclType:ulong
							Identifier:length
							AssignmentExpression:length = net_field_length(row)
								Identifier:length
								CallExpression:net_field_length(row)
									Callee:net_field_length
										Identifier:net_field_length
									ArgumentList:row
										Argument:row
											Identifier:row
					ExpressionStatement:fetch_string_with_conversion(param, (char *)*row, length)
						CallExpression:fetch_string_with_conversion(param, (char *)*row, length)
							Callee:fetch_string_with_conversion
								Identifier:fetch_string_with_conversion
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:(char *)*row
									CastExpression:(char *)*row
										CastTarget:char *
										UnaryOperationExpression:*row
											UnaryOperator:*
											Identifier:row
								Argument:length
									Identifier:length
					ExpressionStatement:*row += length
						AssignmentExpression:*row += length
							UnaryOperationExpression:*row
								UnaryOperator:*
								Identifier:row
							Identifier:length
					BreakStatement:break;
	ReturnType:static void
	Identifier:fetch_result_with_conversion
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field , uchar **row
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
		Parameter:uchar **row
			ParameterType:uchar * *
			Identifier:row
FunctionDef:fetch_result_tinyint (MYSQL_BIND *param , MYSQL_FIELD *field , uchar **row)
	CompoundStatement:
		IdentifierDeclStatement:bool field_is_unsigned = (field->flags & UNSIGNED_FLAG);
			IdentifierDecl:field_is_unsigned = (field->flags & UNSIGNED_FLAG)
				IdentifierDeclType:bool
				Identifier:field_is_unsigned
				AssignmentExpression:field_is_unsigned = (field->flags & UNSIGNED_FLAG)
					Identifier:field_is_unsigned
					BitAndExpression:field->flags & UNSIGNED_FLAG
						PtrMemberAccess:field->flags
							Identifier:field
							Identifier:flags
						Identifier:UNSIGNED_FLAG
		IdentifierDeclStatement:uchar data = **row;
			IdentifierDecl:data = **row
				IdentifierDeclType:uchar
				Identifier:data
				AssignmentExpression:data = **row
					Identifier:data
					UnaryOperationExpression:**row
						UnaryOperator:*
						UnaryOperationExpression:*row
							UnaryOperator:*
							Identifier:row
		ExpressionStatement:*(uchar *)param->buffer = data
			AssignmentExpression:*(uchar *)param->buffer = data
				UnaryOperationExpression:*(uchar *)param->buffer
					UnaryOperator:*
					CastExpression:(uchar *)param->buffer
						CastTarget:uchar *
						PtrMemberAccess:param->buffer
							Identifier:param
							Identifier:buffer
				Identifier:data
		ExpressionStatement:*param->error = param->is_unsigned != field_is_unsigned && data > INT_MAX8
			AssignmentExpression:*param->error = param->is_unsigned != field_is_unsigned && data > INT_MAX8
				UnaryOperationExpression:*param->error
					UnaryOperator:*
					PtrMemberAccess:param->error
						Identifier:param
						Identifier:error
				AndExpression:param->is_unsigned != field_is_unsigned && data > INT_MAX8
					EqualityExpression:param->is_unsigned != field_is_unsigned
						PtrMemberAccess:param->is_unsigned
							Identifier:param
							Identifier:is_unsigned
						Identifier:field_is_unsigned
					RelationalExpression:data > INT_MAX8
						Identifier:data
						Identifier:INT_MAX8
		ExpressionStatement:(*row)++
			PostIncDecOperationExpression:(*row)++
				UnaryOperationExpression:*row
					UnaryOperator:*
					Identifier:row
				IncDec:++
	ReturnType:static void
	Identifier:fetch_result_tinyint
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field , uchar **row
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
		Parameter:uchar **row
			ParameterType:uchar * *
			Identifier:row
FunctionDef:fetch_result_short (MYSQL_BIND *param , MYSQL_FIELD *field , uchar **row)
	CompoundStatement:
		IdentifierDeclStatement:bool field_is_unsigned = (field->flags & UNSIGNED_FLAG);
			IdentifierDecl:field_is_unsigned = (field->flags & UNSIGNED_FLAG)
				IdentifierDeclType:bool
				Identifier:field_is_unsigned
				AssignmentExpression:field_is_unsigned = (field->flags & UNSIGNED_FLAG)
					Identifier:field_is_unsigned
					BitAndExpression:field->flags & UNSIGNED_FLAG
						PtrMemberAccess:field->flags
							Identifier:field
							Identifier:flags
						Identifier:UNSIGNED_FLAG
		IdentifierDeclStatement:ushort data = (ushort)sint2korr(*row);
			IdentifierDecl:data = (ushort)sint2korr(*row)
				IdentifierDeclType:ushort
				Identifier:data
				AssignmentExpression:data = (ushort)sint2korr(*row)
					Identifier:data
					CastExpression:(ushort)sint2korr(*row)
						CastTarget:ushort
						CallExpression:sint2korr(*row)
							Callee:sint2korr
								Identifier:sint2korr
							ArgumentList:*row
								Argument:*row
									UnaryOperationExpression:*row
										UnaryOperator:*
										Identifier:row
		Statement:shortstore
		Statement:(
		Statement:pointer_cast
		Statement:<
		Statement:uchar
		Statement:*
		Statement:>
		Statement:(
		Statement:param
		Statement:->
		Statement:buffer
		Statement:)
		Statement:,
		Statement:data
		Statement:)
		ExpressionStatement:
		ExpressionStatement:*param->error = param->is_unsigned != field_is_unsigned && data > INT_MAX16
			AssignmentExpression:*param->error = param->is_unsigned != field_is_unsigned && data > INT_MAX16
				UnaryOperationExpression:*param->error
					UnaryOperator:*
					PtrMemberAccess:param->error
						Identifier:param
						Identifier:error
				AndExpression:param->is_unsigned != field_is_unsigned && data > INT_MAX16
					EqualityExpression:param->is_unsigned != field_is_unsigned
						PtrMemberAccess:param->is_unsigned
							Identifier:param
							Identifier:is_unsigned
						Identifier:field_is_unsigned
					RelationalExpression:data > INT_MAX16
						Identifier:data
						Identifier:INT_MAX16
		ExpressionStatement:*row += 2
			AssignmentExpression:*row += 2
				UnaryOperationExpression:*row
					UnaryOperator:*
					Identifier:row
				Constant:2
	ReturnType:static void
	Identifier:fetch_result_short
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field , uchar **row
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
		Parameter:uchar **row
			ParameterType:uchar * *
			Identifier:row
IdentifierDeclStatement:null
	IdentifierDecl:field_is_unsigned
		IdentifierDeclType:bool
		Identifier:field_is_unsigned
IdentifierDeclStatement:null
	IdentifierDecl:data
		IdentifierDeclType:uint32
		Identifier:data
IdentifierDeclStatement:null
	IdentifierDecl:field_is_unsigned
		IdentifierDeclType:bool
		Identifier:field_is_unsigned
IdentifierDeclStatement:null
	IdentifierDecl:data
		IdentifierDeclType:ulonglong
		Identifier:data
IdentifierDeclStatement:null
	IdentifierDecl:value
		IdentifierDeclType:float
		Identifier:value
IdentifierDeclStatement:null
	IdentifierDecl:value
		IdentifierDeclType:double
		Identifier:value
IdentifierDeclStatement:null
	IdentifierDecl:*tm
		IdentifierDeclType:MYSQL_TIME *
		Identifier:tm
IdentifierDeclStatement:null
	IdentifierDecl:*tm
		IdentifierDeclType:MYSQL_TIME *
		Identifier:tm
IdentifierDeclStatement:null
	IdentifierDecl:*tm
		IdentifierDeclType:MYSQL_TIME *
		Identifier:tm
IdentifierDeclStatement:null
	IdentifierDecl:length
		IdentifierDeclType:ulong
		Identifier:length
IdentifierDeclStatement:null
	IdentifierDecl:copy_length
		IdentifierDeclType:ulong
		Identifier:copy_length
IdentifierDeclStatement:null
	IdentifierDecl:length
		IdentifierDeclType:ulong
		Identifier:length
IdentifierDeclStatement:null
	IdentifierDecl:copy_length
		IdentifierDeclType:ulong
		Identifier:copy_length
IdentifierDeclStatement:null
	IdentifierDecl:length
		IdentifierDeclType:ulong
		Identifier:length
IdentifierDeclStatement:null
	IdentifierDecl:length
		IdentifierDeclType:ulong
		Identifier:length
FunctionDef:is_binary_compatible (enum enum_field_types type1 , enum enum_field_types type2)
	CompoundStatement:
		Statement:static
		IdentifierDeclStatement:const enum enum_field_types      range1[] = {MYSQL_TYPE_SHORT, MYSQL_TYPE_YEAR, MYSQL_TYPE_NULL},      range2[] = {MYSQL_TYPE_INT24, MYSQL_TYPE_LONG, MYSQL_TYPE_NULL},      range3[] = {MYSQL_TYPE_DATETIME, MYSQL_TYPE_TIMESTAMP, MYSQL_TYPE_NULL},      range4[] = {          MYSQL_TYPE_ENUM,        MYSQL_TYPE_SET,       MYSQL_TYPE_TINY_BLOB,          MYSQL_TYPE_MEDIUM_BLOB, MYSQL_TYPE_LONG_BLOB, MYSQL_TYPE_BLOB,          MYSQL_TYPE_VAR_STRING,  MYSQL_TYPE_STRING,    MYSQL_TYPE_GEOMETRY,          MYSQL_TYPE_DECIMAL,     MYSQL_TYPE_NULL};
			IdentifierDecl:range1[] = {MYSQL_TYPE_SHORT, MYSQL_TYPE_YEAR, MYSQL_TYPE_NULL}
				IdentifierDeclType:const enum enum_field_types [ ]
				Identifier:range1
				AssignmentExpression:range1[] = {MYSQL_TYPE_SHORT, MYSQL_TYPE_YEAR, MYSQL_TYPE_NULL}
					Identifier:range1
					InitializerList:MYSQL_TYPE_SHORT
						Identifier:MYSQL_TYPE_SHORT
						Identifier:MYSQL_TYPE_YEAR
						Identifier:MYSQL_TYPE_NULL
			IdentifierDecl:range2[] = {MYSQL_TYPE_INT24, MYSQL_TYPE_LONG, MYSQL_TYPE_NULL}
				IdentifierDeclType:const enum enum_field_types [ ]
				Identifier:range2
				AssignmentExpression:range2[] = {MYSQL_TYPE_INT24, MYSQL_TYPE_LONG, MYSQL_TYPE_NULL}
					Identifier:range2
					InitializerList:MYSQL_TYPE_INT24
						Identifier:MYSQL_TYPE_INT24
						Identifier:MYSQL_TYPE_LONG
						Identifier:MYSQL_TYPE_NULL
			IdentifierDecl:range3[] = {MYSQL_TYPE_DATETIME, MYSQL_TYPE_TIMESTAMP, MYSQL_TYPE_NULL}
				IdentifierDeclType:const enum enum_field_types [ ]
				Identifier:range3
				AssignmentExpression:range3[] = {MYSQL_TYPE_DATETIME, MYSQL_TYPE_TIMESTAMP, MYSQL_TYPE_NULL}
					Identifier:range3
					InitializerList:MYSQL_TYPE_DATETIME
						Identifier:MYSQL_TYPE_DATETIME
						Identifier:MYSQL_TYPE_TIMESTAMP
						Identifier:MYSQL_TYPE_NULL
			IdentifierDecl:range4[] = {          MYSQL_TYPE_ENUM,        MYSQL_TYPE_SET,       MYSQL_TYPE_TINY_BLOB,          MYSQL_TYPE_MEDIUM_BLOB, MYSQL_TYPE_LONG_BLOB, MYSQL_TYPE_BLOB,          MYSQL_TYPE_VAR_STRING,  MYSQL_TYPE_STRING,    MYSQL_TYPE_GEOMETRY,          MYSQL_TYPE_DECIMAL,     MYSQL_TYPE_NULL}
				IdentifierDeclType:const enum enum_field_types [ ]
				Identifier:range4
				AssignmentExpression:range4[] = {          MYSQL_TYPE_ENUM,        MYSQL_TYPE_SET,       MYSQL_TYPE_TINY_BLOB,          MYSQL_TYPE_MEDIUM_BLOB, MYSQL_TYPE_LONG_BLOB, MYSQL_TYPE_BLOB,          MYSQL_TYPE_VAR_STRING,  MYSQL_TYPE_STRING,    MYSQL_TYPE_GEOMETRY,          MYSQL_TYPE_DECIMAL,     MYSQL_TYPE_NULL}
					Identifier:range4
					InitializerList:MYSQL_TYPE_ENUM
						Identifier:MYSQL_TYPE_ENUM
						Identifier:MYSQL_TYPE_SET
						Identifier:MYSQL_TYPE_TINY_BLOB
						Identifier:MYSQL_TYPE_MEDIUM_BLOB
						Identifier:MYSQL_TYPE_LONG_BLOB
						Identifier:MYSQL_TYPE_BLOB
						Identifier:MYSQL_TYPE_VAR_STRING
						Identifier:MYSQL_TYPE_STRING
						Identifier:MYSQL_TYPE_GEOMETRY
						Identifier:MYSQL_TYPE_DECIMAL
						Identifier:MYSQL_TYPE_NULL
		Statement:static
		IdentifierDeclStatement:const enum enum_field_types *range_list[] = {range1, range2, range3,                                                      range4},                                     **range_list_end =                                         range_list + sizeof(range_list) /                                                          sizeof(*range_list);
			IdentifierDecl:*range_list[] = {range1, range2, range3,                                                      range4}
				IdentifierDeclType:const enum enum_field_types * [ ]
				Identifier:range_list
				AssignmentExpression:*range_list[] = {range1, range2, range3,                                                      range4}
					Identifier:range_list
					InitializerList:range1
						Identifier:range1
						Identifier:range2
						Identifier:range3
						Identifier:range4
			IdentifierDecl:**range_list_end =                                         range_list + sizeof(range_list) /                                                          sizeof(*range_list)
				IdentifierDeclType:const enum enum_field_types * *
				Identifier:range_list_end
				AssignmentExpression:**range_list_end =                                         range_list + sizeof(range_list) /                                                          sizeof(*range_list)
					Identifier:range_list_end
					AdditiveExpression:range_list + sizeof(range_list) /                                                          sizeof(*range_list)
						Identifier:range_list
						MultiplicativeExpression:sizeof(range_list) /                                                          sizeof(*range_list)
							SizeofExpression:sizeof(range_list)
								Sizeof:sizeof
								Identifier:range_list
							SizeofExpression:sizeof(*range_list)
								Sizeof:sizeof
								UnaryOperationExpression:*range_list
									UnaryOperator:*
									Identifier:range_list
		IdentifierDeclStatement:const enum enum_field_types **range, *type;
			IdentifierDecl:**range
				IdentifierDeclType:const enum enum_field_types * *
				Identifier:range
			IdentifierDecl:*type
				IdentifierDeclType:const enum enum_field_types *
				Identifier:type
		IfStatement:if (type1 == type2)
			Condition:type1 == type2
				EqualityExpression:type1 == type2
					Identifier:type1
					Identifier:type2
			ReturnStatement:return true;
				Identifier:true
		ForStatement:for (range = range_list; range != range_list_end; ++range)
			ForInit:range = range_list;
				AssignmentExpression:range = range_list
					Identifier:range
					Identifier:range_list
			Condition:range != range_list_end
				EqualityExpression:range != range_list_end
					Identifier:range
					Identifier:range_list_end
			UnaryExpression:++range
				IncDec:++
				Identifier:range
			CompoundStatement:
				Statement:/* check that both type1 and type2 are in the same range */
				IdentifierDeclStatement:bool type1_found = false, type2_found = false;
					IdentifierDecl:type1_found = false
						IdentifierDeclType:bool
						Identifier:type1_found
						AssignmentExpression:type1_found = false
							Identifier:type1_found
							Identifier:false
					IdentifierDecl:type2_found = false
						IdentifierDeclType:bool
						Identifier:type2_found
						AssignmentExpression:type2_found = false
							Identifier:type2_found
							Identifier:false
				ForStatement:for (type = *range; *type != MYSQL_TYPE_NULL; type++)
					ForInit:type = *range;
						AssignmentExpression:type = *range
							Identifier:type
							UnaryOperationExpression:*range
								UnaryOperator:*
								Identifier:range
					Condition:*type != MYSQL_TYPE_NULL
						EqualityExpression:*type != MYSQL_TYPE_NULL
							UnaryOperationExpression:*type
								UnaryOperator:*
								Identifier:type
							Identifier:MYSQL_TYPE_NULL
					PostIncDecOperationExpression:type++
						Identifier:type
						IncDec:++
					CompoundStatement:
						ExpressionStatement:type1_found |= type1 == *type
							AssignmentExpression:type1_found |= type1 == *type
								Identifier:type1_found
								EqualityExpression:type1 == *type
									Identifier:type1
									UnaryOperationExpression:*type
										UnaryOperator:*
										Identifier:type
						ExpressionStatement:type2_found |= type2 == *type
							AssignmentExpression:type2_found |= type2 == *type
								Identifier:type2_found
								EqualityExpression:type2 == *type
									Identifier:type2
									UnaryOperationExpression:*type
										UnaryOperator:*
										Identifier:type
				IfStatement:if (type1_found || type2_found)
					Condition:type1_found || type2_found
						OrExpression:type1_found || type2_found
							Identifier:type1_found
							Identifier:type2_found
					ReturnStatement:return type1_found && type2_found;
						AndExpression:type1_found && type2_found
							Identifier:type1_found
							Identifier:type2_found
		ReturnStatement:return false;
			Identifier:false
	ReturnType:static bool
	Identifier:is_binary_compatible
	ParameterList:enum enum_field_types type1 , enum enum_field_types type2
		Parameter:enum enum_field_types type1
			ParameterType:enum enum_field_types
			Identifier:type1
		Parameter:enum enum_field_types type2
			ParameterType:enum enum_field_types
			Identifier:type2
FunctionDef:setup_one_fetch_function (MYSQL_BIND *param , MYSQL_FIELD *field)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("setup_one_fetch_function")
			CallExpression:DBUG_ENTER("setup_one_fetch_function")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"setup_one_fetch_function"
					Argument:"setup_one_fetch_function"
						Constant:"setup_one_fetch_function"
		Statement:/* Setup data copy functions for the different supported types */
		SwitchStatement:switch (param->buffer_type)
			Condition:param->buffer_type
				PtrMemberAccess:param->buffer_type
					Identifier:param
					Identifier:buffer_type
			CompoundStatement:
				Label:case MYSQL_TYPE_NULL:
					Identifier:MYSQL_TYPE_NULL
				Statement:/* for dummy binds */
				Statement:/*        It's not binary compatible with anything the server can return:        no need to setup fetch_result, as it'll be reset anyway      */
				ExpressionStatement:*param->length = 0
					AssignmentExpression:*param->length = 0
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:0
				BreakStatement:break;
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				ExpressionStatement:param->fetch_result = fetch_result_tinyint
					AssignmentExpression:param->fetch_result = fetch_result_tinyint
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_tinyint
				ExpressionStatement:*param->length = 1
					AssignmentExpression:*param->length = 1
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:1
				BreakStatement:break;
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				Label:case MYSQL_TYPE_YEAR:
					Identifier:MYSQL_TYPE_YEAR
				ExpressionStatement:param->fetch_result = fetch_result_short
					AssignmentExpression:param->fetch_result = fetch_result_short
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_short
				ExpressionStatement:*param->length = 2
					AssignmentExpression:*param->length = 2
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:2
				BreakStatement:break;
				Label:case MYSQL_TYPE_INT24:
					Identifier:MYSQL_TYPE_INT24
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				ExpressionStatement:param->fetch_result = fetch_result_int32
					AssignmentExpression:param->fetch_result = fetch_result_int32
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_int32
				ExpressionStatement:*param->length = 4
					AssignmentExpression:*param->length = 4
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:4
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				ExpressionStatement:param->fetch_result = fetch_result_int64
					AssignmentExpression:param->fetch_result = fetch_result_int64
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_int64
				ExpressionStatement:*param->length = 8
					AssignmentExpression:*param->length = 8
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:8
				BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				ExpressionStatement:param->fetch_result = fetch_result_float
					AssignmentExpression:param->fetch_result = fetch_result_float
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_float
				ExpressionStatement:*param->length = 4
					AssignmentExpression:*param->length = 4
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:4
				BreakStatement:break;
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				ExpressionStatement:param->fetch_result = fetch_result_double
					AssignmentExpression:param->fetch_result = fetch_result_double
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_double
				ExpressionStatement:*param->length = 8
					AssignmentExpression:*param->length = 8
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						Constant:8
				BreakStatement:break;
				Label:case MYSQL_TYPE_TIME:
					Identifier:MYSQL_TYPE_TIME
				ExpressionStatement:param->fetch_result = fetch_result_time
					AssignmentExpression:param->fetch_result = fetch_result_time
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_time
				ExpressionStatement:*param->length = sizeof(MYSQL_TIME)
					AssignmentExpression:*param->length = sizeof(MYSQL_TIME)
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						SizeofExpression:sizeof(MYSQL_TIME)
							Sizeof:sizeof
							Identifier:MYSQL_TIME
				BreakStatement:break;
				Label:case MYSQL_TYPE_DATE:
					Identifier:MYSQL_TYPE_DATE
				ExpressionStatement:param->fetch_result = fetch_result_date
					AssignmentExpression:param->fetch_result = fetch_result_date
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_date
				ExpressionStatement:*param->length = sizeof(MYSQL_TIME)
					AssignmentExpression:*param->length = sizeof(MYSQL_TIME)
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						SizeofExpression:sizeof(MYSQL_TIME)
							Sizeof:sizeof
							Identifier:MYSQL_TIME
				BreakStatement:break;
				Label:case MYSQL_TYPE_DATETIME:
					Identifier:MYSQL_TYPE_DATETIME
				Label:case MYSQL_TYPE_TIMESTAMP:
					Identifier:MYSQL_TYPE_TIMESTAMP
				ExpressionStatement:param->fetch_result = fetch_result_datetime
					AssignmentExpression:param->fetch_result = fetch_result_datetime
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_datetime
				ExpressionStatement:*param->length = sizeof(MYSQL_TIME)
					AssignmentExpression:*param->length = sizeof(MYSQL_TIME)
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
						SizeofExpression:sizeof(MYSQL_TIME)
							Sizeof:sizeof
							Identifier:MYSQL_TIME
				BreakStatement:break;
				Label:case MYSQL_TYPE_TINY_BLOB:
					Identifier:MYSQL_TYPE_TINY_BLOB
				Label:case MYSQL_TYPE_MEDIUM_BLOB:
					Identifier:MYSQL_TYPE_MEDIUM_BLOB
				Label:case MYSQL_TYPE_LONG_BLOB:
					Identifier:MYSQL_TYPE_LONG_BLOB
				Label:case MYSQL_TYPE_BLOB:
					Identifier:MYSQL_TYPE_BLOB
				Label:case MYSQL_TYPE_BIT:
					Identifier:MYSQL_TYPE_BIT
				ExpressionStatement:DBUG_ASSERT(param->buffer_length != 0)
					CallExpression:DBUG_ASSERT(param->buffer_length != 0)
						Callee:DBUG_ASSERT
							Identifier:DBUG_ASSERT
						ArgumentList:param->buffer_length != 0
							Argument:param->buffer_length != 0
								EqualityExpression:param->buffer_length != 0
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
									Constant:0
				ExpressionStatement:param->fetch_result = fetch_result_bin
					AssignmentExpression:param->fetch_result = fetch_result_bin
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_bin
				BreakStatement:break;
				Label:case MYSQL_TYPE_VAR_STRING:
					Identifier:MYSQL_TYPE_VAR_STRING
				Label:case MYSQL_TYPE_STRING:
					Identifier:MYSQL_TYPE_STRING
				Label:case MYSQL_TYPE_DECIMAL:
					Identifier:MYSQL_TYPE_DECIMAL
				Label:case MYSQL_TYPE_NEWDECIMAL:
					Identifier:MYSQL_TYPE_NEWDECIMAL
				Label:case MYSQL_TYPE_NEWDATE:
					Identifier:MYSQL_TYPE_NEWDATE
				Label:case MYSQL_TYPE_JSON:
					Identifier:MYSQL_TYPE_JSON
				ExpressionStatement:DBUG_ASSERT(param->buffer_length != 0)
					CallExpression:DBUG_ASSERT(param->buffer_length != 0)
						Callee:DBUG_ASSERT
							Identifier:DBUG_ASSERT
						ArgumentList:param->buffer_length != 0
							Argument:param->buffer_length != 0
								EqualityExpression:param->buffer_length != 0
									PtrMemberAccess:param->buffer_length
										Identifier:param
										Identifier:buffer_length
									Constant:0
				ExpressionStatement:param->fetch_result = fetch_result_str
					AssignmentExpression:param->fetch_result = fetch_result_str
						PtrMemberAccess:param->fetch_result
							Identifier:param
							Identifier:fetch_result
						Identifier:fetch_result_str
				BreakStatement:break;
				Label:default:
					Identifier:default
				ExpressionStatement:DBUG_PRINT("error",                 ("Unknown param->buffer_type: %u", (uint)param->buffer_type))
					CallExpression:DBUG_PRINT("error",                 ("Unknown param->buffer_type: %u", (uint)param->buffer_type))
						Callee:DBUG_PRINT
							Identifier:DBUG_PRINT
						ArgumentList:"error"
							Argument:"error"
								Constant:"error"
							Argument:"Unknown param->buffer_type: %u", (uint)param->buffer_type
								Expression:"Unknown param->buffer_type: %u", (uint)param->buffer_type
									Constant:"Unknown param->buffer_type: %u"
									CastExpression:(uint)param->buffer_type
										CastTarget:uint
										PtrMemberAccess:param->buffer_type
											Identifier:param
											Identifier:buffer_type
				ExpressionStatement:DBUG_RETURN(true)
					CallExpression:DBUG_RETURN(true)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:true
							Argument:true
								Identifier:true
		IfStatement:if (!is_binary_compatible(param->buffer_type, field->type))
			Condition:!is_binary_compatible(param->buffer_type, field->type)
				UnaryOperationExpression:!is_binary_compatible(param->buffer_type, field->type)
					UnaryOperator:!
					CallExpression:is_binary_compatible(param->buffer_type, field->type)
						Callee:is_binary_compatible
							Identifier:is_binary_compatible
						ArgumentList:param->buffer_type
							Argument:param->buffer_type
								PtrMemberAccess:param->buffer_type
									Identifier:param
									Identifier:buffer_type
							Argument:field->type
								PtrMemberAccess:field->type
									Identifier:field
									Identifier:type
			ExpressionStatement:param->fetch_result = fetch_result_with_conversion
				AssignmentExpression:param->fetch_result = fetch_result_with_conversion
					PtrMemberAccess:param->fetch_result
						Identifier:param
						Identifier:fetch_result
					Identifier:fetch_result_with_conversion
		Statement:/* Setup skip_result functions (to calculate max_length) */
		ExpressionStatement:param->skip_result = skip_result_fixed
			AssignmentExpression:param->skip_result = skip_result_fixed
				PtrMemberAccess:param->skip_result
					Identifier:param
					Identifier:skip_result
				Identifier:skip_result_fixed
		SwitchStatement:switch (field->type)
			Condition:field->type
				PtrMemberAccess:field->type
					Identifier:field
					Identifier:type
			CompoundStatement:
				Label:case MYSQL_TYPE_NULL:
					Identifier:MYSQL_TYPE_NULL
				Statement:/* for dummy binds */
				ExpressionStatement:param->pack_length = 0
					AssignmentExpression:param->pack_length = 0
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:0
				ExpressionStatement:field->max_length = 0
					AssignmentExpression:field->max_length = 0
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:0
				BreakStatement:break;
				Label:case MYSQL_TYPE_TINY:
					Identifier:MYSQL_TYPE_TINY
				ExpressionStatement:param->pack_length = 1
					AssignmentExpression:param->pack_length = 1
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:1
				ExpressionStatement:field->max_length = 4
					AssignmentExpression:field->max_length = 4
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:4
				Statement:/* as in '-127' */
				BreakStatement:break;
				Label:case MYSQL_TYPE_YEAR:
					Identifier:MYSQL_TYPE_YEAR
				Label:case MYSQL_TYPE_SHORT:
					Identifier:MYSQL_TYPE_SHORT
				ExpressionStatement:param->pack_length = 2
					AssignmentExpression:param->pack_length = 2
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:2
				ExpressionStatement:field->max_length = 6
					AssignmentExpression:field->max_length = 6
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:6
				Statement:/* as in '-32767' */
				BreakStatement:break;
				Label:case MYSQL_TYPE_INT24:
					Identifier:MYSQL_TYPE_INT24
				ExpressionStatement:field->max_length = 9
					AssignmentExpression:field->max_length = 9
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:9
				Statement:/* as in '16777216' or in '-8388607' */
				ExpressionStatement:param->pack_length = 4
					AssignmentExpression:param->pack_length = 4
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:4
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONG:
					Identifier:MYSQL_TYPE_LONG
				ExpressionStatement:field->max_length = 11
					AssignmentExpression:field->max_length = 11
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:11
				Statement:/* '-2147483647' */
				ExpressionStatement:param->pack_length = 4
					AssignmentExpression:param->pack_length = 4
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:4
				BreakStatement:break;
				Label:case MYSQL_TYPE_LONGLONG:
					Identifier:MYSQL_TYPE_LONGLONG
				ExpressionStatement:field->max_length = 21
					AssignmentExpression:field->max_length = 21
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:21
				Statement:/* '18446744073709551616' */
				ExpressionStatement:param->pack_length = 8
					AssignmentExpression:param->pack_length = 8
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:8
				BreakStatement:break;
				Label:case MYSQL_TYPE_FLOAT:
					Identifier:MYSQL_TYPE_FLOAT
				ExpressionStatement:param->pack_length = 4
					AssignmentExpression:param->pack_length = 4
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:4
				ExpressionStatement:field->max_length = MAX_DOUBLE_STRING_REP_LENGTH
					AssignmentExpression:field->max_length = MAX_DOUBLE_STRING_REP_LENGTH
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Identifier:MAX_DOUBLE_STRING_REP_LENGTH
				BreakStatement:break;
				Label:case MYSQL_TYPE_DOUBLE:
					Identifier:MYSQL_TYPE_DOUBLE
				ExpressionStatement:param->pack_length = 8
					AssignmentExpression:param->pack_length = 8
						PtrMemberAccess:param->pack_length
							Identifier:param
							Identifier:pack_length
						Constant:8
				ExpressionStatement:field->max_length = MAX_DOUBLE_STRING_REP_LENGTH
					AssignmentExpression:field->max_length = MAX_DOUBLE_STRING_REP_LENGTH
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Identifier:MAX_DOUBLE_STRING_REP_LENGTH
				BreakStatement:break;
				Label:case MYSQL_TYPE_TIME:
					Identifier:MYSQL_TYPE_TIME
				ExpressionStatement:field->max_length = 17
					AssignmentExpression:field->max_length = 17
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:17
				Statement:/* -819:23:48.123456 */
				ExpressionStatement:param->skip_result = skip_result_with_length
					AssignmentExpression:param->skip_result = skip_result_with_length
						PtrMemberAccess:param->skip_result
							Identifier:param
							Identifier:skip_result
						Identifier:skip_result_with_length
				BreakStatement:break;
				Label:case MYSQL_TYPE_DATE:
					Identifier:MYSQL_TYPE_DATE
				ExpressionStatement:field->max_length = 10
					AssignmentExpression:field->max_length = 10
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Constant:10
				Statement:/* 2003-11-11 */
				ExpressionStatement:param->skip_result = skip_result_with_length
					AssignmentExpression:param->skip_result = skip_result_with_length
						PtrMemberAccess:param->skip_result
							Identifier:param
							Identifier:skip_result
						Identifier:skip_result_with_length
				BreakStatement:break;
				Label:case MYSQL_TYPE_DATETIME:
					Identifier:MYSQL_TYPE_DATETIME
				Label:case MYSQL_TYPE_TIMESTAMP:
					Identifier:MYSQL_TYPE_TIMESTAMP
				ExpressionStatement:param->skip_result = skip_result_with_length
					AssignmentExpression:param->skip_result = skip_result_with_length
						PtrMemberAccess:param->skip_result
							Identifier:param
							Identifier:skip_result
						Identifier:skip_result_with_length
				ExpressionStatement:field->max_length = MAX_DATE_STRING_REP_LENGTH
					AssignmentExpression:field->max_length = MAX_DATE_STRING_REP_LENGTH
						PtrMemberAccess:field->max_length
							Identifier:field
							Identifier:max_length
						Identifier:MAX_DATE_STRING_REP_LENGTH
				BreakStatement:break;
				Label:case MYSQL_TYPE_DECIMAL:
					Identifier:MYSQL_TYPE_DECIMAL
				Label:case MYSQL_TYPE_NEWDECIMAL:
					Identifier:MYSQL_TYPE_NEWDECIMAL
				Label:case MYSQL_TYPE_ENUM:
					Identifier:MYSQL_TYPE_ENUM
				Label:case MYSQL_TYPE_SET:
					Identifier:MYSQL_TYPE_SET
				Label:case MYSQL_TYPE_GEOMETRY:
					Identifier:MYSQL_TYPE_GEOMETRY
				Label:case MYSQL_TYPE_TINY_BLOB:
					Identifier:MYSQL_TYPE_TINY_BLOB
				Label:case MYSQL_TYPE_MEDIUM_BLOB:
					Identifier:MYSQL_TYPE_MEDIUM_BLOB
				Label:case MYSQL_TYPE_LONG_BLOB:
					Identifier:MYSQL_TYPE_LONG_BLOB
				Label:case MYSQL_TYPE_BLOB:
					Identifier:MYSQL_TYPE_BLOB
				Label:case MYSQL_TYPE_VAR_STRING:
					Identifier:MYSQL_TYPE_VAR_STRING
				Label:case MYSQL_TYPE_STRING:
					Identifier:MYSQL_TYPE_STRING
				Label:case MYSQL_TYPE_BIT:
					Identifier:MYSQL_TYPE_BIT
				Label:case MYSQL_TYPE_NEWDATE:
					Identifier:MYSQL_TYPE_NEWDATE
				Label:case MYSQL_TYPE_JSON:
					Identifier:MYSQL_TYPE_JSON
				ExpressionStatement:param->skip_result = skip_result_string
					AssignmentExpression:param->skip_result = skip_result_string
						PtrMemberAccess:param->skip_result
							Identifier:param
							Identifier:skip_result
						Identifier:skip_result_string
				BreakStatement:break;
				Label:default:
					Identifier:default
				ExpressionStatement:DBUG_PRINT("error", ("Unknown field->type: %u", (uint)field->type))
					CallExpression:DBUG_PRINT("error", ("Unknown field->type: %u", (uint)field->type))
						Callee:DBUG_PRINT
							Identifier:DBUG_PRINT
						ArgumentList:"error"
							Argument:"error"
								Constant:"error"
							Argument:"Unknown field->type: %u", (uint)field->type
								Expression:"Unknown field->type: %u", (uint)field->type
									Constant:"Unknown field->type: %u"
									CastExpression:(uint)field->type
										CastTarget:uint
										PtrMemberAccess:field->type
											Identifier:field
											Identifier:type
				ExpressionStatement:DBUG_RETURN(true)
					CallExpression:DBUG_RETURN(true)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:true
							Argument:true
								Identifier:true
		ExpressionStatement:DBUG_RETURN(false)
			CallExpression:DBUG_RETURN(false)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:false
					Argument:false
						Identifier:false
	ReturnType:static bool
	Identifier:setup_one_fetch_function
	ParameterList:MYSQL_BIND *param , MYSQL_FIELD *field
		Parameter:MYSQL_BIND *param
			ParameterType:MYSQL_BIND *
			Identifier:param
		Parameter:MYSQL_FIELD *field
			ParameterType:MYSQL_FIELD *
			Identifier:field
FunctionDef:mysql_stmt_bind_result (MYSQL_STMT *stmt , MYSQL_BIND *my_bind)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_BIND *param, *end;
			IdentifierDecl:*param
				IdentifierDeclType:MYSQL_BIND *
				Identifier:param
			IdentifierDecl:*end
				IdentifierDeclType:MYSQL_BIND *
				Identifier:end
		IdentifierDeclStatement:MYSQL_FIELD *field;
			IdentifierDecl:*field
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:field
		IdentifierDeclStatement:ulong bind_count = stmt->field_count;
			IdentifierDecl:bind_count = stmt->field_count
				IdentifierDeclType:ulong
				Identifier:bind_count
				AssignmentExpression:bind_count = stmt->field_count
					Identifier:bind_count
					PtrMemberAccess:stmt->field_count
						Identifier:stmt
						Identifier:field_count
		IdentifierDeclStatement:uint param_count = 0;
			IdentifierDecl:param_count = 0
				IdentifierDeclType:uint
				Identifier:param_count
				AssignmentExpression:param_count = 0
					Identifier:param_count
					Constant:0
		ExpressionStatement:DBUG_ENTER("mysql_stmt_bind_result")
			CallExpression:DBUG_ENTER("mysql_stmt_bind_result")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_bind_result"
					Argument:"mysql_stmt_bind_result"
						Constant:"mysql_stmt_bind_result"
		ExpressionStatement:DBUG_PRINT("enter", ("field_count: %lu", bind_count))
			CallExpression:DBUG_PRINT("enter", ("field_count: %lu", bind_count))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"field_count: %lu", bind_count
						Expression:"field_count: %lu", bind_count
							Constant:"field_count: %lu"
							Identifier:bind_count
		IfStatement:if (!bind_count)
			Condition:!bind_count
				UnaryOperationExpression:!bind_count
					UnaryOperator:!
					Identifier:bind_count
			CompoundStatement:
				IdentifierDeclStatement:int errorcode = (int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE                        ? CR_NO_PREPARE_STMT                        : CR_NO_STMT_METADATA;
					IdentifierDecl:errorcode = (int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE                        ? CR_NO_PREPARE_STMT                        : CR_NO_STMT_METADATA
						IdentifierDeclType:int
						Identifier:errorcode
						AssignmentExpression:errorcode = (int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE                        ? CR_NO_PREPARE_STMT                        : CR_NO_STMT_METADATA
							Identifier:errorcode
							ConditionalExpression:(int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE                        ? CR_NO_PREPARE_STMT                        : CR_NO_STMT_METADATA
								Condition:(int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE
									RelationalExpression:(int)stmt->state < (int)MYSQL_STMT_PREPARE_DONE
										CastExpression:(int)stmt->state
											CastTarget:int
											PtrMemberAccess:stmt->state
												Identifier:stmt
												Identifier:state
										CastExpression:(int)MYSQL_STMT_PREPARE_DONE
											CastTarget:int
											Identifier:MYSQL_STMT_PREPARE_DONE
								Identifier:CR_NO_PREPARE_STMT
								Identifier:CR_NO_STMT_METADATA
				ExpressionStatement:set_stmt_error(stmt, errorcode, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, errorcode, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:errorcode
								Identifier:errorcode
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		Statement:/*    We only need to check that stmt->field_count - if it is not null    stmt->bind was initialized in mysql_stmt_prepare    stmt->bind overlaps with bind if mysql_stmt_bind_param    is called from mysql_stmt_store_result.    BEWARE of buffer overwrite ...  */
		IfStatement:if (stmt->bind != my_bind)
			Condition:stmt->bind != my_bind
				EqualityExpression:stmt->bind != my_bind
					PtrMemberAccess:stmt->bind
						Identifier:stmt
						Identifier:bind
					Identifier:my_bind
			ExpressionStatement:memcpy((char *)stmt->bind, (char *)my_bind,           sizeof(MYSQL_BIND) * bind_count)
				CallExpression:memcpy((char *)stmt->bind, (char *)my_bind,           sizeof(MYSQL_BIND) * bind_count)
					Callee:memcpy
						Identifier:memcpy
					ArgumentList:(char *)stmt->bind
						Argument:(char *)stmt->bind
							CastExpression:(char *)stmt->bind
								CastTarget:char *
								PtrMemberAccess:stmt->bind
									Identifier:stmt
									Identifier:bind
						Argument:(char *)my_bind
							CastExpression:(char *)my_bind
								CastTarget:char *
								Identifier:my_bind
						Argument:sizeof(MYSQL_BIND) * bind_count
							MultiplicativeExpression:sizeof(MYSQL_BIND) * bind_count
								SizeofExpression:sizeof(MYSQL_BIND)
									Sizeof:sizeof
									Identifier:MYSQL_BIND
								Identifier:bind_count
		ForStatement:for (param = stmt->bind, end = param + bind_count, field = stmt->fields;       param < end; param++, field++)
			ForInit:param = stmt->bind, end = param + bind_count, field = stmt->fields;
				Expression:param = stmt->bind, end = param + bind_count, field = stmt->fields
					AssignmentExpression:param = stmt->bind
						Identifier:param
						PtrMemberAccess:stmt->bind
							Identifier:stmt
							Identifier:bind
					Expression:end = param + bind_count, field = stmt->fields
						AssignmentExpression:end = param + bind_count
							Identifier:end
							AdditiveExpression:param + bind_count
								Identifier:param
								Identifier:bind_count
						AssignmentExpression:field = stmt->fields
							Identifier:field
							PtrMemberAccess:stmt->fields
								Identifier:stmt
								Identifier:fields
			Condition:param < end
				RelationalExpression:param < end
					Identifier:param
					Identifier:end
			Expression:param++, field++
				PostIncDecOperationExpression:param++
					Identifier:param
					IncDec:++
				PostIncDecOperationExpression:field++
					Identifier:field
					IncDec:++
			CompoundStatement:
				ExpressionStatement:DBUG_PRINT("info", ("buffer_type: %u  field_type: %u",                        (uint)param->buffer_type, (uint)field->type))
					CallExpression:DBUG_PRINT("info", ("buffer_type: %u  field_type: %u",                        (uint)param->buffer_type, (uint)field->type))
						Callee:DBUG_PRINT
							Identifier:DBUG_PRINT
						ArgumentList:"info"
							Argument:"info"
								Constant:"info"
							Argument:"buffer_type: %u  field_type: %u",                        (uint)param->buffer_type, (uint)field->type
								Expression:"buffer_type: %u  field_type: %u",                        (uint)param->buffer_type, (uint)field->type
									Constant:"buffer_type: %u  field_type: %u"
									Expression:(uint)param->buffer_type, (uint)field->type
										CastExpression:(uint)param->buffer_type
											CastTarget:uint
											PtrMemberAccess:param->buffer_type
												Identifier:param
												Identifier:buffer_type
										CastExpression:(uint)field->type
											CastTarget:uint
											PtrMemberAccess:field->type
												Identifier:field
												Identifier:type
				Statement:/*      Set param->is_null to point to a dummy variable if it's not set.      This is to make the execute code easier    */
				IfStatement:if (!param->is_null)
					Condition:!param->is_null
						UnaryOperationExpression:!param->is_null
							UnaryOperator:!
							PtrMemberAccess:param->is_null
								Identifier:param
								Identifier:is_null
					ExpressionStatement:param->is_null = &param->is_null_value
						AssignmentExpression:param->is_null = &param->is_null_value
							PtrMemberAccess:param->is_null
								Identifier:param
								Identifier:is_null
							UnaryOperationExpression:&param->is_null_value
								UnaryOperator:&
								PtrMemberAccess:param->is_null_value
									Identifier:param
									Identifier:is_null_value
				IfStatement:if (!param->length)
					Condition:!param->length
						UnaryOperationExpression:!param->length
							UnaryOperator:!
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
					ExpressionStatement:param->length = &param->length_value
						AssignmentExpression:param->length = &param->length_value
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
							UnaryOperationExpression:&param->length_value
								UnaryOperator:&
								PtrMemberAccess:param->length_value
									Identifier:param
									Identifier:length_value
				IfStatement:if (!param->error)
					Condition:!param->error
						UnaryOperationExpression:!param->error
							UnaryOperator:!
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
					ExpressionStatement:param->error = &param->error_value
						AssignmentExpression:param->error = &param->error_value
							PtrMemberAccess:param->error
								Identifier:param
								Identifier:error
							UnaryOperationExpression:&param->error_value
								UnaryOperator:&
								PtrMemberAccess:param->error_value
									Identifier:param
									Identifier:error_value
				ExpressionStatement:param->param_number = param_count++
					AssignmentExpression:param->param_number = param_count++
						PtrMemberAccess:param->param_number
							Identifier:param
							Identifier:param_number
						PostIncDecOperationExpression:param_count++
							Identifier:param_count
							IncDec:++
				ExpressionStatement:param->offset = 0
					AssignmentExpression:param->offset = 0
						PtrMemberAccess:param->offset
							Identifier:param
							Identifier:offset
						Constant:0
				IfStatement:if (setup_one_fetch_function(param, field))
					Condition:setup_one_fetch_function(param, field)
						CallExpression:setup_one_fetch_function(param, field)
							Callee:setup_one_fetch_function
								Identifier:setup_one_fetch_function
							ArgumentList:param
								Argument:param
									Identifier:param
								Argument:field
									Identifier:field
					CompoundStatement:
						ExpressionStatement:my_stpcpy(stmt->sqlstate, unknown_sqlstate)
							CallExpression:my_stpcpy(stmt->sqlstate, unknown_sqlstate)
								Callee:my_stpcpy
									Identifier:my_stpcpy
								ArgumentList:stmt->sqlstate
									Argument:stmt->sqlstate
										PtrMemberAccess:stmt->sqlstate
											Identifier:stmt
											Identifier:sqlstate
									Argument:unknown_sqlstate
										Identifier:unknown_sqlstate
						ExpressionStatement:sprintf(stmt->last_error,              ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE),              field->type, param_count)
							CallExpression:sprintf(stmt->last_error,              ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE),              field->type, param_count)
								Callee:sprintf
									Identifier:sprintf
								ArgumentList:stmt->last_error
									Argument:stmt->last_error
										PtrMemberAccess:stmt->last_error
											Identifier:stmt
											Identifier:last_error
									Argument:ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE)
										CallExpression:ER_CLIENT(stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE)
											Callee:ER_CLIENT
												Identifier:ER_CLIENT
											ArgumentList:stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE
												Argument:stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE
													AssignmentExpression:stmt->last_errno = CR_UNSUPPORTED_PARAM_TYPE
														PtrMemberAccess:stmt->last_errno
															Identifier:stmt
															Identifier:last_errno
														Identifier:CR_UNSUPPORTED_PARAM_TYPE
									Argument:field->type
										PtrMemberAccess:field->type
											Identifier:field
											Identifier:type
									Argument:param_count
										Identifier:param_count
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
		ExpressionStatement:stmt->bind_result_done = BIND_RESULT_DONE
			AssignmentExpression:stmt->bind_result_done = BIND_RESULT_DONE
				PtrMemberAccess:stmt->bind_result_done
					Identifier:stmt
					Identifier:bind_result_done
				Identifier:BIND_RESULT_DONE
		IfStatement:if (stmt->mysql->options.report_data_truncation)
			Condition:stmt->mysql->options.report_data_truncation
				MemberAccess:stmt->mysql->options.report_data_truncation
					PtrMemberAccess:stmt->mysql->options
						PtrMemberAccess:stmt->mysql
							Identifier:stmt
							Identifier:mysql
						Identifier:options
					Identifier:report_data_truncation
			ExpressionStatement:stmt->bind_result_done |= REPORT_DATA_TRUNCATION
				AssignmentExpression:stmt->bind_result_done |= REPORT_DATA_TRUNCATION
					PtrMemberAccess:stmt->bind_result_done
						Identifier:stmt
						Identifier:bind_result_done
					Identifier:REPORT_DATA_TRUNCATION
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_bind_result
	ParameterList:MYSQL_STMT *stmt , MYSQL_BIND *my_bind
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:MYSQL_BIND *my_bind
			ParameterType:MYSQL_BIND *
			Identifier:my_bind
FunctionDef:stmt_fetch_row (MYSQL_STMT *stmt , uchar *row)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_BIND *my_bind, *end;
			IdentifierDecl:*my_bind
				IdentifierDeclType:MYSQL_BIND *
				Identifier:my_bind
			IdentifierDecl:*end
				IdentifierDeclType:MYSQL_BIND *
				Identifier:end
		IdentifierDeclStatement:MYSQL_FIELD *field;
			IdentifierDecl:*field
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:field
		IdentifierDeclStatement:uchar *null_ptr, bit;
			IdentifierDecl:*null_ptr
				IdentifierDeclType:uchar *
				Identifier:null_ptr
			IdentifierDecl:bit
				IdentifierDeclType:uchar
				Identifier:bit
		IdentifierDeclStatement:int truncation_count = 0;
			IdentifierDecl:truncation_count = 0
				IdentifierDeclType:int
				Identifier:truncation_count
				AssignmentExpression:truncation_count = 0
					Identifier:truncation_count
					Constant:0
		Statement:/*    Precondition: if stmt->field_count is zero or row is NULL, read_row_*    function must return no data.  */
		ExpressionStatement:DBUG_ASSERT(stmt->field_count)
			CallExpression:DBUG_ASSERT(stmt->field_count)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:stmt->field_count
					Argument:stmt->field_count
						PtrMemberAccess:stmt->field_count
							Identifier:stmt
							Identifier:field_count
		ExpressionStatement:DBUG_ASSERT(row)
			CallExpression:DBUG_ASSERT(row)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:row
					Argument:row
						Identifier:row
		IfStatement:if (!stmt->bind_result_done)
			Condition:!stmt->bind_result_done
				UnaryOperationExpression:!stmt->bind_result_done
					UnaryOperator:!
					PtrMemberAccess:stmt->bind_result_done
						Identifier:stmt
						Identifier:bind_result_done
			CompoundStatement:
				Statement:/* If output parameters were not bound we should just return success */
				ReturnStatement:return 0;
					Constant:0
		ExpressionStatement:null_ptr = row
			AssignmentExpression:null_ptr = row
				Identifier:null_ptr
				Identifier:row
		ExpressionStatement:row += (stmt->field_count + 9) / 8
			AssignmentExpression:row += (stmt->field_count + 9) / 8
				Identifier:row
				MultiplicativeExpression:(stmt->field_count + 9) / 8
					AdditiveExpression:stmt->field_count + 9
						PtrMemberAccess:stmt->field_count
							Identifier:stmt
							Identifier:field_count
						Constant:9
					Constant:8
		Statement:/* skip null bits */
		ExpressionStatement:bit = 4
			AssignmentExpression:bit = 4
				Identifier:bit
				Constant:4
		Statement:/* first 2 bits are reserved */
		Statement:/* Copy complete row to application buffers */
		ForStatement:for (my_bind = stmt->bind, end = my_bind + stmt->field_count,      field = stmt->fields;       my_bind < end; my_bind++, field++)
			ForInit:my_bind = stmt->bind, end = my_bind + stmt->field_count,      field = stmt->fields;
				Expression:my_bind = stmt->bind, end = my_bind + stmt->field_count,      field = stmt->fields
					AssignmentExpression:my_bind = stmt->bind
						Identifier:my_bind
						PtrMemberAccess:stmt->bind
							Identifier:stmt
							Identifier:bind
					Expression:end = my_bind + stmt->field_count,      field = stmt->fields
						AssignmentExpression:end = my_bind + stmt->field_count
							Identifier:end
							AdditiveExpression:my_bind + stmt->field_count
								Identifier:my_bind
								PtrMemberAccess:stmt->field_count
									Identifier:stmt
									Identifier:field_count
						AssignmentExpression:field = stmt->fields
							Identifier:field
							PtrMemberAccess:stmt->fields
								Identifier:stmt
								Identifier:fields
			Condition:my_bind < end
				RelationalExpression:my_bind < end
					Identifier:my_bind
					Identifier:end
			Expression:my_bind++, field++
				PostIncDecOperationExpression:my_bind++
					Identifier:my_bind
					IncDec:++
				PostIncDecOperationExpression:field++
					Identifier:field
					IncDec:++
			CompoundStatement:
				ExpressionStatement:*my_bind->error = 0
					AssignmentExpression:*my_bind->error = 0
						UnaryOperationExpression:*my_bind->error
							UnaryOperator:*
							PtrMemberAccess:my_bind->error
								Identifier:my_bind
								Identifier:error
						Constant:0
				IfStatement:if (*null_ptr & bit)
					Condition:*null_ptr & bit
						BitAndExpression:*null_ptr & bit
							UnaryOperationExpression:*null_ptr
								UnaryOperator:*
								Identifier:null_ptr
							Identifier:bit
					CompoundStatement:
						Statement:/*        We should set both row_ptr and is_null to be able to see        nulls in mysql_stmt_fetch_column. This is because is_null may point        to user data which can be overwritten between mysql_stmt_fetch and        mysql_stmt_fetch_column, and in this case nullness of column will be        lost. See mysql_stmt_fetch_column for details.      */
						ExpressionStatement:my_bind->row_ptr = NULL
							AssignmentExpression:my_bind->row_ptr = NULL
								PtrMemberAccess:my_bind->row_ptr
									Identifier:my_bind
									Identifier:row_ptr
								Identifier:NULL
						ExpressionStatement:*my_bind->is_null = 1
							AssignmentExpression:*my_bind->is_null = 1
								UnaryOperationExpression:*my_bind->is_null
									UnaryOperator:*
									PtrMemberAccess:my_bind->is_null
										Identifier:my_bind
										Identifier:is_null
								Constant:1
				IfStatement:if (!((bit <<= 1) & 255))
					Condition:!((bit <<= 1) & 255)
						UnaryOperationExpression:!((bit <<= 1) & 255)
							UnaryOperator:!
							BitAndExpression:(bit <<= 1) & 255
								AssignmentExpression:bit <<= 1
									Identifier:bit
									Constant:1
								Constant:255
					CompoundStatement:
						ExpressionStatement:bit = 1
							AssignmentExpression:bit = 1
								Identifier:bit
								Constant:1
						Statement:/* To next uchar */
						ExpressionStatement:null_ptr++
							PostIncDecOperationExpression:null_ptr++
								Identifier:null_ptr
								IncDec:++
		IfStatement:if (truncation_count && (stmt->bind_result_done & REPORT_DATA_TRUNCATION))
			Condition:truncation_count && (stmt->bind_result_done & REPORT_DATA_TRUNCATION)
				AndExpression:truncation_count && (stmt->bind_result_done & REPORT_DATA_TRUNCATION)
					Identifier:truncation_count
					BitAndExpression:stmt->bind_result_done & REPORT_DATA_TRUNCATION
						PtrMemberAccess:stmt->bind_result_done
							Identifier:stmt
							Identifier:bind_result_done
						Identifier:REPORT_DATA_TRUNCATION
			ReturnStatement:return MYSQL_DATA_TRUNCATED;
				Identifier:MYSQL_DATA_TRUNCATED
		ReturnStatement:return 0;
			Constant:0
	ReturnType:static int
	Identifier:stmt_fetch_row
	ParameterList:MYSQL_STMT *stmt , uchar *row
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:uchar *row
			ParameterType:uchar *
			Identifier:row
FunctionDef:cli_unbuffered_fetch (MYSQL *mysql , char **row)
	CompoundStatement:
		IdentifierDeclStatement:ulong len = 0;
			IdentifierDecl:len = 0
				IdentifierDeclType:ulong
				Identifier:len
				AssignmentExpression:len = 0
					Identifier:len
					Constant:0
		IdentifierDeclStatement:bool is_data_packet;
			IdentifierDecl:is_data_packet
				IdentifierDeclType:bool
				Identifier:is_data_packet
		IfStatement:if (packet_error == cli_safe_read(mysql, &is_data_packet))
			Condition:packet_error == cli_safe_read(mysql, &is_data_packet)
				EqualityExpression:packet_error == cli_safe_read(mysql, &is_data_packet)
					Identifier:packet_error
					CallExpression:cli_safe_read(mysql, &is_data_packet)
						Callee:cli_safe_read
							Identifier:cli_safe_read
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:&is_data_packet
								UnaryOperationExpression:&is_data_packet
									UnaryOperator:&
									Identifier:is_data_packet
			CompoundStatement:
				ExpressionStatement:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
					CallExpression:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
						Callee:MYSQL_TRACE_STAGE
							Identifier:MYSQL_TRACE_STAGE
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:READY_FOR_COMMAND
								Identifier:READY_FOR_COMMAND
				ReturnStatement:return 1;
					Constant:1
		IfStatement:if (mysql->net.read_pos[0] != 0 && !is_data_packet)
			Condition:mysql->net.read_pos[0] != 0 && !is_data_packet
				AndExpression:mysql->net.read_pos[0] != 0 && !is_data_packet
					EqualityExpression:mysql->net.read_pos[0] != 0
						ArrayIndexing:mysql->net.read_pos[0]
							MemberAccess:mysql->net.read_pos
								PtrMemberAccess:mysql->net
									Identifier:mysql
									Identifier:net
								Identifier:read_pos
							Constant:0
						Constant:0
					UnaryOperationExpression:!is_data_packet
						UnaryOperator:!
						Identifier:is_data_packet
			CompoundStatement:
				Statement:/* in case of new client read the OK packet */
				IfStatement:if (mysql->server_capabilities & CLIENT_DEPRECATE_EOF)
					Condition:mysql->server_capabilities & CLIENT_DEPRECATE_EOF
						BitAndExpression:mysql->server_capabilities & CLIENT_DEPRECATE_EOF
							PtrMemberAccess:mysql->server_capabilities
								Identifier:mysql
								Identifier:server_capabilities
							Identifier:CLIENT_DEPRECATE_EOF
					ExpressionStatement:read_ok_ex(mysql, len)
						CallExpression:read_ok_ex(mysql, len)
							Callee:read_ok_ex
								Identifier:read_ok_ex
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:len
									Identifier:len
				ExpressionStatement:*row = NULL
					AssignmentExpression:*row = NULL
						UnaryOperationExpression:*row
							UnaryOperator:*
							Identifier:row
						Identifier:NULL
				ExpressionStatement:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
					CallExpression:MYSQL_TRACE_STAGE(mysql, READY_FOR_COMMAND)
						Callee:MYSQL_TRACE_STAGE
							Identifier:MYSQL_TRACE_STAGE
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:READY_FOR_COMMAND
								Identifier:READY_FOR_COMMAND
		ReturnStatement:return 0;
			Constant:0
	ReturnType:int
	Identifier:cli_unbuffered_fetch
	ParameterList:MYSQL *mysql , char **row
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:char **row
			ParameterType:char * *
			Identifier:row
FunctionDef:mysql_stmt_fetch (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:int rc;
			IdentifierDecl:rc
				IdentifierDeclType:int
				Identifier:rc
		IdentifierDeclStatement:uchar *row;
			IdentifierDecl:*row
				IdentifierDeclType:uchar *
				Identifier:row
		ExpressionStatement:DBUG_ENTER("mysql_stmt_fetch")
			CallExpression:DBUG_ENTER("mysql_stmt_fetch")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_fetch"
					Argument:"mysql_stmt_fetch"
						Constant:"mysql_stmt_fetch"
		IfStatement:if ((rc = (*stmt->read_row_func)(stmt, &row)) ||      ((rc = stmt_fetch_row(stmt, row)) && rc != MYSQL_DATA_TRUNCATED))
			Condition:(rc = (*stmt->read_row_func)(stmt, &row)) ||      ((rc = stmt_fetch_row(stmt, row)) && rc != MYSQL_DATA_TRUNCATED)
				OrExpression:(rc = (*stmt->read_row_func)(stmt, &row)) ||      ((rc = stmt_fetch_row(stmt, row)) && rc != MYSQL_DATA_TRUNCATED)
					AssignmentExpression:rc = (*stmt->read_row_func)(stmt, &row)
						Identifier:rc
						CallExpression:(*stmt->read_row_func)(stmt, &row)
							Callee:*stmt->read_row_func
								UnaryOperationExpression:*stmt->read_row_func
									UnaryOperator:*
									PtrMemberAccess:stmt->read_row_func
										Identifier:stmt
										Identifier:read_row_func
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:&row
									UnaryOperationExpression:&row
										UnaryOperator:&
										Identifier:row
					AndExpression:(rc = stmt_fetch_row(stmt, row)) && rc != MYSQL_DATA_TRUNCATED
						AssignmentExpression:rc = stmt_fetch_row(stmt, row)
							Identifier:rc
							CallExpression:stmt_fetch_row(stmt, row)
								Callee:stmt_fetch_row
									Identifier:stmt_fetch_row
								ArgumentList:stmt
									Argument:stmt
										Identifier:stmt
									Argument:row
										Identifier:row
						EqualityExpression:rc != MYSQL_DATA_TRUNCATED
							Identifier:rc
							Identifier:MYSQL_DATA_TRUNCATED
			CompoundStatement:
				ExpressionStatement:stmt->state = MYSQL_STMT_PREPARE_DONE
					AssignmentExpression:stmt->state = MYSQL_STMT_PREPARE_DONE
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
						Identifier:MYSQL_STMT_PREPARE_DONE
				Statement:/* XXX: this is buggy */
				ExpressionStatement:stmt->read_row_func = (rc == MYSQL_NO_DATA) ? stmt_read_row_no_data                                                : stmt_read_row_no_result_set
					AssignmentExpression:stmt->read_row_func = (rc == MYSQL_NO_DATA) ? stmt_read_row_no_data                                                : stmt_read_row_no_result_set
						PtrMemberAccess:stmt->read_row_func
							Identifier:stmt
							Identifier:read_row_func
						ConditionalExpression:(rc == MYSQL_NO_DATA) ? stmt_read_row_no_data                                                : stmt_read_row_no_result_set
							Condition:rc == MYSQL_NO_DATA
								EqualityExpression:rc == MYSQL_NO_DATA
									Identifier:rc
									Identifier:MYSQL_NO_DATA
							Identifier:stmt_read_row_no_data
							Identifier:stmt_read_row_no_result_set
		ExpressionStatement:DBUG_RETURN(rc)
			CallExpression:DBUG_RETURN(rc)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:rc
					Argument:rc
						Identifier:rc
	ReturnType:int STDCALL
	Identifier:mysql_stmt_fetch
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_fetch_column (MYSQL_STMT *stmt , MYSQL_BIND *my_bind , uint column , ulong offset)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_BIND *param = stmt->bind + column;
			IdentifierDecl:*param = stmt->bind + column
				IdentifierDeclType:MYSQL_BIND *
				Identifier:param
				AssignmentExpression:*param = stmt->bind + column
					Identifier:param
					AdditiveExpression:stmt->bind + column
						PtrMemberAccess:stmt->bind
							Identifier:stmt
							Identifier:bind
						Identifier:column
		ExpressionStatement:DBUG_ENTER("mysql_stmt_fetch_column")
			CallExpression:DBUG_ENTER("mysql_stmt_fetch_column")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_fetch_column"
					Argument:"mysql_stmt_fetch_column"
						Constant:"mysql_stmt_fetch_column"
		IfStatement:if ((int)stmt->state < (int)MYSQL_STMT_FETCH_DONE)
			Condition:(int)stmt->state < (int)MYSQL_STMT_FETCH_DONE
				RelationalExpression:(int)stmt->state < (int)MYSQL_STMT_FETCH_DONE
					CastExpression:(int)stmt->state
						CastTarget:int
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
					CastExpression:(int)MYSQL_STMT_FETCH_DONE
						CastTarget:int
						Identifier:MYSQL_STMT_FETCH_DONE
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_NO_DATA, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_NO_DATA, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_NO_DATA
								Identifier:CR_NO_DATA
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if (column >= stmt->field_count)
			Condition:column >= stmt->field_count
				RelationalExpression:column >= stmt->field_count
					Identifier:column
					PtrMemberAccess:stmt->field_count
						Identifier:stmt
						Identifier:field_count
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_INVALID_PARAMETER_NO, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_INVALID_PARAMETER_NO, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_INVALID_PARAMETER_NO
								Identifier:CR_INVALID_PARAMETER_NO
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if (!my_bind->error)
			Condition:!my_bind->error
				UnaryOperationExpression:!my_bind->error
					UnaryOperator:!
					PtrMemberAccess:my_bind->error
						Identifier:my_bind
						Identifier:error
			ExpressionStatement:my_bind->error = &my_bind->error_value
				AssignmentExpression:my_bind->error = &my_bind->error_value
					PtrMemberAccess:my_bind->error
						Identifier:my_bind
						Identifier:error
					UnaryOperationExpression:&my_bind->error_value
						UnaryOperator:&
						PtrMemberAccess:my_bind->error_value
							Identifier:my_bind
							Identifier:error_value
		ExpressionStatement:*my_bind->error = 0
			AssignmentExpression:*my_bind->error = 0
				UnaryOperationExpression:*my_bind->error
					UnaryOperator:*
					PtrMemberAccess:my_bind->error
						Identifier:my_bind
						Identifier:error
				Constant:0
		IfStatement:if (param->row_ptr)
			Condition:param->row_ptr
				PtrMemberAccess:param->row_ptr
					Identifier:param
					Identifier:row_ptr
			CompoundStatement:
				IdentifierDeclStatement:MYSQL_FIELD *field = stmt->fields + column;
					IdentifierDecl:*field = stmt->fields + column
						IdentifierDeclType:MYSQL_FIELD *
						Identifier:field
						AssignmentExpression:*field = stmt->fields + column
							Identifier:field
							AdditiveExpression:stmt->fields + column
								PtrMemberAccess:stmt->fields
									Identifier:stmt
									Identifier:fields
								Identifier:column
				IdentifierDeclStatement:uchar *row = param->row_ptr;
					IdentifierDecl:*row = param->row_ptr
						IdentifierDeclType:uchar *
						Identifier:row
						AssignmentExpression:*row = param->row_ptr
							Identifier:row
							PtrMemberAccess:param->row_ptr
								Identifier:param
								Identifier:row_ptr
				ExpressionStatement:my_bind->offset = offset
					AssignmentExpression:my_bind->offset = offset
						PtrMemberAccess:my_bind->offset
							Identifier:my_bind
							Identifier:offset
						Identifier:offset
				IfStatement:if (my_bind->is_null)
					Condition:my_bind->is_null
						PtrMemberAccess:my_bind->is_null
							Identifier:my_bind
							Identifier:is_null
					ExpressionStatement:*my_bind->is_null = 0
						AssignmentExpression:*my_bind->is_null = 0
							UnaryOperationExpression:*my_bind->is_null
								UnaryOperator:*
								PtrMemberAccess:my_bind->is_null
									Identifier:my_bind
									Identifier:is_null
							Constant:0
				IfStatement:if (my_bind->length)
					Condition:my_bind->length
						PtrMemberAccess:my_bind->length
							Identifier:my_bind
							Identifier:length
					Statement:/* Set the length if non char/binary types */
				ExpressionStatement:*my_bind->length = *param->length
					AssignmentExpression:*my_bind->length = *param->length
						UnaryOperationExpression:*my_bind->length
							UnaryOperator:*
							PtrMemberAccess:my_bind->length
								Identifier:my_bind
								Identifier:length
						UnaryOperationExpression:*param->length
							UnaryOperator:*
							PtrMemberAccess:param->length
								Identifier:param
								Identifier:length
				Statement:/* Needed for fetch_result() */
				ExpressionStatement:fetch_result_with_conversion(my_bind, field, &row)
					CallExpression:fetch_result_with_conversion(my_bind, field, &row)
						Callee:fetch_result_with_conversion
							Identifier:fetch_result_with_conversion
						ArgumentList:my_bind
							Argument:my_bind
								Identifier:my_bind
							Argument:field
								Identifier:field
							Argument:&row
								UnaryOperationExpression:&row
									UnaryOperator:&
									Identifier:row
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_stmt_fetch_column
	ParameterList:MYSQL_STMT *stmt , MYSQL_BIND *my_bind , uint column , ulong offset
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:MYSQL_BIND *my_bind
			ParameterType:MYSQL_BIND *
			Identifier:my_bind
		Parameter:uint column
			ParameterType:uint
			Identifier:column
		Parameter:ulong offset
			ParameterType:ulong
			Identifier:offset
FunctionDef:cli_read_binary_rows (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:ulong pkt_len;
			IdentifierDecl:pkt_len
				IdentifierDeclType:ulong
				Identifier:pkt_len
		IdentifierDeclStatement:uchar *cp;
			IdentifierDecl:*cp
				IdentifierDeclType:uchar *
				Identifier:cp
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		IdentifierDeclStatement:MYSQL_DATA *result = &stmt->result;
			IdentifierDecl:*result = &stmt->result
				IdentifierDeclType:MYSQL_DATA *
				Identifier:result
				AssignmentExpression:*result = &stmt->result
					Identifier:result
					UnaryOperationExpression:&stmt->result
						UnaryOperator:&
						PtrMemberAccess:stmt->result
							Identifier:stmt
							Identifier:result
		IdentifierDeclStatement:MYSQL_ROWS **prev_ptr = &result->data;
			IdentifierDecl:**prev_ptr = &result->data
				IdentifierDeclType:MYSQL_ROWS * *
				Identifier:prev_ptr
				AssignmentExpression:**prev_ptr = &result->data
					Identifier:prev_ptr
					UnaryOperationExpression:&result->data
						UnaryOperator:&
						PtrMemberAccess:result->data
							Identifier:result
							Identifier:data
		IdentifierDeclStatement:NET *net;
			IdentifierDecl:*net
				IdentifierDeclType:NET *
				Identifier:net
		IdentifierDeclStatement:bool is_data_packet;
			IdentifierDecl:is_data_packet
				IdentifierDeclType:bool
				Identifier:is_data_packet
		ExpressionStatement:DBUG_ENTER("cli_read_binary_rows")
			CallExpression:DBUG_ENTER("cli_read_binary_rows")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"cli_read_binary_rows"
					Argument:"cli_read_binary_rows"
						Constant:"cli_read_binary_rows"
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_SERVER_LOST
								Identifier:CR_SERVER_LOST
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		ExpressionStatement:net = &mysql->net
			AssignmentExpression:net = &mysql->net
				Identifier:net
				UnaryOperationExpression:&mysql->net
					UnaryOperator:&
					PtrMemberAccess:mysql->net
						Identifier:mysql
						Identifier:net
		Statement:/*   We could have read one row in execute() due to the lack of a cursor,   but one at most.  */
		ExpressionStatement:DBUG_ASSERT(result->rows <= 1)
			CallExpression:DBUG_ASSERT(result->rows <= 1)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:result->rows <= 1
					Argument:result->rows <= 1
						RelationalExpression:result->rows <= 1
							PtrMemberAccess:result->rows
								Identifier:result
								Identifier:rows
							Constant:1
		IfStatement:if (result->rows == 1)
			Condition:result->rows == 1
				EqualityExpression:result->rows == 1
					PtrMemberAccess:result->rows
						Identifier:result
						Identifier:rows
					Constant:1
			ExpressionStatement:prev_ptr = &result->data->next
				AssignmentExpression:prev_ptr = &result->data->next
					Identifier:prev_ptr
					UnaryOperationExpression:&result->data->next
						UnaryOperator:&
						PtrMemberAccess:result->data->next
							PtrMemberAccess:result->data
								Identifier:result
								Identifier:data
							Identifier:next
		WhileStatement:while ((pkt_len = cli_safe_read(mysql, &is_data_packet)) != packet_error)
			Condition:(pkt_len = cli_safe_read(mysql, &is_data_packet)) != packet_error
				EqualityExpression:(pkt_len = cli_safe_read(mysql, &is_data_packet)) != packet_error
					AssignmentExpression:pkt_len = cli_safe_read(mysql, &is_data_packet)
						Identifier:pkt_len
						CallExpression:cli_safe_read(mysql, &is_data_packet)
							Callee:cli_safe_read
								Identifier:cli_safe_read
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:&is_data_packet
									UnaryOperationExpression:&is_data_packet
										UnaryOperator:&
										Identifier:is_data_packet
					Identifier:packet_error
			CompoundStatement:
				ExpressionStatement:cp = net->read_pos
					AssignmentExpression:cp = net->read_pos
						Identifier:cp
						PtrMemberAccess:net->read_pos
							Identifier:net
							Identifier:read_pos
				IfStatement:if (*cp == 0 || is_data_packet)
					Condition:*cp == 0 || is_data_packet
						OrExpression:*cp == 0 || is_data_packet
							EqualityExpression:*cp == 0
								UnaryOperationExpression:*cp
									UnaryOperator:*
									Identifier:cp
								Constant:0
							Identifier:is_data_packet
					CompoundStatement:
						IfStatement:if (add_binary_row(net, stmt, pkt_len, &prev_ptr))
							Condition:add_binary_row(net, stmt, pkt_len, &prev_ptr)
								CallExpression:add_binary_row(net, stmt, pkt_len, &prev_ptr)
									Callee:add_binary_row
										Identifier:add_binary_row
									ArgumentList:net
										Argument:net
											Identifier:net
										Argument:stmt
											Identifier:stmt
										Argument:pkt_len
											Identifier:pkt_len
										Argument:&prev_ptr
											UnaryOperationExpression:&prev_ptr
												UnaryOperator:&
												Identifier:prev_ptr
							GotoStatement:goto err;
								Identifier:err
		ExpressionStatement:set_stmt_errmsg(stmt, net)
			CallExpression:set_stmt_errmsg(stmt, net)
				Callee:set_stmt_errmsg
					Identifier:set_stmt_errmsg
				ArgumentList:stmt
					Argument:stmt
						Identifier:stmt
					Argument:net
						Identifier:net
		Label:err:
			Identifier:err
		ExpressionStatement:DBUG_RETURN(1)
			CallExpression:DBUG_RETURN(1)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:1
					Argument:1
						Constant:1
	ReturnType:int
	Identifier:cli_read_binary_rows
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:stmt_update_metadata (MYSQL_STMT *stmt , MYSQL_ROWS *data)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_BIND *my_bind, *end;
			IdentifierDecl:*my_bind
				IdentifierDeclType:MYSQL_BIND *
				Identifier:my_bind
			IdentifierDecl:*end
				IdentifierDeclType:MYSQL_BIND *
				Identifier:end
		IdentifierDeclStatement:MYSQL_FIELD *field;
			IdentifierDecl:*field
				IdentifierDeclType:MYSQL_FIELD *
				Identifier:field
		IdentifierDeclStatement:uchar *null_ptr, bit;
			IdentifierDecl:*null_ptr
				IdentifierDeclType:uchar *
				Identifier:null_ptr
			IdentifierDecl:bit
				IdentifierDeclType:uchar
				Identifier:bit
		IdentifierDeclStatement:uchar *row = (uchar *)data->data;
			IdentifierDecl:*row = (uchar *)data->data
				IdentifierDeclType:uchar *
				Identifier:row
				AssignmentExpression:*row = (uchar *)data->data
					Identifier:row
					CastExpression:(uchar *)data->data
						CastTarget:uchar *
						PtrMemberAccess:data->data
							Identifier:data
							Identifier:data
		IdentifierDeclStatement:ifndef DBUG_OFF  uchar *row_end = row + data->length;
			IdentifierDecl:*row_end = row + data->length
				IdentifierDeclType:ifndef DBUG_OFF uchar *
				Identifier:row_end
				AssignmentExpression:*row_end = row + data->length
					Identifier:row_end
					AdditiveExpression:row + data->length
						Identifier:row
						PtrMemberAccess:data->length
							Identifier:data
							Identifier:length
		IdentifierDeclStatement:endif  null_ptr = row;
			IdentifierDecl:null_ptr = row
				IdentifierDeclType:endif
				Identifier:null_ptr
				AssignmentExpression:null_ptr = row
					Identifier:null_ptr
					Identifier:row
		ExpressionStatement:row += (stmt->field_count + 9) / 8
			AssignmentExpression:row += (stmt->field_count + 9) / 8
				Identifier:row
				MultiplicativeExpression:(stmt->field_count + 9) / 8
					AdditiveExpression:stmt->field_count + 9
						PtrMemberAccess:stmt->field_count
							Identifier:stmt
							Identifier:field_count
						Constant:9
					Constant:8
		Statement:/* skip null bits */
		ExpressionStatement:bit = 4
			AssignmentExpression:bit = 4
				Identifier:bit
				Constant:4
		Statement:/* first 2 bits are reserved */
		Statement:/* Go through all fields and calculate metadata */
		ForStatement:for (my_bind = stmt->bind, end = my_bind + stmt->field_count,      field = stmt->fields;       my_bind < end; my_bind++, field++)
			ForInit:my_bind = stmt->bind, end = my_bind + stmt->field_count,      field = stmt->fields;
				Expression:my_bind = stmt->bind, end = my_bind + stmt->field_count,      field = stmt->fields
					AssignmentExpression:my_bind = stmt->bind
						Identifier:my_bind
						PtrMemberAccess:stmt->bind
							Identifier:stmt
							Identifier:bind
					Expression:end = my_bind + stmt->field_count,      field = stmt->fields
						AssignmentExpression:end = my_bind + stmt->field_count
							Identifier:end
							AdditiveExpression:my_bind + stmt->field_count
								Identifier:my_bind
								PtrMemberAccess:stmt->field_count
									Identifier:stmt
									Identifier:field_count
						AssignmentExpression:field = stmt->fields
							Identifier:field
							PtrMemberAccess:stmt->fields
								Identifier:stmt
								Identifier:fields
			Condition:my_bind < end
				RelationalExpression:my_bind < end
					Identifier:my_bind
					Identifier:end
			Expression:my_bind++, field++
				PostIncDecOperationExpression:my_bind++
					Identifier:my_bind
					IncDec:++
				PostIncDecOperationExpression:field++
					Identifier:field
					IncDec:++
			CompoundStatement:
				IfStatement:if (!(*null_ptr & bit))
					Condition:!(*null_ptr & bit)
						UnaryOperationExpression:!(*null_ptr & bit)
							UnaryOperator:!
							BitAndExpression:*null_ptr & bit
								UnaryOperationExpression:*null_ptr
									UnaryOperator:*
									Identifier:null_ptr
								Identifier:bit
					ExpressionStatement:(*my_bind->skip_result)(my_bind, field, &row)
						CallExpression:(*my_bind->skip_result)(my_bind, field, &row)
							Callee:*my_bind->skip_result
								UnaryOperationExpression:*my_bind->skip_result
									UnaryOperator:*
									PtrMemberAccess:my_bind->skip_result
										Identifier:my_bind
										Identifier:skip_result
							ArgumentList:my_bind
								Argument:my_bind
									Identifier:my_bind
								Argument:field
									Identifier:field
								Argument:&row
									UnaryOperationExpression:&row
										UnaryOperator:&
										Identifier:row
				ExpressionStatement:DBUG_ASSERT(row <= row_end)
					CallExpression:DBUG_ASSERT(row <= row_end)
						Callee:DBUG_ASSERT
							Identifier:DBUG_ASSERT
						ArgumentList:row <= row_end
							Argument:row <= row_end
								RelationalExpression:row <= row_end
									Identifier:row
									Identifier:row_end
				IfStatement:if (!((bit <<= 1) & 255))
					Condition:!((bit <<= 1) & 255)
						UnaryOperationExpression:!((bit <<= 1) & 255)
							UnaryOperator:!
							BitAndExpression:(bit <<= 1) & 255
								AssignmentExpression:bit <<= 1
									Identifier:bit
									Constant:1
								Constant:255
					CompoundStatement:
						ExpressionStatement:bit = 1
							AssignmentExpression:bit = 1
								Identifier:bit
								Constant:1
						Statement:/* To next uchar */
						ExpressionStatement:null_ptr++
							PostIncDecOperationExpression:null_ptr++
								Identifier:null_ptr
								IncDec:++
	ReturnType:static void
	Identifier:stmt_update_metadata
	ParameterList:MYSQL_STMT *stmt , MYSQL_ROWS *data
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:MYSQL_ROWS *data
			ParameterType:MYSQL_ROWS *
			Identifier:data
FunctionDef:mysql_stmt_store_result (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		IdentifierDeclStatement:MYSQL_DATA *result = &stmt->result;
			IdentifierDecl:*result = &stmt->result
				IdentifierDeclType:MYSQL_DATA *
				Identifier:result
				AssignmentExpression:*result = &stmt->result
					Identifier:result
					UnaryOperationExpression:&stmt->result
						UnaryOperator:&
						PtrMemberAccess:stmt->result
							Identifier:stmt
							Identifier:result
		ExpressionStatement:DBUG_ENTER("mysql_stmt_store_result")
			CallExpression:DBUG_ENTER("mysql_stmt_store_result")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_store_result"
					Argument:"mysql_stmt_store_result"
						Constant:"mysql_stmt_store_result"
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			CompoundStatement:
				Statement:/* mysql can be reset in mysql_close called from mysql_reconnect */
				ExpressionStatement:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_SERVER_LOST
								Identifier:CR_SERVER_LOST
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if (!stmt->field_count)
			Condition:!stmt->field_count
				UnaryOperationExpression:!stmt->field_count
					UnaryOperator:!
					PtrMemberAccess:stmt->field_count
						Identifier:stmt
						Identifier:field_count
			ExpressionStatement:DBUG_RETURN(0)
				CallExpression:DBUG_RETURN(0)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:0
						Argument:0
							Constant:0
		IfStatement:if ((int)stmt->state < (int)MYSQL_STMT_EXECUTE_DONE)
			Condition:(int)stmt->state < (int)MYSQL_STMT_EXECUTE_DONE
				RelationalExpression:(int)stmt->state < (int)MYSQL_STMT_EXECUTE_DONE
					CastExpression:(int)stmt->state
						CastTarget:int
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
					CastExpression:(int)MYSQL_STMT_EXECUTE_DONE
						CastTarget:int
						Identifier:MYSQL_STMT_EXECUTE_DONE
			CompoundStatement:
				ExpressionStatement:set_stmt_error(stmt, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_COMMANDS_OUT_OF_SYNC
								Identifier:CR_COMMANDS_OUT_OF_SYNC
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if (stmt->last_errno)
			Condition:stmt->last_errno
				PtrMemberAccess:stmt->last_errno
					Identifier:stmt
					Identifier:last_errno
			CompoundStatement:
				Statement:/* An attempt to use an invalid statement handle. */
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		IfStatement:if (mysql->status == MYSQL_STATUS_READY &&      stmt->server_status & SERVER_STATUS_CURSOR_EXISTS)
			Condition:mysql->status == MYSQL_STATUS_READY &&      stmt->server_status & SERVER_STATUS_CURSOR_EXISTS
				AndExpression:mysql->status == MYSQL_STATUS_READY &&      stmt->server_status & SERVER_STATUS_CURSOR_EXISTS
					EqualityExpression:mysql->status == MYSQL_STATUS_READY
						PtrMemberAccess:mysql->status
							Identifier:mysql
							Identifier:status
						Identifier:MYSQL_STATUS_READY
					BitAndExpression:stmt->server_status & SERVER_STATUS_CURSOR_EXISTS
						PtrMemberAccess:stmt->server_status
							Identifier:stmt
							Identifier:server_status
						Identifier:SERVER_STATUS_CURSOR_EXISTS
			CompoundStatement:
				Statement:/*      Server side cursor exist, tell server to start sending the rows    */
				IdentifierDeclStatement:NET *net = &mysql->net;
					IdentifierDecl:*net = &mysql->net
						IdentifierDeclType:NET *
						Identifier:net
						AssignmentExpression:*net = &mysql->net
							Identifier:net
							UnaryOperationExpression:&mysql->net
								UnaryOperator:&
								PtrMemberAccess:mysql->net
									Identifier:mysql
									Identifier:net
				Statement:uchar
				Statement:buff
				Statement:[
				Statement:4
				Statement:/* statement id */
				Statement:+
				Statement:4
				Statement:/* number of rows to fetch */
				Statement:]
				ExpressionStatement:
				Statement:/* Send row request to the server */
				ExpressionStatement:int4store(buff, stmt->stmt_id)
					CallExpression:int4store(buff, stmt->stmt_id)
						Callee:int4store
							Identifier:int4store
						ArgumentList:buff
							Argument:buff
								Identifier:buff
							Argument:stmt->stmt_id
								PtrMemberAccess:stmt->stmt_id
									Identifier:stmt
									Identifier:stmt_id
				ExpressionStatement:int4store(buff + 4, (int)~0)
					CallExpression:int4store(buff + 4, (int)~0)
						Callee:int4store
							Identifier:int4store
						ArgumentList:buff + 4
							Argument:buff + 4
								AdditiveExpression:buff + 4
									Identifier:buff
									Constant:4
							Argument:(int)~0
								CastExpression:(int)~0
									CastTarget:int
									Identifier:~0
				Statement:/* number of rows to fetch */
				IfStatement:if (cli_advanced_command(mysql, COM_STMT_FETCH, buff, sizeof(buff),                             (uchar *)0, 0, 1, stmt))
					Condition:cli_advanced_command(mysql, COM_STMT_FETCH, buff, sizeof(buff),                             (uchar *)0, 0, 1, stmt)
						CallExpression:cli_advanced_command(mysql, COM_STMT_FETCH, buff, sizeof(buff),                             (uchar *)0, 0, 1, stmt)
							Callee:cli_advanced_command
								Identifier:cli_advanced_command
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
								Argument:COM_STMT_FETCH
									Identifier:COM_STMT_FETCH
								Argument:buff
									Identifier:buff
								Argument:sizeof(buff)
									SizeofExpression:sizeof(buff)
										Sizeof:sizeof
										Identifier:buff
								Argument:(uchar *)0
									CastExpression:(uchar *)0
										CastTarget:uchar *
										Constant:0
								Argument:0
									Constant:0
								Argument:1
									Constant:1
								Argument:stmt
									Identifier:stmt
					CompoundStatement:
						Statement:/*        Don't set stmt error if stmt->mysql is NULL, as the error in this case        has already been set by mysql_prune_stmt_list().      */
						IfStatement:if (stmt->mysql)
							Condition:stmt->mysql
								PtrMemberAccess:stmt->mysql
									Identifier:stmt
									Identifier:mysql
							ExpressionStatement:set_stmt_errmsg(stmt, net)
								CallExpression:set_stmt_errmsg(stmt, net)
									Callee:set_stmt_errmsg
										Identifier:set_stmt_errmsg
									ArgumentList:stmt
										Argument:stmt
											Identifier:stmt
										Argument:net
											Identifier:net
						ExpressionStatement:DBUG_RETURN(1)
							CallExpression:DBUG_RETURN(1)
								Callee:DBUG_RETURN
									Identifier:DBUG_RETURN
								ArgumentList:1
									Argument:1
										Constant:1
		IfStatement:if (stmt->update_max_length && !stmt->bind_result_done)
			Condition:stmt->update_max_length && !stmt->bind_result_done
				AndExpression:stmt->update_max_length && !stmt->bind_result_done
					PtrMemberAccess:stmt->update_max_length
						Identifier:stmt
						Identifier:update_max_length
					UnaryOperationExpression:!stmt->bind_result_done
						UnaryOperator:!
						PtrMemberAccess:stmt->bind_result_done
							Identifier:stmt
							Identifier:bind_result_done
			CompoundStatement:
				Statement:/*      We must initalize the bind structure to be able to calculate      max_length    */
				IdentifierDeclStatement:MYSQL_BIND *my_bind, *end;
					IdentifierDecl:*my_bind
						IdentifierDeclType:MYSQL_BIND *
						Identifier:my_bind
					IdentifierDecl:*end
						IdentifierDeclType:MYSQL_BIND *
						Identifier:end
				IdentifierDeclStatement:MYSQL_FIELD *field;
					IdentifierDecl:*field
						IdentifierDeclType:MYSQL_FIELD *
						Identifier:field
				ExpressionStatement:memset(stmt->bind, 0, sizeof(*stmt->bind) * stmt->field_count)
					CallExpression:memset(stmt->bind, 0, sizeof(*stmt->bind) * stmt->field_count)
						Callee:memset
							Identifier:memset
						ArgumentList:stmt->bind
							Argument:stmt->bind
								PtrMemberAccess:stmt->bind
									Identifier:stmt
									Identifier:bind
							Argument:0
								Constant:0
							Argument:sizeof(*stmt->bind) * stmt->field_count
								MultiplicativeExpression:sizeof(*stmt->bind) * stmt->field_count
									SizeofExpression:sizeof(*stmt->bind)
										Sizeof:sizeof
										UnaryOperationExpression:*stmt->bind
											UnaryOperator:*
											PtrMemberAccess:stmt->bind
												Identifier:stmt
												Identifier:bind
									PtrMemberAccess:stmt->field_count
										Identifier:stmt
										Identifier:field_count
				ForStatement:for (my_bind = stmt->bind, end = my_bind + stmt->field_count,        field = stmt->fields;         my_bind < end; my_bind++, field++)
					ForInit:my_bind = stmt->bind, end = my_bind + stmt->field_count,        field = stmt->fields;
						Expression:my_bind = stmt->bind, end = my_bind + stmt->field_count,        field = stmt->fields
							AssignmentExpression:my_bind = stmt->bind
								Identifier:my_bind
								PtrMemberAccess:stmt->bind
									Identifier:stmt
									Identifier:bind
							Expression:end = my_bind + stmt->field_count,        field = stmt->fields
								AssignmentExpression:end = my_bind + stmt->field_count
									Identifier:end
									AdditiveExpression:my_bind + stmt->field_count
										Identifier:my_bind
										PtrMemberAccess:stmt->field_count
											Identifier:stmt
											Identifier:field_count
								AssignmentExpression:field = stmt->fields
									Identifier:field
									PtrMemberAccess:stmt->fields
										Identifier:stmt
										Identifier:fields
					Condition:my_bind < end
						RelationalExpression:my_bind < end
							Identifier:my_bind
							Identifier:end
					Expression:my_bind++, field++
						PostIncDecOperationExpression:my_bind++
							Identifier:my_bind
							IncDec:++
						PostIncDecOperationExpression:field++
							Identifier:field
							IncDec:++
					CompoundStatement:
						ExpressionStatement:my_bind->buffer_type = MYSQL_TYPE_NULL
							AssignmentExpression:my_bind->buffer_type = MYSQL_TYPE_NULL
								PtrMemberAccess:my_bind->buffer_type
									Identifier:my_bind
									Identifier:buffer_type
								Identifier:MYSQL_TYPE_NULL
						ExpressionStatement:my_bind->buffer_length = 1
							AssignmentExpression:my_bind->buffer_length = 1
								PtrMemberAccess:my_bind->buffer_length
									Identifier:my_bind
									Identifier:buffer_length
								Constant:1
				IfStatement:if (mysql_stmt_bind_result(stmt, stmt->bind))
					Condition:mysql_stmt_bind_result(stmt, stmt->bind)
						CallExpression:mysql_stmt_bind_result(stmt, stmt->bind)
							Callee:mysql_stmt_bind_result
								Identifier:mysql_stmt_bind_result
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:stmt->bind
									PtrMemberAccess:stmt->bind
										Identifier:stmt
										Identifier:bind
					ExpressionStatement:DBUG_RETURN(1)
						CallExpression:DBUG_RETURN(1)
							Callee:DBUG_RETURN
								Identifier:DBUG_RETURN
							ArgumentList:1
								Argument:1
									Constant:1
				ExpressionStatement:stmt->bind_result_done = 0
					AssignmentExpression:stmt->bind_result_done = 0
						PtrMemberAccess:stmt->bind_result_done
							Identifier:stmt
							Identifier:bind_result_done
						Constant:0
				Statement:/* No normal bind done */
		IfStatement:if ((*mysql->methods->read_binary_rows)(stmt))
			Condition:(*mysql->methods->read_binary_rows)(stmt)
				CallExpression:(*mysql->methods->read_binary_rows)(stmt)
					Callee:*mysql->methods->read_binary_rows
						UnaryOperationExpression:*mysql->methods->read_binary_rows
							UnaryOperator:*
							PtrMemberAccess:mysql->methods->read_binary_rows
								PtrMemberAccess:mysql->methods
									Identifier:mysql
									Identifier:methods
								Identifier:read_binary_rows
					ArgumentList:stmt
						Argument:stmt
							Identifier:stmt
			CompoundStatement:
				ExpressionStatement:free_root(result->alloc, MYF(MY_KEEP_PREALLOC))
					CallExpression:free_root(result->alloc, MYF(MY_KEEP_PREALLOC))
						Callee:free_root
							Identifier:free_root
						ArgumentList:result->alloc
							Argument:result->alloc
								PtrMemberAccess:result->alloc
									Identifier:result
									Identifier:alloc
							Argument:MYF(MY_KEEP_PREALLOC)
								CallExpression:MYF(MY_KEEP_PREALLOC)
									Callee:MYF
										Identifier:MYF
									ArgumentList:MY_KEEP_PREALLOC
										Argument:MY_KEEP_PREALLOC
											Identifier:MY_KEEP_PREALLOC
				ExpressionStatement:result->data = NULL
					AssignmentExpression:result->data = NULL
						PtrMemberAccess:result->data
							Identifier:result
							Identifier:data
						Identifier:NULL
				ExpressionStatement:result->rows = 0
					AssignmentExpression:result->rows = 0
						PtrMemberAccess:result->rows
							Identifier:result
							Identifier:rows
						Constant:0
				ExpressionStatement:mysql->status = MYSQL_STATUS_READY
					AssignmentExpression:mysql->status = MYSQL_STATUS_READY
						PtrMemberAccess:mysql->status
							Identifier:mysql
							Identifier:status
						Identifier:MYSQL_STATUS_READY
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		Statement:/* Assert that if there was a cursor, all rows have been fetched */
		ExpressionStatement:DBUG_ASSERT(mysql->status != MYSQL_STATUS_READY ||              (mysql->server_status & SERVER_STATUS_LAST_ROW_SENT))
			CallExpression:DBUG_ASSERT(mysql->status != MYSQL_STATUS_READY ||              (mysql->server_status & SERVER_STATUS_LAST_ROW_SENT))
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:mysql->status != MYSQL_STATUS_READY ||              (mysql->server_status & SERVER_STATUS_LAST_ROW_SENT)
					Argument:mysql->status != MYSQL_STATUS_READY ||              (mysql->server_status & SERVER_STATUS_LAST_ROW_SENT)
						OrExpression:mysql->status != MYSQL_STATUS_READY ||              (mysql->server_status & SERVER_STATUS_LAST_ROW_SENT)
							EqualityExpression:mysql->status != MYSQL_STATUS_READY
								PtrMemberAccess:mysql->status
									Identifier:mysql
									Identifier:status
								Identifier:MYSQL_STATUS_READY
							BitAndExpression:mysql->server_status & SERVER_STATUS_LAST_ROW_SENT
								PtrMemberAccess:mysql->server_status
									Identifier:mysql
									Identifier:server_status
								Identifier:SERVER_STATUS_LAST_ROW_SENT
		IfStatement:if (stmt->update_max_length)
			Condition:stmt->update_max_length
				PtrMemberAccess:stmt->update_max_length
					Identifier:stmt
					Identifier:update_max_length
			CompoundStatement:
				IdentifierDeclStatement:MYSQL_ROWS *cur = result->data;
					IdentifierDecl:*cur = result->data
						IdentifierDeclType:MYSQL_ROWS *
						Identifier:cur
						AssignmentExpression:*cur = result->data
							Identifier:cur
							PtrMemberAccess:result->data
								Identifier:result
								Identifier:data
				ForStatement:for (; cur; cur = cur->next)
					Condition:cur
						Identifier:cur
					AssignmentExpression:cur = cur->next
						Identifier:cur
						PtrMemberAccess:cur->next
							Identifier:cur
							Identifier:next
					ExpressionStatement:stmt_update_metadata(stmt, cur)
						CallExpression:stmt_update_metadata(stmt, cur)
							Callee:stmt_update_metadata
								Identifier:stmt_update_metadata
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:cur
									Identifier:cur
		ExpressionStatement:stmt->data_cursor = result->data
			AssignmentExpression:stmt->data_cursor = result->data
				PtrMemberAccess:stmt->data_cursor
					Identifier:stmt
					Identifier:data_cursor
				PtrMemberAccess:result->data
					Identifier:result
					Identifier:data
		ExpressionStatement:mysql->affected_rows = stmt->affected_rows = result->rows
			AssignmentExpression:mysql->affected_rows = stmt->affected_rows = result->rows
				PtrMemberAccess:mysql->affected_rows
					Identifier:mysql
					Identifier:affected_rows
				AssignmentExpression:stmt->affected_rows = result->rows
					PtrMemberAccess:stmt->affected_rows
						Identifier:stmt
						Identifier:affected_rows
					PtrMemberAccess:result->rows
						Identifier:result
						Identifier:rows
		ExpressionStatement:stmt->read_row_func = stmt_read_row_buffered
			AssignmentExpression:stmt->read_row_func = stmt_read_row_buffered
				PtrMemberAccess:stmt->read_row_func
					Identifier:stmt
					Identifier:read_row_func
				Identifier:stmt_read_row_buffered
		ExpressionStatement:mysql->unbuffered_fetch_owner = 0
			AssignmentExpression:mysql->unbuffered_fetch_owner = 0
				PtrMemberAccess:mysql->unbuffered_fetch_owner
					Identifier:mysql
					Identifier:unbuffered_fetch_owner
				Constant:0
		Statement:/* set in stmt_execute */
		ExpressionStatement:mysql->status = MYSQL_STATUS_READY
			AssignmentExpression:mysql->status = MYSQL_STATUS_READY
				PtrMemberAccess:mysql->status
					Identifier:mysql
					Identifier:status
				Identifier:MYSQL_STATUS_READY
		Statement:/* server is ready */
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
		Statement:/* Data buffered, must be fetched with mysql_stmt_fetch() */
	ReturnType:int STDCALL
	Identifier:mysql_stmt_store_result
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_row_seek (MYSQL_STMT *stmt , MYSQL_ROW_OFFSET row)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_ROW_OFFSET offset = stmt->data_cursor;
			IdentifierDecl:offset = stmt->data_cursor
				IdentifierDeclType:MYSQL_ROW_OFFSET
				Identifier:offset
				AssignmentExpression:offset = stmt->data_cursor
					Identifier:offset
					PtrMemberAccess:stmt->data_cursor
						Identifier:stmt
						Identifier:data_cursor
		ExpressionStatement:DBUG_ENTER("mysql_stmt_row_seek")
			CallExpression:DBUG_ENTER("mysql_stmt_row_seek")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_row_seek"
					Argument:"mysql_stmt_row_seek"
						Constant:"mysql_stmt_row_seek"
		ExpressionStatement:stmt->data_cursor = row
			AssignmentExpression:stmt->data_cursor = row
				PtrMemberAccess:stmt->data_cursor
					Identifier:stmt
					Identifier:data_cursor
				Identifier:row
		ExpressionStatement:DBUG_RETURN(offset)
			CallExpression:DBUG_RETURN(offset)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:offset
					Argument:offset
						Identifier:offset
	ReturnType:MYSQL_ROW_OFFSET STDCALL
	Identifier:mysql_stmt_row_seek
	ParameterList:MYSQL_STMT *stmt , MYSQL_ROW_OFFSET row
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:MYSQL_ROW_OFFSET row
			ParameterType:MYSQL_ROW_OFFSET
			Identifier:row
FunctionDef:mysql_stmt_row_tell (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_row_tell")
			CallExpression:DBUG_ENTER("mysql_stmt_row_tell")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_row_tell"
					Argument:"mysql_stmt_row_tell"
						Constant:"mysql_stmt_row_tell"
		ExpressionStatement:DBUG_RETURN(stmt->data_cursor)
			CallExpression:DBUG_RETURN(stmt->data_cursor)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->data_cursor
					Argument:stmt->data_cursor
						PtrMemberAccess:stmt->data_cursor
							Identifier:stmt
							Identifier:data_cursor
	ReturnType:MYSQL_ROW_OFFSET STDCALL
	Identifier:mysql_stmt_row_tell
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_data_seek (MYSQL_STMT *stmt , my_ulonglong row)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL_ROWS *tmp = stmt->result.data;
			IdentifierDecl:*tmp = stmt->result.data
				IdentifierDeclType:MYSQL_ROWS *
				Identifier:tmp
				AssignmentExpression:*tmp = stmt->result.data
					Identifier:tmp
					MemberAccess:stmt->result.data
						PtrMemberAccess:stmt->result
							Identifier:stmt
							Identifier:result
						Identifier:data
		ExpressionStatement:DBUG_ENTER("mysql_stmt_data_seek")
			CallExpression:DBUG_ENTER("mysql_stmt_data_seek")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_data_seek"
					Argument:"mysql_stmt_data_seek"
						Constant:"mysql_stmt_data_seek"
		ExpressionStatement:DBUG_PRINT("enter", ("row id to seek: %ld", (long)row))
			CallExpression:DBUG_PRINT("enter", ("row id to seek: %ld", (long)row))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"row id to seek: %ld", (long)row
						Expression:"row id to seek: %ld", (long)row
							Constant:"row id to seek: %ld"
							CastExpression:(long)row
								CastTarget:long
								Identifier:row
		ForStatement:for (; tmp && row; --row, tmp = tmp->next)
			Condition:tmp && row
				AndExpression:tmp && row
					Identifier:tmp
					Identifier:row
			Expression:--row, tmp = tmp->next
				UnaryExpression:--row
					IncDec:--
					Identifier:row
				AssignmentExpression:tmp = tmp->next
					Identifier:tmp
					PtrMemberAccess:tmp->next
						Identifier:tmp
						Identifier:next
			ExpressionStatement:
		ExpressionStatement:stmt->data_cursor = tmp
			AssignmentExpression:stmt->data_cursor = tmp
				PtrMemberAccess:stmt->data_cursor
					Identifier:stmt
					Identifier:data_cursor
				Identifier:tmp
		IfStatement:if (!row && tmp)
			Condition:!row && tmp
				AndExpression:!row && tmp
					UnaryOperationExpression:!row
						UnaryOperator:!
						Identifier:row
					Identifier:tmp
			CompoundStatement:
				Statement:/*  Rewind the counter */
				ExpressionStatement:stmt->read_row_func = stmt_read_row_buffered
					AssignmentExpression:stmt->read_row_func = stmt_read_row_buffered
						PtrMemberAccess:stmt->read_row_func
							Identifier:stmt
							Identifier:read_row_func
						Identifier:stmt_read_row_buffered
				ExpressionStatement:stmt->state = MYSQL_STMT_EXECUTE_DONE
					AssignmentExpression:stmt->state = MYSQL_STMT_EXECUTE_DONE
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
						Identifier:MYSQL_STMT_EXECUTE_DONE
		ExpressionStatement:DBUG_VOID_RETURN
			Identifier:DBUG_VOID_RETURN
	ReturnType:void STDCALL
	Identifier:mysql_stmt_data_seek
	ParameterList:MYSQL_STMT *stmt , my_ulonglong row
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:my_ulonglong row
			ParameterType:my_ulonglong
			Identifier:row
FunctionDef:mysql_stmt_num_rows (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_num_rows")
			CallExpression:DBUG_ENTER("mysql_stmt_num_rows")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_num_rows"
					Argument:"mysql_stmt_num_rows"
						Constant:"mysql_stmt_num_rows"
		ExpressionStatement:DBUG_RETURN(stmt->result.rows)
			CallExpression:DBUG_RETURN(stmt->result.rows)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->result.rows
					Argument:stmt->result.rows
						MemberAccess:stmt->result.rows
							PtrMemberAccess:stmt->result
								Identifier:stmt
								Identifier:result
							Identifier:rows
	ReturnType:my_ulonglong STDCALL
	Identifier:mysql_stmt_num_rows
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:reset_stmt_handle (MYSQL_STMT *stmt , uint flags)
	CompoundStatement:
		Statement:/* If statement hasn't been prepared there is nothing to reset */
		IfStatement:if ((int)stmt->state > (int)MYSQL_STMT_INIT_DONE)
			Condition:(int)stmt->state > (int)MYSQL_STMT_INIT_DONE
				RelationalExpression:(int)stmt->state > (int)MYSQL_STMT_INIT_DONE
					CastExpression:(int)stmt->state
						CastTarget:int
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
					CastExpression:(int)MYSQL_STMT_INIT_DONE
						CastTarget:int
						Identifier:MYSQL_STMT_INIT_DONE
			CompoundStatement:
				IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
					IdentifierDecl:*mysql = stmt->mysql
						IdentifierDeclType:MYSQL *
						Identifier:mysql
						AssignmentExpression:*mysql = stmt->mysql
							Identifier:mysql
							PtrMemberAccess:stmt->mysql
								Identifier:stmt
								Identifier:mysql
				IdentifierDeclStatement:MYSQL_DATA *result = &stmt->result;
					IdentifierDecl:*result = &stmt->result
						IdentifierDeclType:MYSQL_DATA *
						Identifier:result
						AssignmentExpression:*result = &stmt->result
							Identifier:result
							UnaryOperationExpression:&stmt->result
								UnaryOperator:&
								PtrMemberAccess:stmt->result
									Identifier:stmt
									Identifier:result
				Statement:/*      Reset stored result set if so was requested or it's a part      of cursor fetch.    */
				IfStatement:if (flags & RESET_STORE_RESULT)
					Condition:flags & RESET_STORE_RESULT
						BitAndExpression:flags & RESET_STORE_RESULT
							Identifier:flags
							Identifier:RESET_STORE_RESULT
					CompoundStatement:
						Statement:/* Result buffered */
						ExpressionStatement:free_root(result->alloc, MYF(MY_KEEP_PREALLOC))
							CallExpression:free_root(result->alloc, MYF(MY_KEEP_PREALLOC))
								Callee:free_root
									Identifier:free_root
								ArgumentList:result->alloc
									Argument:result->alloc
										PtrMemberAccess:result->alloc
											Identifier:result
											Identifier:alloc
									Argument:MYF(MY_KEEP_PREALLOC)
										CallExpression:MYF(MY_KEEP_PREALLOC)
											Callee:MYF
												Identifier:MYF
											ArgumentList:MY_KEEP_PREALLOC
												Argument:MY_KEEP_PREALLOC
													Identifier:MY_KEEP_PREALLOC
						ExpressionStatement:result->data = NULL
							AssignmentExpression:result->data = NULL
								PtrMemberAccess:result->data
									Identifier:result
									Identifier:data
								Identifier:NULL
						ExpressionStatement:result->rows = 0
							AssignmentExpression:result->rows = 0
								PtrMemberAccess:result->rows
									Identifier:result
									Identifier:rows
								Constant:0
						ExpressionStatement:stmt->data_cursor = NULL
							AssignmentExpression:stmt->data_cursor = NULL
								PtrMemberAccess:stmt->data_cursor
									Identifier:stmt
									Identifier:data_cursor
								Identifier:NULL
				IfStatement:if (flags & RESET_LONG_DATA)
					Condition:flags & RESET_LONG_DATA
						BitAndExpression:flags & RESET_LONG_DATA
							Identifier:flags
							Identifier:RESET_LONG_DATA
					CompoundStatement:
						IdentifierDeclStatement:MYSQL_BIND *param = stmt->params, *param_end = param + stmt->param_count;
							IdentifierDecl:*param = stmt->params
								IdentifierDeclType:MYSQL_BIND *
								Identifier:param
								AssignmentExpression:*param = stmt->params
									Identifier:param
									PtrMemberAccess:stmt->params
										Identifier:stmt
										Identifier:params
							IdentifierDecl:*param_end = param + stmt->param_count
								IdentifierDeclType:MYSQL_BIND *
								Identifier:param_end
								AssignmentExpression:*param_end = param + stmt->param_count
									Identifier:param_end
									AdditiveExpression:param + stmt->param_count
										Identifier:param
										PtrMemberAccess:stmt->param_count
											Identifier:stmt
											Identifier:param_count
						Statement:/* Clear long_data_used flags */
						ForStatement:for (; param < param_end; param++)
							Condition:param < param_end
								RelationalExpression:param < param_end
									Identifier:param
									Identifier:param_end
							PostIncDecOperationExpression:param++
								Identifier:param
								IncDec:++
							ExpressionStatement:param->long_data_used = 0
								AssignmentExpression:param->long_data_used = 0
									PtrMemberAccess:param->long_data_used
										Identifier:param
										Identifier:long_data_used
									Constant:0
				ExpressionStatement:stmt->read_row_func = stmt_read_row_no_result_set
					AssignmentExpression:stmt->read_row_func = stmt_read_row_no_result_set
						PtrMemberAccess:stmt->read_row_func
							Identifier:stmt
							Identifier:read_row_func
						Identifier:stmt_read_row_no_result_set
				IfStatement:if (mysql)
					Condition:mysql
						Identifier:mysql
					CompoundStatement:
						IfStatement:if ((int)stmt->state > (int)MYSQL_STMT_PREPARE_DONE)
							Condition:(int)stmt->state > (int)MYSQL_STMT_PREPARE_DONE
								RelationalExpression:(int)stmt->state > (int)MYSQL_STMT_PREPARE_DONE
									CastExpression:(int)stmt->state
										CastTarget:int
										PtrMemberAccess:stmt->state
											Identifier:stmt
											Identifier:state
									CastExpression:(int)MYSQL_STMT_PREPARE_DONE
										CastTarget:int
										Identifier:MYSQL_STMT_PREPARE_DONE
							CompoundStatement:
								IfStatement:if (mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled)
									Condition:mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled
										EqualityExpression:mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled
											PtrMemberAccess:mysql->unbuffered_fetch_owner
												Identifier:mysql
												Identifier:unbuffered_fetch_owner
											UnaryOperationExpression:&stmt->unbuffered_fetch_cancelled
												UnaryOperator:&
												PtrMemberAccess:stmt->unbuffered_fetch_cancelled
													Identifier:stmt
													Identifier:unbuffered_fetch_cancelled
									ExpressionStatement:mysql->unbuffered_fetch_owner = 0
										AssignmentExpression:mysql->unbuffered_fetch_owner = 0
											PtrMemberAccess:mysql->unbuffered_fetch_owner
												Identifier:mysql
												Identifier:unbuffered_fetch_owner
											Constant:0
								IfStatement:if (stmt->field_count && mysql->status != MYSQL_STATUS_READY)
									Condition:stmt->field_count && mysql->status != MYSQL_STATUS_READY
										AndExpression:stmt->field_count && mysql->status != MYSQL_STATUS_READY
											PtrMemberAccess:stmt->field_count
												Identifier:stmt
												Identifier:field_count
											EqualityExpression:mysql->status != MYSQL_STATUS_READY
												PtrMemberAccess:mysql->status
													Identifier:mysql
													Identifier:status
												Identifier:MYSQL_STATUS_READY
									CompoundStatement:
										Statement:/* There is a result set and it belongs to this statement */
										ExpressionStatement:(*mysql->methods->flush_use_result)(mysql, false)
											CallExpression:(*mysql->methods->flush_use_result)(mysql, false)
												Callee:*mysql->methods->flush_use_result
													UnaryOperationExpression:*mysql->methods->flush_use_result
														UnaryOperator:*
														PtrMemberAccess:mysql->methods->flush_use_result
															PtrMemberAccess:mysql->methods
																Identifier:mysql
																Identifier:methods
															Identifier:flush_use_result
												ArgumentList:mysql
													Argument:mysql
														Identifier:mysql
													Argument:false
														Identifier:false
										IfStatement:if (mysql->unbuffered_fetch_owner)
											Condition:mysql->unbuffered_fetch_owner
												PtrMemberAccess:mysql->unbuffered_fetch_owner
													Identifier:mysql
													Identifier:unbuffered_fetch_owner
											ExpressionStatement:*mysql->unbuffered_fetch_owner = true
												AssignmentExpression:*mysql->unbuffered_fetch_owner = true
													UnaryOperationExpression:*mysql->unbuffered_fetch_owner
														UnaryOperator:*
														PtrMemberAccess:mysql->unbuffered_fetch_owner
															Identifier:mysql
															Identifier:unbuffered_fetch_owner
													Identifier:true
										ExpressionStatement:mysql->status = MYSQL_STATUS_READY
											AssignmentExpression:mysql->status = MYSQL_STATUS_READY
												PtrMemberAccess:mysql->status
													Identifier:mysql
													Identifier:status
												Identifier:MYSQL_STATUS_READY
						IfStatement:if (flags & RESET_SERVER_SIDE)
							Condition:flags & RESET_SERVER_SIDE
								BitAndExpression:flags & RESET_SERVER_SIDE
									Identifier:flags
									Identifier:RESET_SERVER_SIDE
							CompoundStatement:
								Statement:/*          Reset the server side statement and close the server side          cursor if it exists.        */
								IdentifierDeclStatement:uchar buff[MYSQL_STMT_HEADER];
									IdentifierDecl:buff[MYSQL_STMT_HEADER]
										IdentifierDeclType:uchar [ MYSQL_STMT_HEADER ]
										Identifier:buff
										Identifier:MYSQL_STMT_HEADER
								Statement:/* packet header: 4 bytes for stmt id */
								ExpressionStatement:int4store(buff, stmt->stmt_id)
									CallExpression:int4store(buff, stmt->stmt_id)
										Callee:int4store
											Identifier:int4store
										ArgumentList:buff
											Argument:buff
												Identifier:buff
											Argument:stmt->stmt_id
												PtrMemberAccess:stmt->stmt_id
													Identifier:stmt
													Identifier:stmt_id
								IfStatement:if ((*mysql->methods->advanced_command)(mysql, COM_STMT_RESET, buff,                                                sizeof(buff), 0, 0, 0, stmt))
									Condition:(*mysql->methods->advanced_command)(mysql, COM_STMT_RESET, buff,                                                sizeof(buff), 0, 0, 0, stmt)
										CallExpression:(*mysql->methods->advanced_command)(mysql, COM_STMT_RESET, buff,                                                sizeof(buff), 0, 0, 0, stmt)
											Callee:*mysql->methods->advanced_command
												UnaryOperationExpression:*mysql->methods->advanced_command
													UnaryOperator:*
													PtrMemberAccess:mysql->methods->advanced_command
														PtrMemberAccess:mysql->methods
															Identifier:mysql
															Identifier:methods
														Identifier:advanced_command
											ArgumentList:mysql
												Argument:mysql
													Identifier:mysql
												Argument:COM_STMT_RESET
													Identifier:COM_STMT_RESET
												Argument:buff
													Identifier:buff
												Argument:sizeof(buff)
													SizeofExpression:sizeof(buff)
														Sizeof:sizeof
														Identifier:buff
												Argument:0
													Constant:0
												Argument:0
													Constant:0
												Argument:0
													Constant:0
												Argument:stmt
													Identifier:stmt
									CompoundStatement:
										ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
											CallExpression:set_stmt_errmsg(stmt, &mysql->net)
												Callee:set_stmt_errmsg
													Identifier:set_stmt_errmsg
												ArgumentList:stmt
													Argument:stmt
														Identifier:stmt
													Argument:&mysql->net
														UnaryOperationExpression:&mysql->net
															UnaryOperator:&
															PtrMemberAccess:mysql->net
																Identifier:mysql
																Identifier:net
										ExpressionStatement:stmt->state = MYSQL_STMT_INIT_DONE
											AssignmentExpression:stmt->state = MYSQL_STMT_INIT_DONE
												PtrMemberAccess:stmt->state
													Identifier:stmt
													Identifier:state
												Identifier:MYSQL_STMT_INIT_DONE
										ReturnStatement:return 1;
											Constant:1
				IfStatement:if (flags & RESET_CLEAR_ERROR)
					Condition:flags & RESET_CLEAR_ERROR
						BitAndExpression:flags & RESET_CLEAR_ERROR
							Identifier:flags
							Identifier:RESET_CLEAR_ERROR
					ExpressionStatement:stmt_clear_error(stmt)
						CallExpression:stmt_clear_error(stmt)
							Callee:stmt_clear_error
								Identifier:stmt_clear_error
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
				ExpressionStatement:stmt->state = MYSQL_STMT_PREPARE_DONE
					AssignmentExpression:stmt->state = MYSQL_STMT_PREPARE_DONE
						PtrMemberAccess:stmt->state
							Identifier:stmt
							Identifier:state
						Identifier:MYSQL_STMT_PREPARE_DONE
		ReturnStatement:return 0;
			Constant:0
	ReturnType:static bool
	Identifier:reset_stmt_handle
	ParameterList:MYSQL_STMT *stmt , uint flags
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
		Parameter:uint flags
			ParameterType:uint
			Identifier:flags
FunctionDef:mysql_stmt_free_result (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_free_result")
			CallExpression:DBUG_ENTER("mysql_stmt_free_result")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_free_result"
					Argument:"mysql_stmt_free_result"
						Constant:"mysql_stmt_free_result"
		Statement:/* Free the client side and close the server side cursor if there is one */
		ExpressionStatement:DBUG_RETURN(reset_stmt_handle(      stmt, RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR))
			CallExpression:DBUG_RETURN(reset_stmt_handle(      stmt, RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:reset_stmt_handle(      stmt, RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR)
					Argument:reset_stmt_handle(      stmt, RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR)
						CallExpression:reset_stmt_handle(      stmt, RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR)
							Callee:reset_stmt_handle
								Identifier:reset_stmt_handle
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR
									InclusiveOrExpression:RESET_LONG_DATA | RESET_STORE_RESULT | RESET_CLEAR_ERROR
										Identifier:RESET_LONG_DATA
										InclusiveOrExpression:RESET_STORE_RESULT | RESET_CLEAR_ERROR
											Identifier:RESET_STORE_RESULT
											Identifier:RESET_CLEAR_ERROR
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_free_result
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_close (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		IdentifierDeclStatement:int rc = 0;
			IdentifierDecl:rc = 0
				IdentifierDeclType:int
				Identifier:rc
				AssignmentExpression:rc = 0
					Identifier:rc
					Constant:0
		ExpressionStatement:DBUG_ENTER("mysql_stmt_close")
			CallExpression:DBUG_ENTER("mysql_stmt_close")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_close"
					Argument:"mysql_stmt_close"
						Constant:"mysql_stmt_close"
		ExpressionStatement:free_root(stmt->result.alloc, MYF(0))
			CallExpression:free_root(stmt->result.alloc, MYF(0))
				Callee:free_root
					Identifier:free_root
				ArgumentList:stmt->result.alloc
					Argument:stmt->result.alloc
						MemberAccess:stmt->result.alloc
							PtrMemberAccess:stmt->result
								Identifier:stmt
								Identifier:result
							Identifier:alloc
					Argument:MYF(0)
						CallExpression:MYF(0)
							Callee:MYF
								Identifier:MYF
							ArgumentList:0
								Argument:0
									Constant:0
		ExpressionStatement:free_root(stmt->mem_root, MYF(0))
			CallExpression:free_root(stmt->mem_root, MYF(0))
				Callee:free_root
					Identifier:free_root
				ArgumentList:stmt->mem_root
					Argument:stmt->mem_root
						PtrMemberAccess:stmt->mem_root
							Identifier:stmt
							Identifier:mem_root
					Argument:MYF(0)
						CallExpression:MYF(0)
							Callee:MYF
								Identifier:MYF
							ArgumentList:0
								Argument:0
									Constant:0
		ExpressionStatement:free_root(&stmt->extension->fields_mem_root, MYF(0))
			CallExpression:free_root(&stmt->extension->fields_mem_root, MYF(0))
				Callee:free_root
					Identifier:free_root
				ArgumentList:&stmt->extension->fields_mem_root
					Argument:&stmt->extension->fields_mem_root
						UnaryOperationExpression:&stmt->extension->fields_mem_root
							UnaryOperator:&
							PtrMemberAccess:stmt->extension->fields_mem_root
								PtrMemberAccess:stmt->extension
									Identifier:stmt
									Identifier:extension
								Identifier:fields_mem_root
					Argument:MYF(0)
						CallExpression:MYF(0)
							Callee:MYF
								Identifier:MYF
							ArgumentList:0
								Argument:0
									Constant:0
		IfStatement:if (mysql)
			Condition:mysql
				Identifier:mysql
			CompoundStatement:
				ExpressionStatement:mysql->stmts = list_delete(mysql->stmts, &stmt->list)
					AssignmentExpression:mysql->stmts = list_delete(mysql->stmts, &stmt->list)
						PtrMemberAccess:mysql->stmts
							Identifier:mysql
							Identifier:stmts
						CallExpression:list_delete(mysql->stmts, &stmt->list)
							Callee:list_delete
								Identifier:list_delete
							ArgumentList:mysql->stmts
								Argument:mysql->stmts
									PtrMemberAccess:mysql->stmts
										Identifier:mysql
										Identifier:stmts
								Argument:&stmt->list
									UnaryOperationExpression:&stmt->list
										UnaryOperator:&
										PtrMemberAccess:stmt->list
											Identifier:stmt
											Identifier:list
				Statement:/*      Clear NET error state: if the following commands come through      successfully, connection will still be usable for other commands.    */
				ExpressionStatement:net_clear_error(&mysql->net)
					CallExpression:net_clear_error(&mysql->net)
						Callee:net_clear_error
							Identifier:net_clear_error
						ArgumentList:&mysql->net
							Argument:&mysql->net
								UnaryOperationExpression:&mysql->net
									UnaryOperator:&
									PtrMemberAccess:mysql->net
										Identifier:mysql
										Identifier:net
				IfStatement:if ((int)stmt->state > (int)MYSQL_STMT_INIT_DONE)
					Condition:(int)stmt->state > (int)MYSQL_STMT_INIT_DONE
						RelationalExpression:(int)stmt->state > (int)MYSQL_STMT_INIT_DONE
							CastExpression:(int)stmt->state
								CastTarget:int
								PtrMemberAccess:stmt->state
									Identifier:stmt
									Identifier:state
							CastExpression:(int)MYSQL_STMT_INIT_DONE
								CastTarget:int
								Identifier:MYSQL_STMT_INIT_DONE
					CompoundStatement:
						IdentifierDeclStatement:uchar buff[MYSQL_STMT_HEADER];
							IdentifierDecl:buff[MYSQL_STMT_HEADER]
								IdentifierDeclType:uchar [ MYSQL_STMT_HEADER ]
								Identifier:buff
								Identifier:MYSQL_STMT_HEADER
						Statement:/* 4 bytes - stmt id */
						IfStatement:if (mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled)
							Condition:mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled
								EqualityExpression:mysql->unbuffered_fetch_owner == &stmt->unbuffered_fetch_cancelled
									PtrMemberAccess:mysql->unbuffered_fetch_owner
										Identifier:mysql
										Identifier:unbuffered_fetch_owner
									UnaryOperationExpression:&stmt->unbuffered_fetch_cancelled
										UnaryOperator:&
										PtrMemberAccess:stmt->unbuffered_fetch_cancelled
											Identifier:stmt
											Identifier:unbuffered_fetch_cancelled
							ExpressionStatement:mysql->unbuffered_fetch_owner = 0
								AssignmentExpression:mysql->unbuffered_fetch_owner = 0
									PtrMemberAccess:mysql->unbuffered_fetch_owner
										Identifier:mysql
										Identifier:unbuffered_fetch_owner
									Constant:0
						IfStatement:if (mysql->status != MYSQL_STATUS_READY)
							Condition:mysql->status != MYSQL_STATUS_READY
								EqualityExpression:mysql->status != MYSQL_STATUS_READY
									PtrMemberAccess:mysql->status
										Identifier:mysql
										Identifier:status
									Identifier:MYSQL_STATUS_READY
							CompoundStatement:
								Statement:/*          Flush result set of the connection. If it does not belong          to this statement, set a warning.        */
								ExpressionStatement:(*mysql->methods->flush_use_result)(mysql, true)
									CallExpression:(*mysql->methods->flush_use_result)(mysql, true)
										Callee:*mysql->methods->flush_use_result
											UnaryOperationExpression:*mysql->methods->flush_use_result
												UnaryOperator:*
												PtrMemberAccess:mysql->methods->flush_use_result
													PtrMemberAccess:mysql->methods
														Identifier:mysql
														Identifier:methods
													Identifier:flush_use_result
										ArgumentList:mysql
											Argument:mysql
												Identifier:mysql
											Argument:true
												Identifier:true
								IfStatement:if (mysql->unbuffered_fetch_owner)
									Condition:mysql->unbuffered_fetch_owner
										PtrMemberAccess:mysql->unbuffered_fetch_owner
											Identifier:mysql
											Identifier:unbuffered_fetch_owner
									ExpressionStatement:*mysql->unbuffered_fetch_owner = true
										AssignmentExpression:*mysql->unbuffered_fetch_owner = true
											UnaryOperationExpression:*mysql->unbuffered_fetch_owner
												UnaryOperator:*
												PtrMemberAccess:mysql->unbuffered_fetch_owner
													Identifier:mysql
													Identifier:unbuffered_fetch_owner
											Identifier:true
								ExpressionStatement:mysql->status = MYSQL_STATUS_READY
									AssignmentExpression:mysql->status = MYSQL_STATUS_READY
										PtrMemberAccess:mysql->status
											Identifier:mysql
											Identifier:status
										Identifier:MYSQL_STATUS_READY
						ExpressionStatement:int4store(buff, stmt->stmt_id)
							CallExpression:int4store(buff, stmt->stmt_id)
								Callee:int4store
									Identifier:int4store
								ArgumentList:buff
									Argument:buff
										Identifier:buff
									Argument:stmt->stmt_id
										PtrMemberAccess:stmt->stmt_id
											Identifier:stmt
											Identifier:stmt_id
						Statement:/*        If stmt_command failed, it would have already raised        error using set_mysql_error. Caller should use        mysql_error() or mysql_errno() to find out details.        Memory allocated for stmt will be released regardless        of the error.      */
						ExpressionStatement:rc = stmt_command(mysql, COM_STMT_CLOSE, buff, 4, stmt)
							AssignmentExpression:rc = stmt_command(mysql, COM_STMT_CLOSE, buff, 4, stmt)
								Identifier:rc
								CallExpression:stmt_command(mysql, COM_STMT_CLOSE, buff, 4, stmt)
									Callee:stmt_command
										Identifier:stmt_command
									ArgumentList:mysql
										Argument:mysql
											Identifier:mysql
										Argument:COM_STMT_CLOSE
											Identifier:COM_STMT_CLOSE
										Argument:buff
											Identifier:buff
										Argument:4
											Constant:4
										Argument:stmt
											Identifier:stmt
		ExpressionStatement:my_free(stmt->result.alloc)
			CallExpression:my_free(stmt->result.alloc)
				Callee:my_free
					Identifier:my_free
				ArgumentList:stmt->result.alloc
					Argument:stmt->result.alloc
						MemberAccess:stmt->result.alloc
							PtrMemberAccess:stmt->result
								Identifier:stmt
								Identifier:result
							Identifier:alloc
		ExpressionStatement:my_free(stmt->mem_root)
			CallExpression:my_free(stmt->mem_root)
				Callee:my_free
					Identifier:my_free
				ArgumentList:stmt->mem_root
					Argument:stmt->mem_root
						PtrMemberAccess:stmt->mem_root
							Identifier:stmt
							Identifier:mem_root
		ExpressionStatement:my_free(stmt->extension)
			CallExpression:my_free(stmt->extension)
				Callee:my_free
					Identifier:my_free
				ArgumentList:stmt->extension
					Argument:stmt->extension
						PtrMemberAccess:stmt->extension
							Identifier:stmt
							Identifier:extension
		ExpressionStatement:my_free(stmt)
			CallExpression:my_free(stmt)
				Callee:my_free
					Identifier:my_free
				ArgumentList:stmt
					Argument:stmt
						Identifier:stmt
		ExpressionStatement:DBUG_RETURN(rc != 0)
			CallExpression:DBUG_RETURN(rc != 0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:rc != 0
					Argument:rc != 0
						EqualityExpression:rc != 0
							Identifier:rc
							Constant:0
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_close
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_reset (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_reset")
			CallExpression:DBUG_ENTER("mysql_stmt_reset")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_reset"
					Argument:"mysql_stmt_reset"
						Constant:"mysql_stmt_reset"
		ExpressionStatement:DBUG_ASSERT(stmt != 0)
			CallExpression:DBUG_ASSERT(stmt != 0)
				Callee:DBUG_ASSERT
					Identifier:DBUG_ASSERT
				ArgumentList:stmt != 0
					Argument:stmt != 0
						EqualityExpression:stmt != 0
							Identifier:stmt
							Constant:0
		IfStatement:if (!stmt->mysql)
			Condition:!stmt->mysql
				UnaryOperationExpression:!stmt->mysql
					UnaryOperator:!
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
			CompoundStatement:
				Statement:/* mysql can be reset in mysql_close called from mysql_reconnect */
				ExpressionStatement:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
					CallExpression:set_stmt_error(stmt, CR_SERVER_LOST, unknown_sqlstate, NULL)
						Callee:set_stmt_error
							Identifier:set_stmt_error
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:CR_SERVER_LOST
								Identifier:CR_SERVER_LOST
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
							Argument:NULL
								Identifier:NULL
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		Statement:/* Reset the client and server sides of the prepared statement */
		ExpressionStatement:DBUG_RETURN(reset_stmt_handle(      stmt, RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR))
			CallExpression:DBUG_RETURN(reset_stmt_handle(      stmt, RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:reset_stmt_handle(      stmt, RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR)
					Argument:reset_stmt_handle(      stmt, RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR)
						CallExpression:reset_stmt_handle(      stmt, RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR)
							Callee:reset_stmt_handle
								Identifier:reset_stmt_handle
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR
									InclusiveOrExpression:RESET_SERVER_SIDE | RESET_LONG_DATA | RESET_CLEAR_ERROR
										Identifier:RESET_SERVER_SIDE
										InclusiveOrExpression:RESET_LONG_DATA | RESET_CLEAR_ERROR
											Identifier:RESET_LONG_DATA
											Identifier:RESET_CLEAR_ERROR
	ReturnType:bool STDCALL
	Identifier:mysql_stmt_reset
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_errno (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_errno")
			CallExpression:DBUG_ENTER("mysql_stmt_errno")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_errno"
					Argument:"mysql_stmt_errno"
						Constant:"mysql_stmt_errno"
		ExpressionStatement:DBUG_RETURN(stmt->last_errno)
			CallExpression:DBUG_RETURN(stmt->last_errno)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->last_errno
					Argument:stmt->last_errno
						PtrMemberAccess:stmt->last_errno
							Identifier:stmt
							Identifier:last_errno
	ReturnType:uint STDCALL
	Identifier:mysql_stmt_errno
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_sqlstate (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_sqlstate")
			CallExpression:DBUG_ENTER("mysql_stmt_sqlstate")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_sqlstate"
					Argument:"mysql_stmt_sqlstate"
						Constant:"mysql_stmt_sqlstate"
		ExpressionStatement:DBUG_RETURN(stmt->sqlstate)
			CallExpression:DBUG_RETURN(stmt->sqlstate)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->sqlstate
					Argument:stmt->sqlstate
						PtrMemberAccess:stmt->sqlstate
							Identifier:stmt
							Identifier:sqlstate
	ReturnType:STDCALL
	Identifier:mysql_stmt_sqlstate
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_stmt_error (MYSQL_STMT *stmt)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_stmt_error")
			CallExpression:DBUG_ENTER("mysql_stmt_error")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_error"
					Argument:"mysql_stmt_error"
						Constant:"mysql_stmt_error"
		ExpressionStatement:DBUG_RETURN(stmt->last_error)
			CallExpression:DBUG_RETURN(stmt->last_error)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:stmt->last_error
					Argument:stmt->last_error
						PtrMemberAccess:stmt->last_error
							Identifier:stmt
							Identifier:last_error
	ReturnType:STDCALL
	Identifier:mysql_stmt_error
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_commit (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_commit")
			CallExpression:DBUG_ENTER("mysql_commit")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_commit"
					Argument:"mysql_commit"
						Constant:"mysql_commit"
		ExpressionStatement:DBUG_RETURN((bool)mysql_real_query(mysql, "commit", 6))
			CallExpression:DBUG_RETURN((bool)mysql_real_query(mysql, "commit", 6))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:(bool)mysql_real_query(mysql, "commit", 6)
					Argument:(bool)mysql_real_query(mysql, "commit", 6)
						CastExpression:(bool)mysql_real_query(mysql, "commit", 6)
							CastTarget:bool
							CallExpression:mysql_real_query(mysql, "commit", 6)
								Callee:mysql_real_query
									Identifier:mysql_real_query
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
									Argument:"commit"
										Constant:"commit"
									Argument:6
										Constant:6
	ReturnType:bool STDCALL
	Identifier:mysql_commit
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_rollback (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_rollback")
			CallExpression:DBUG_ENTER("mysql_rollback")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_rollback"
					Argument:"mysql_rollback"
						Constant:"mysql_rollback"
		ExpressionStatement:DBUG_RETURN((bool)mysql_real_query(mysql, "rollback", 8))
			CallExpression:DBUG_RETURN((bool)mysql_real_query(mysql, "rollback", 8))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:(bool)mysql_real_query(mysql, "rollback", 8)
					Argument:(bool)mysql_real_query(mysql, "rollback", 8)
						CastExpression:(bool)mysql_real_query(mysql, "rollback", 8)
							CastTarget:bool
							CallExpression:mysql_real_query(mysql, "rollback", 8)
								Callee:mysql_real_query
									Identifier:mysql_real_query
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
									Argument:"rollback"
										Constant:"rollback"
									Argument:8
										Constant:8
	ReturnType:bool STDCALL
	Identifier:mysql_rollback
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_autocommit (MYSQL *mysql , bool auto_mode)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_autocommit")
			CallExpression:DBUG_ENTER("mysql_autocommit")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_autocommit"
					Argument:"mysql_autocommit"
						Constant:"mysql_autocommit"
		ExpressionStatement:DBUG_PRINT("enter", ("mode : %d", auto_mode))
			CallExpression:DBUG_PRINT("enter", ("mode : %d", auto_mode))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"enter"
					Argument:"enter"
						Constant:"enter"
					Argument:"mode : %d", auto_mode
						Expression:"mode : %d", auto_mode
							Constant:"mode : %d"
							Identifier:auto_mode
		ExpressionStatement:DBUG_RETURN((bool)mysql_real_query(      mysql, auto_mode ? "set autocommit=1" : "set autocommit=0", 16))
			CallExpression:DBUG_RETURN((bool)mysql_real_query(      mysql, auto_mode ? "set autocommit=1" : "set autocommit=0", 16))
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:(bool)mysql_real_query(      mysql, auto_mode ? "set autocommit=1" : "set autocommit=0", 16)
					Argument:(bool)mysql_real_query(      mysql, auto_mode ? "set autocommit=1" : "set autocommit=0", 16)
						CastExpression:(bool)mysql_real_query(      mysql, auto_mode ? "set autocommit=1" : "set autocommit=0", 16)
							CastTarget:bool
							CallExpression:mysql_real_query(      mysql, auto_mode ? "set autocommit=1" : "set autocommit=0", 16)
								Callee:mysql_real_query
									Identifier:mysql_real_query
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
									Argument:auto_mode ? "set autocommit=1" : "set autocommit=0"
										ConditionalExpression:auto_mode ? "set autocommit=1" : "set autocommit=0"
											Condition:auto_mode
												Identifier:auto_mode
											Constant:"set autocommit=1"
											Constant:"set autocommit=0"
									Argument:16
										Constant:16
	ReturnType:bool STDCALL
	Identifier:mysql_autocommit
	ParameterList:MYSQL *mysql , bool auto_mode
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
		Parameter:bool auto_mode
			ParameterType:bool
			Identifier:auto_mode
FunctionDef:mysql_more_results (MYSQL *mysql)
	CompoundStatement:
		IdentifierDeclStatement:bool res;
			IdentifierDecl:res
				IdentifierDeclType:bool
				Identifier:res
		ExpressionStatement:DBUG_ENTER("mysql_more_results")
			CallExpression:DBUG_ENTER("mysql_more_results")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_more_results"
					Argument:"mysql_more_results"
						Constant:"mysql_more_results"
		ExpressionStatement:res = ((mysql->server_status & SERVER_MORE_RESULTS_EXISTS) ? 1 : 0)
			AssignmentExpression:res = ((mysql->server_status & SERVER_MORE_RESULTS_EXISTS) ? 1 : 0)
				Identifier:res
				ConditionalExpression:(mysql->server_status & SERVER_MORE_RESULTS_EXISTS) ? 1 : 0
					Condition:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
						BitAndExpression:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
							PtrMemberAccess:mysql->server_status
								Identifier:mysql
								Identifier:server_status
							Identifier:SERVER_MORE_RESULTS_EXISTS
					Constant:1
					Constant:0
		ExpressionStatement:DBUG_PRINT("exit", ("More results exists ? %d", res))
			CallExpression:DBUG_PRINT("exit", ("More results exists ? %d", res))
				Callee:DBUG_PRINT
					Identifier:DBUG_PRINT
				ArgumentList:"exit"
					Argument:"exit"
						Constant:"exit"
					Argument:"More results exists ? %d", res
						Expression:"More results exists ? %d", res
							Constant:"More results exists ? %d"
							Identifier:res
		ExpressionStatement:DBUG_RETURN(res)
			CallExpression:DBUG_RETURN(res)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:res
					Argument:res
						Identifier:res
	ReturnType:bool STDCALL
	Identifier:mysql_more_results
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_next_result (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_next_result")
			CallExpression:DBUG_ENTER("mysql_next_result")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_next_result"
					Argument:"mysql_next_result"
						Constant:"mysql_next_result"
		ExpressionStatement:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_RESULT)
			CallExpression:MYSQL_TRACE_STAGE(mysql, WAIT_FOR_RESULT)
				Callee:MYSQL_TRACE_STAGE
					Identifier:MYSQL_TRACE_STAGE
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
					Argument:WAIT_FOR_RESULT
						Identifier:WAIT_FOR_RESULT
		IfStatement:if (mysql->status != MYSQL_STATUS_READY)
			Condition:mysql->status != MYSQL_STATUS_READY
				EqualityExpression:mysql->status != MYSQL_STATUS_READY
					PtrMemberAccess:mysql->status
						Identifier:mysql
						Identifier:status
					Identifier:MYSQL_STATUS_READY
			CompoundStatement:
				ExpressionStatement:set_mysql_error(mysql, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate)
					CallExpression:set_mysql_error(mysql, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate)
						Callee:set_mysql_error
							Identifier:set_mysql_error
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:CR_COMMANDS_OUT_OF_SYNC
								Identifier:CR_COMMANDS_OUT_OF_SYNC
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				ExpressionStatement:DBUG_RETURN(1)
					CallExpression:DBUG_RETURN(1)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:1
							Argument:1
								Constant:1
		ExpressionStatement:net_clear_error(&mysql->net)
			CallExpression:net_clear_error(&mysql->net)
				Callee:net_clear_error
					Identifier:net_clear_error
				ArgumentList:&mysql->net
					Argument:&mysql->net
						UnaryOperationExpression:&mysql->net
							UnaryOperator:&
							PtrMemberAccess:mysql->net
								Identifier:mysql
								Identifier:net
		ExpressionStatement:mysql->affected_rows = ~(my_ulonglong)0
			AssignmentExpression:mysql->affected_rows = ~(my_ulonglong)0
				PtrMemberAccess:mysql->affected_rows
					Identifier:mysql
					Identifier:affected_rows
				UnaryOperationExpression:~(my_ulonglong)0
					UnaryOperator:~
					CastExpression:(my_ulonglong)0
						CastTarget:my_ulonglong
						Constant:0
		IfStatement:if (mysql->server_status & SERVER_MORE_RESULTS_EXISTS)
			Condition:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
				BitAndExpression:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
					PtrMemberAccess:mysql->server_status
						Identifier:mysql
						Identifier:server_status
					Identifier:SERVER_MORE_RESULTS_EXISTS
			ExpressionStatement:DBUG_RETURN((*mysql->methods->next_result)(mysql))
				CallExpression:DBUG_RETURN((*mysql->methods->next_result)(mysql))
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:(*mysql->methods->next_result)(mysql)
						Argument:(*mysql->methods->next_result)(mysql)
							CallExpression:(*mysql->methods->next_result)(mysql)
								Callee:*mysql->methods->next_result
									UnaryOperationExpression:*mysql->methods->next_result
										UnaryOperator:*
										PtrMemberAccess:mysql->methods->next_result
											PtrMemberAccess:mysql->methods
												Identifier:mysql
												Identifier:methods
											Identifier:next_result
								ArgumentList:mysql
									Argument:mysql
										Identifier:mysql
		ExpressionStatement:DBUG_RETURN(-1)
			CallExpression:DBUG_RETURN(-1)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:-1
					Argument:-1
						UnaryOperationExpression:-1
							UnaryOperator:-
							Constant:1
		Statement:/* No more results */
	ReturnType:int STDCALL
	Identifier:mysql_next_result
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_next_result_nonblocking (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER(__func__)
			CallExpression:DBUG_ENTER(__func__)
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:__func__
					Argument:__func__
						Identifier:__func__
		IdentifierDeclStatement:net_async_status status;
			IdentifierDecl:status
				IdentifierDeclType:net_async_status
				Identifier:status
		IfStatement:if (mysql->status != MYSQL_STATUS_READY)
			Condition:mysql->status != MYSQL_STATUS_READY
				EqualityExpression:mysql->status != MYSQL_STATUS_READY
					PtrMemberAccess:mysql->status
						Identifier:mysql
						Identifier:status
					Identifier:MYSQL_STATUS_READY
			CompoundStatement:
				ExpressionStatement:set_mysql_error(mysql, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate)
					CallExpression:set_mysql_error(mysql, CR_COMMANDS_OUT_OF_SYNC, unknown_sqlstate)
						Callee:set_mysql_error
							Identifier:set_mysql_error
						ArgumentList:mysql
							Argument:mysql
								Identifier:mysql
							Argument:CR_COMMANDS_OUT_OF_SYNC
								Identifier:CR_COMMANDS_OUT_OF_SYNC
							Argument:unknown_sqlstate
								Identifier:unknown_sqlstate
				ExpressionStatement:DBUG_RETURN(NET_ASYNC_ERROR)
					CallExpression:DBUG_RETURN(NET_ASYNC_ERROR)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:NET_ASYNC_ERROR
							Argument:NET_ASYNC_ERROR
								Identifier:NET_ASYNC_ERROR
		ExpressionStatement:net_clear_error(&mysql->net)
			CallExpression:net_clear_error(&mysql->net)
				Callee:net_clear_error
					Identifier:net_clear_error
				ArgumentList:&mysql->net
					Argument:&mysql->net
						UnaryOperationExpression:&mysql->net
							UnaryOperator:&
							PtrMemberAccess:mysql->net
								Identifier:mysql
								Identifier:net
		ExpressionStatement:mysql->affected_rows = ~(my_ulonglong)0
			AssignmentExpression:mysql->affected_rows = ~(my_ulonglong)0
				PtrMemberAccess:mysql->affected_rows
					Identifier:mysql
					Identifier:affected_rows
				UnaryOperationExpression:~(my_ulonglong)0
					UnaryOperator:~
					CastExpression:(my_ulonglong)0
						CastTarget:my_ulonglong
						Constant:0
		IfStatement:if (mysql->server_status & SERVER_MORE_RESULTS_EXISTS)
			Condition:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
				BitAndExpression:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
					PtrMemberAccess:mysql->server_status
						Identifier:mysql
						Identifier:server_status
					Identifier:SERVER_MORE_RESULTS_EXISTS
			CompoundStatement:
				ExpressionStatement:status = (*mysql->methods->next_result_nonblocking)(mysql)
					AssignmentExpression:status = (*mysql->methods->next_result_nonblocking)(mysql)
						Identifier:status
						CallExpression:(*mysql->methods->next_result_nonblocking)(mysql)
							Callee:*mysql->methods->next_result_nonblocking
								UnaryOperationExpression:*mysql->methods->next_result_nonblocking
									UnaryOperator:*
									PtrMemberAccess:mysql->methods->next_result_nonblocking
										PtrMemberAccess:mysql->methods
											Identifier:mysql
											Identifier:methods
										Identifier:next_result_nonblocking
							ArgumentList:mysql
								Argument:mysql
									Identifier:mysql
				ExpressionStatement:DBUG_RETURN(status)
					CallExpression:DBUG_RETURN(status)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:status
							Argument:status
								Identifier:status
		ExpressionStatement:DBUG_RETURN(NET_ASYNC_COMPLETE_NO_MORE_RESULTS)
			CallExpression:DBUG_RETURN(NET_ASYNC_COMPLETE_NO_MORE_RESULTS)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:NET_ASYNC_COMPLETE_NO_MORE_RESULTS
					Argument:NET_ASYNC_COMPLETE_NO_MORE_RESULTS
						Identifier:NET_ASYNC_COMPLETE_NO_MORE_RESULTS
		Statement:/* No more results */
	ReturnType:net_async_status STDCALL
	Identifier:mysql_next_result_nonblocking
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_stmt_next_result (MYSQL_STMT *stmt)
	CompoundStatement:
		IdentifierDeclStatement:MYSQL *mysql = stmt->mysql;
			IdentifierDecl:*mysql = stmt->mysql
				IdentifierDeclType:MYSQL *
				Identifier:mysql
				AssignmentExpression:*mysql = stmt->mysql
					Identifier:mysql
					PtrMemberAccess:stmt->mysql
						Identifier:stmt
						Identifier:mysql
		IdentifierDeclStatement:int rc;
			IdentifierDecl:rc
				IdentifierDeclType:int
				Identifier:rc
		ExpressionStatement:DBUG_ENTER("mysql_stmt_next_result")
			CallExpression:DBUG_ENTER("mysql_stmt_next_result")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_stmt_next_result"
					Argument:"mysql_stmt_next_result"
						Constant:"mysql_stmt_next_result"
		IfStatement:if (!mysql)
			Condition:!mysql
				UnaryOperationExpression:!mysql
					UnaryOperator:!
					Identifier:mysql
			ExpressionStatement:DBUG_RETURN(1)
				CallExpression:DBUG_RETURN(1)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:1
						Argument:1
							Constant:1
		IfStatement:if (stmt->last_errno)
			Condition:stmt->last_errno
				PtrMemberAccess:stmt->last_errno
					Identifier:stmt
					Identifier:last_errno
			ExpressionStatement:DBUG_RETURN(stmt->last_errno)
				CallExpression:DBUG_RETURN(stmt->last_errno)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:stmt->last_errno
						Argument:stmt->last_errno
							PtrMemberAccess:stmt->last_errno
								Identifier:stmt
								Identifier:last_errno
		IfStatement:if (mysql->server_status & SERVER_MORE_RESULTS_EXISTS)
			Condition:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
				BitAndExpression:mysql->server_status & SERVER_MORE_RESULTS_EXISTS
					PtrMemberAccess:mysql->server_status
						Identifier:mysql
						Identifier:server_status
					Identifier:SERVER_MORE_RESULTS_EXISTS
			CompoundStatement:
				IfStatement:if (reset_stmt_handle(stmt, RESET_STORE_RESULT))
					Condition:reset_stmt_handle(stmt, RESET_STORE_RESULT)
						CallExpression:reset_stmt_handle(stmt, RESET_STORE_RESULT)
							Callee:reset_stmt_handle
								Identifier:reset_stmt_handle
							ArgumentList:stmt
								Argument:stmt
									Identifier:stmt
								Argument:RESET_STORE_RESULT
									Identifier:RESET_STORE_RESULT
					ExpressionStatement:DBUG_RETURN(1)
						CallExpression:DBUG_RETURN(1)
							Callee:DBUG_RETURN
								Identifier:DBUG_RETURN
							ArgumentList:1
								Argument:1
									Constant:1
		ExpressionStatement:rc = mysql_next_result(mysql)
			AssignmentExpression:rc = mysql_next_result(mysql)
				Identifier:rc
				CallExpression:mysql_next_result(mysql)
					Callee:mysql_next_result
						Identifier:mysql_next_result
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
		IfStatement:if (rc)
			Condition:rc
				Identifier:rc
			CompoundStatement:
				ExpressionStatement:set_stmt_errmsg(stmt, &mysql->net)
					CallExpression:set_stmt_errmsg(stmt, &mysql->net)
						Callee:set_stmt_errmsg
							Identifier:set_stmt_errmsg
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
							Argument:&mysql->net
								UnaryOperationExpression:&mysql->net
									UnaryOperator:&
									PtrMemberAccess:mysql->net
										Identifier:mysql
										Identifier:net
				ExpressionStatement:DBUG_RETURN(rc)
					CallExpression:DBUG_RETURN(rc)
						Callee:DBUG_RETURN
							Identifier:DBUG_RETURN
						ArgumentList:rc
							Argument:rc
								Identifier:rc
		IfStatement:if (mysql->status == MYSQL_STATUS_GET_RESULT)
			Condition:mysql->status == MYSQL_STATUS_GET_RESULT
				EqualityExpression:mysql->status == MYSQL_STATUS_GET_RESULT
					PtrMemberAccess:mysql->status
						Identifier:mysql
						Identifier:status
					Identifier:MYSQL_STATUS_GET_RESULT
			ExpressionStatement:mysql->status = MYSQL_STATUS_STATEMENT_GET_RESULT
				AssignmentExpression:mysql->status = MYSQL_STATUS_STATEMENT_GET_RESULT
					PtrMemberAccess:mysql->status
						Identifier:mysql
						Identifier:status
					Identifier:MYSQL_STATUS_STATEMENT_GET_RESULT
		ExpressionStatement:stmt->state = MYSQL_STMT_EXECUTE_DONE
			AssignmentExpression:stmt->state = MYSQL_STMT_EXECUTE_DONE
				PtrMemberAccess:stmt->state
					Identifier:stmt
					Identifier:state
				Identifier:MYSQL_STMT_EXECUTE_DONE
		ExpressionStatement:stmt->bind_result_done = false
			AssignmentExpression:stmt->bind_result_done = false
				PtrMemberAccess:stmt->bind_result_done
					Identifier:stmt
					Identifier:bind_result_done
				Identifier:false
		ExpressionStatement:stmt->field_count = mysql->field_count
			AssignmentExpression:stmt->field_count = mysql->field_count
				PtrMemberAccess:stmt->field_count
					Identifier:stmt
					Identifier:field_count
				PtrMemberAccess:mysql->field_count
					Identifier:mysql
					Identifier:field_count
		IfStatement:if (mysql->field_count)
			Condition:mysql->field_count
				PtrMemberAccess:mysql->field_count
					Identifier:mysql
					Identifier:field_count
			CompoundStatement:
				ExpressionStatement:alloc_stmt_fields(stmt)
					CallExpression:alloc_stmt_fields(stmt)
						Callee:alloc_stmt_fields
							Identifier:alloc_stmt_fields
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
				ExpressionStatement:prepare_to_fetch_result(stmt)
					CallExpression:prepare_to_fetch_result(stmt)
						Callee:prepare_to_fetch_result
							Identifier:prepare_to_fetch_result
						ArgumentList:stmt
							Argument:stmt
								Identifier:stmt
		ExpressionStatement:DBUG_RETURN(0)
			CallExpression:DBUG_RETURN(0)
				Callee:DBUG_RETURN
					Identifier:DBUG_RETURN
				ArgumentList:0
					Argument:0
						Constant:0
	ReturnType:int STDCALL
	Identifier:mysql_stmt_next_result
	ParameterList:MYSQL_STMT *stmt
		Parameter:MYSQL_STMT *stmt
			ParameterType:MYSQL_STMT *
			Identifier:stmt
FunctionDef:mysql_use_result (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return (*mysql->methods->use_result)(mysql);
			CallExpression:(*mysql->methods->use_result)(mysql)
				Callee:*mysql->methods->use_result
					UnaryOperationExpression:*mysql->methods->use_result
						UnaryOperator:*
						PtrMemberAccess:mysql->methods->use_result
							PtrMemberAccess:mysql->methods
								Identifier:mysql
								Identifier:methods
							Identifier:use_result
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
	ReturnType:STDCALL
	Identifier:mysql_use_result
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_read_query_result (MYSQL *mysql)
	CompoundStatement:
		ReturnStatement:return (*mysql->methods->read_query_result)(mysql);
			CallExpression:(*mysql->methods->read_query_result)(mysql)
				Callee:*mysql->methods->read_query_result
					UnaryOperationExpression:*mysql->methods->read_query_result
						UnaryOperator:*
						PtrMemberAccess:mysql->methods->read_query_result
							PtrMemberAccess:mysql->methods
								Identifier:mysql
								Identifier:methods
							Identifier:read_query_result
				ArgumentList:mysql
					Argument:mysql
						Identifier:mysql
	ReturnType:bool STDCALL
	Identifier:mysql_read_query_result
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql
FunctionDef:mysql_reset_connection (MYSQL *mysql)
	CompoundStatement:
		ExpressionStatement:DBUG_ENTER("mysql_reset_connection")
			CallExpression:DBUG_ENTER("mysql_reset_connection")
				Callee:DBUG_ENTER
					Identifier:DBUG_ENTER
				ArgumentList:"mysql_reset_connection"
					Argument:"mysql_reset_connection"
						Constant:"mysql_reset_connection"
		IfStatement:if (simple_command(mysql, COM_RESET_CONNECTION, 0, 0, 0))
			Condition:simple_command(mysql, COM_RESET_CONNECTION, 0, 0, 0)
				CallExpression:simple_command(mysql, COM_RESET_CONNECTION, 0, 0, 0)
					Callee:simple_command
						Identifier:simple_command
					ArgumentList:mysql
						Argument:mysql
							Identifier:mysql
						Argument:COM_RESET_CONNECTION
							Identifier:COM_RESET_CONNECTION
						Argument:0
							Constant:0
						Argument:0
							Constant:0
						Argument:0
							Constant:0
			ExpressionStatement:DBUG_RETURN(1)
				CallExpression:DBUG_RETURN(1)
					Callee:DBUG_RETURN
						Identifier:DBUG_RETURN
					ArgumentList:1
						Argument:1
							Constant:1
	ReturnType:int STDCALL
	Identifier:mysql_reset_connection
	ParameterList:MYSQL *mysql
		Parameter:MYSQL *mysql
			ParameterType:MYSQL *
			Identifier:mysql

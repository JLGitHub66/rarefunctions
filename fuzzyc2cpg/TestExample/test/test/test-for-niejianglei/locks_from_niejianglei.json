{
  "filename": "locks_from_niejianglei.c",
  "content": [
    {
      "functionDef": {
        "functionName": "lease_breaking",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "BitAndExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_flags"
                    }
                  }
                },
                "rightOperand": {
                  "InclusiveOrExpression": {
                    "leftOperand": {
                      "identifier": "FL_UNLOCK_PENDING"
                    },
                    "rightOperand": {
                      "identifier": "FL_DOWNGRADE_PENDING"
                    },
                    "operator": "|"
                  }
                },
                "operator": "&"
              }
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "target_leasetype",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "F_UNLCK"
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_flags"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "FL_UNLOCK_PENDING"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "F_RDLCK"
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_flags"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "FL_DOWNGRADE_PENDING"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "returnStatement": {
              "unaryExpression": {
                "operand": {
                  "identifier": "fl_type"
                }
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "leases_enable",
          "identifierType": "int"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "lease_break_time",
          "identifierType": "int"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "locks_sysctls[]",
          "identifierType": "struct ctl_table"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "init_fs_locks_sysctls",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "constant": "\"fs\""
                  },
                  {
                    "identifier": "locks_sysctls"
                  }
                ],
                "callee": "register_sysctl_init"
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int __init"
      }
    },
    {
      "functionDef": {
        "functionName": "early_initcall"
      }
    },
    {
      "classDefStatement": {
        "className": "file_lock_list_struct",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "lock",
                  "identifierType": "spinlock_t"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "hlist",
                  "identifierType": "struct hlist_head"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "functionDef": {
        "functionName": "DEFINE_PER_CPU"
      }
    },
    {
      "functionDef": {
        "functionName": "DEFINE_STATIC_PERCPU_RWSEM"
      }
    },
    {
      "functionDef": {
        "functionName": "DEFINE_HASHTABLE"
      }
    },
    {
      "functionDef": {
        "functionName": "DEFINE_SPINLOCK"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "__read_mostly",
          "identifierType": "flctx_cache"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "__read_mostly",
          "identifierType": "filelock_cache"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "locks_get_lock_context",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "int",
            "parameter": "type"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "ctx"
                        }
                      ],
                      "callee": "likely"
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "type"
                      },
                      "rightOperand": {
                        "identifier": "F_UNLCK"
                      },
                      "operator": "=="
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "flctx_cache"
                      },
                      {
                        "identifier": "GFP_KERNEL"
                      }
                    ],
                    "callee": "kmem_cache_alloc"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock_init"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_flock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_posix"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lease"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_LIST_HEAD"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "flctx_cache"
                          },
                          {
                            "identifier": "ctx"
                          }
                        ],
                        "callee": "kmem_cache_free"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "ctx"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "unaryOperationExpression": {
                                  "operator": "&",
                                  "operand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "i_flctx"
                                      }
                                    }
                                  }
                                }
                              }
                            ],
                            "callee": "smp_load_acquire"
                          }
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "i_flctx"
                            }
                          }
                        }
                      }
                    },
                    {
                      "identifier": "NULL"
                    },
                    {
                      "identifier": "ctx"
                    }
                  ],
                  "callee": "cmpxchg"
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "type"
                  },
                  {
                    "identifier": "ctx"
                  }
                ],
                "callee": "trace_locks_get_lock_context"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "ctx"
            }
          }
        ],
        "returnType": "static struct file_lock_context *"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_dump_ctx_list",
        "parameterList": [
          {
            "parameterType": "struct list_head *",
            "parameter": "list"
          },
          {
            "parameterType": "char *",
            "parameter": "list_type"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "constant": "\"%s: fl_owner=%p fl_flags=0x%x fl_type=0x%x fl_pid=%u\\n\""
                      },
                      {
                        "identifier": "list_type"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_owner"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_pid"
                          }
                        }
                      }
                    ],
                    "callee": "pr_warn"
                  }
                }
              }
            ]
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_check_ctx_lists",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *",
                "initialValue": "inode->i_flctx"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "constant": "\"Leaked locks on dev=0x%x:0x%x ino=0x%lx:\\n\""
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "s_dev"
                                    }
                                  }
                                }
                              ],
                              "callee": "MAJOR"
                            }
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "s_dev"
                                    }
                                  }
                                }
                              ],
                              "callee": "MINOR"
                            }
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_ino"
                              }
                            }
                          }
                        ],
                        "callee": "pr_warn"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_flock"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "constant": "\"FLOCK\""
                          }
                        ],
                        "callee": "locks_dump_ctx_list"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_posix"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "constant": "\"POSIX\""
                          }
                        ],
                        "callee": "locks_dump_ctx_list"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_lease"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "constant": "\"LEASE\""
                          }
                        ],
                        "callee": "locks_dump_ctx_list"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "OrExpression": {
                        "leftOperand": {
                          "unaryOperationExpression": {
                            "operator": "!",
                            "operand": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "unaryOperationExpression": {
                                      "operator": "&",
                                      "operand": {
                                        "unaryExpression": {
                                          "operand": {
                                            "identifier": "flc_flock"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ],
                                "callee": "list_empty"
                              }
                            }
                          }
                        },
                        "rightOperand": {
                          "OrExpression": {
                            "leftOperand": {
                              "unaryOperationExpression": {
                                "operator": "!",
                                "operand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "unaryOperationExpression": {
                                          "operator": "&",
                                          "operand": {
                                            "unaryExpression": {
                                              "operand": {
                                                "identifier": "flc_posix"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "list_empty"
                                  }
                                }
                              }
                            },
                            "rightOperand": {
                              "unaryOperationExpression": {
                                "operator": "!",
                                "operand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "unaryOperationExpression": {
                                          "operator": "&",
                                          "operand": {
                                            "unaryExpression": {
                                              "operand": {
                                                "identifier": "flc_lease"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "list_empty"
                                  }
                                }
                              }
                            },
                            "operator": "||"
                          }
                        },
                        "operator": "||"
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_check_ctx_file_list",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "list"
          },
          {
            "parameterType": "char *",
            "parameter": "list_type"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "constant": "\"Leaked %s lock on dev=0x%x:0x%x ino=0x%lx \"\r\\n\\t\\t\\t\\t\" fl_owner=%p fl_flags=0x%x fl_type=0x%x fl_pid=%u\\n\""
                      },
                      {
                        "identifier": "list_type"
                      },
                      {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "s_dev"
                                }
                              }
                            }
                          ],
                          "callee": "MAJOR"
                        }
                      },
                      {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "s_dev"
                                }
                              }
                            }
                          ],
                          "callee": "MINOR"
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "i_ino"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_owner"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_pid"
                          }
                        }
                      }
                    ],
                    "callee": "pr_warn"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_file"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "filp"
                  },
                  "operator": "=="
                }
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_free_lock_context",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *",
                "initialValue": "inode->i_flctx"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          }
                        ],
                        "callee": "locks_check_ctx_lists"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "flctx_cache"
                          },
                          {
                            "identifier": "ctx"
                          }
                        ],
                        "callee": "kmem_cache_free"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "ctx"
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_init_lock_heads",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_link"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_HLIST_NODE"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_list"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocked_requests"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocked_member"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "INIT_LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_wait"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "init_waitqueue_head"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_alloc_lock",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *",
                "initialValue": "kmem_cache_zalloc(filelock_cache, GFP_KERNEL)"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "locks_init_lock_heads"
                  }
                }
              },
              "condition": {
                "identifier": "fl"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "fl"
            }
          }
        ],
        "returnType": "struct file_lock *"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_release_private",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_wait"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "callee": "waitqueue_active"
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_list"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty"
                        }
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocked_requests"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty"
                        }
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocked_member"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty"
                        }
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_link"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "hlist_unhashed"
                        }
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "unaryExpression": {
                            "operand": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "fl"
                                  }
                                ],
                                "callee": "fl_release_private"
                              }
                            }
                          }
                        }
                      },
                      "condition": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_release_private"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_ops"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "NULL"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "fl_ops"
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "unaryExpression": {
                                "operand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "unaryExpression": {
                                          "operand": {
                                            "identifier": "fl_owner"
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "lm_put_owner"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_owner"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "identifier": "NULL"
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "lm_put_owner"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_lmops"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "NULL"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "fl_lmops"
                  }
                }
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_owner_has_blockers",
        "parameterList": [
          {
            "parameterType": "struct file_lock_context *",
            "parameter": "flctx"
          },
          {
            "parameterType": "fl_owner_t",
            "parameter": "owner"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_owner"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "owner"
                      },
                      "operator": "!="
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "unaryOperationExpression": {
                                  "operator": "&",
                                  "operand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "flc_lock"
                                      }
                                    }
                                  }
                                }
                              }
                            ],
                            "callee": "spin_unlock"
                          }
                        }
                      },
                      {
                        "returnStatement": {
                          "identifier": "true"
                        }
                      }
                    ]
                  },
                  "condition": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocked_requests"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "bool"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_free_lock",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_release_private"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filelock_cache"
                  },
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "kmem_cache_free"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_dispose_list",
        "parameterList": [
          {
            "parameterType": "struct list_head *",
            "parameter": "dispose"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "whileStatement": {
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "dispose"
                        }
                      ],
                      "callee": "list_empty"
                    }
                  }
                }
              },
              "whileBlock": {
                "compoundStatement": [
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {
                    "expressionStatement": {}
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_list"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "list_del_init"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "locks_free_lock"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_init_lock",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  },
                  {
                    "constant": "0"
                  },
                  {
                    "sizeofExpression": {
                      "operator": "sizeof",
                      "operand": {}
                    }
                  }
                ],
                "callee": "memset"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_init_lock_heads"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "lm_get_owner"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "f",
          "identifierType": "struct file_lock *"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "flock_translate_cmd",
        "parameterList": [
          {
            "parameterType": "int",
            "parameter": "cmd"
          }
        ],
        "functionBody": [
          {
            "switchStatement": {
              "condition": {
                "identifier": "cmd"
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case LOCK_SH:"
                  },
                  {
                    "returnStatement": {
                      "identifier": "F_RDLCK"
                    }
                  },
                  {
                    "label": "case LOCK_EX:"
                  },
                  {
                    "returnStatement": {
                      "identifier": "F_WRLCK"
                    }
                  },
                  {
                    "label": "case LOCK_UN:"
                  },
                  {
                    "returnStatement": {
                      "identifier": "F_UNLCK"
                    }
                  }
                ]
              }
            }
          },
          {
            "returnStatement": {
              "unaryOperationExpression": {
                "operator": "-",
                "operand": {
                  "identifier": "EINVAL"
                }
              }
            }
          }
        ],
        "returnType": "static inline int"
      }
    },
    {
      "functionDef": {
        "functionName": "flock_make_lock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "type",
                "identifierType": "int",
                "initialValue": "flock_translate_cmd(cmd)"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "type"
                      }
                    ],
                    "callee": "ERR_PTR"
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "type"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "<"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "fl"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [],
                            "callee": "locks_alloc_lock"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "unaryOperationExpression": {
                                  "operator": "-",
                                  "operand": {
                                    "identifier": "ENOMEM"
                                  }
                                }
                              }
                            ],
                            "callee": "ERR_PTR"
                          }
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "fl"
                          },
                          "rightOperand": {
                            "identifier": "NULL"
                          },
                          "operator": "=="
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "fl"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "=="
                }
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "locks_init_lock"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_file"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "filp"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_owner"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "filp"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_pid"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "tgid"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_flags"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "FL_FLOCK"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_type"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "type"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_end"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "OFFSET_MAX"
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "fl"
            }
          }
        ],
        "returnType": "static struct file_lock *"
      }
    },
    {
      "functionDef": {
        "functionName": "assign_type",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "long",
            "parameter": "type"
          }
        ],
        "functionBody": [
          {
            "switchStatement": {
              "condition": {
                "identifier": "type"
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case F_RDLCK:"
                  },
                  {
                    "label": "case F_WRLCK:"
                  },
                  {
                    "label": "case F_UNLCK:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_type"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "type"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "default:"
                  },
                  {
                    "returnStatement": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "EINVAL"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "flock64_to_posix_lock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct flock64 *",
            "parameter": "l"
          }
        ],
        "functionBody": [
          {
            "switchStatement": {
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "l_whence"
                  }
                }
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case SEEK_SET:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_start"
                            }
                          }
                        },
                        "rightOperand": {
                          "constant": "0"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "case SEEK_CUR:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_start"
                            }
                          }
                        },
                        "rightOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "f_pos"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "case SEEK_END:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_start"
                            }
                          }
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "filp"
                                    }
                                  ],
                                  "callee": "file_inode"
                                }
                              }
                            ],
                            "callee": "i_size_read"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "default:"
                  },
                  {
                    "returnStatement": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "EINVAL"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EOVERFLOW"
                    }
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "l_start"
                      }
                    }
                  },
                  "rightOperand": {
                    "AdditiveExpression": {
                      "leftOperand": {
                        "identifier": "OFFSET_MAX"
                      },
                      "rightOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_start"
                          }
                        }
                      },
                      "operator": "-"
                    }
                  },
                  "operator": ">"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_start"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_start"
                    }
                  }
                },
                "operator": "+="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EINVAL"
                    }
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_start"
                      }
                    }
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "<"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EOVERFLOW"
                            }
                          }
                        }
                      },
                      "condition": {
                        "RelationalExpression": {
                          "leftOperand": {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "l_len"
                                  }
                                }
                              },
                              "rightOperand": {
                                "constant": "1"
                              },
                              "operator": "-"
                            }
                          },
                          "rightOperand": {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "identifier": "OFFSET_MAX"
                              },
                              "rightOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_start"
                                  }
                                }
                              },
                              "operator": "-"
                            }
                          },
                          "operator": ">"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_end"
                            }
                          }
                        },
                        "rightOperand": {
                          "AdditiveExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_start"
                                }
                              }
                            },
                            "rightOperand": {
                              "AdditiveExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "l_len"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "constant": "1"
                                },
                                "operator": "-"
                              }
                            },
                            "operator": "+"
                          }
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "l_len"
                      }
                    }
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": ">"
                }
              },
              "elseBlock": {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "ifStatement": {
                          "ifBlock": {
                            "returnStatement": {
                              "unaryOperationExpression": {
                                "operator": "-",
                                "operand": {
                                  "identifier": "EINVAL"
                                }
                              }
                            }
                          },
                          "condition": {
                            "RelationalExpression": {
                              "leftOperand": {
                                "AdditiveExpression": {
                                  "leftOperand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "fl_start"
                                      }
                                    }
                                  },
                                  "rightOperand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "l_len"
                                      }
                                    }
                                  },
                                  "operator": "+"
                                }
                              },
                              "rightOperand": {
                                "constant": "0"
                              },
                              "operator": "<"
                            }
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_end"
                                }
                              }
                            },
                            "rightOperand": {
                              "AdditiveExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_start"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "constant": "1"
                                },
                                "operator": "-"
                              }
                            },
                            "operator": "="
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_start"
                                }
                              }
                            },
                            "rightOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "l_len"
                                }
                              }
                            },
                            "operator": "+="
                          }
                        }
                      }
                    ]
                  },
                  "condition": {
                    "RelationalExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "l_len"
                          }
                        }
                      },
                      "rightOperand": {
                        "constant": "0"
                      },
                      "operator": "<"
                    }
                  },
                  "elseBlock": {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_end"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "OFFSET_MAX"
                        },
                        "operator": "="
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_owner"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "files"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_pid"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "tgid"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_file"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "filp"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_flags"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "FL_POSIX"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_ops"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "NULL"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_lmops"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "NULL"
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  },
                  {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "l_type"
                      }
                    }
                  }
                ],
                "callee": "assign_type"
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "flock_to_posix_lock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct flock *",
            "parameter": "l"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ll",
                "identifierType": "struct flock64"
              }
            ]
          },
          {},
          {
            "compoundStatement": [
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {}
            ]
          },
          {
            "expressionStatement": {}
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "fl"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "ll"
                      }
                    }
                  }
                ],
                "callee": "flock64_to_posix_lock"
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_break_callback",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_fasync"
                          }
                        }
                      }
                    }
                  },
                  {
                    "identifier": "SIGIO"
                  },
                  {
                    "identifier": "POLL_MSG"
                  }
                ],
                "callee": "kill_fasync"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_setup",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "void * *",
            "parameter": "priv"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "filp",
                "identifierType": "struct file *",
                "initialValue": "fl->fl_file"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fa",
                "identifierType": "struct fasync_struct *",
                "initialValue": "*priv"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "unaryOperationExpression": {
                        "operator": "*",
                        "operand": {
                          "identifier": "priv"
                        }
                      }
                    },
                    "rightOperand": {
                      "identifier": "NULL"
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fa_fd"
                            }
                          }
                        },
                        {
                          "identifier": "filp"
                        },
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_fasync"
                                }
                              }
                            }
                          }
                        },
                        {
                          "identifier": "fa"
                        }
                      ],
                      "callee": "fasync_insert_entry"
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "current"
                        }
                      ],
                      "callee": "task_pid"
                    }
                  },
                  {
                    "identifier": "PIDTYPE_TGID"
                  },
                  {
                    "constant": "0"
                  }
                ],
                "callee": "__f_setown"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "lease_manager_ops",
          "identifierType": "const struct lock_manager_operations"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "lease_init",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "type"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EINVAL"
                    }
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "fl"
                        },
                        {
                          "identifier": "type"
                        }
                      ],
                      "callee": "assign_type"
                    }
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_owner"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "filp"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_pid"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "tgid"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_file"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "filp"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_flags"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "FL_LEASE"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_start"
                    }
                  }
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_end"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "OFFSET_MAX"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_ops"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "NULL"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_lmops"
                    }
                  }
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "&",
                    "operand": {
                      "identifier": "lease_manager_ops"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_alloc",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "type"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *",
                "initialValue": "locks_alloc_lock()"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int",
                "initialValue": "-ENOMEM"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "error"
                      }
                    ],
                    "callee": "ERR_PTR"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "fl"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "type"
                      },
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "lease_init"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "locks_free_lock"
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "error"
                          }
                        ],
                        "callee": "ERR_PTR"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "fl"
            }
          }
        ],
        "returnType": "static struct file_lock *"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_overlap",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl1"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl2"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "AndExpression": {
                "leftOperand": {
                  "RelationalExpression": {
                    "leftOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "fl_end"
                        }
                      }
                    },
                    "rightOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "fl_start"
                        }
                      }
                    },
                    "operator": ">="
                  }
                },
                "rightOperand": {
                  "RelationalExpression": {
                    "leftOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "fl_end"
                        }
                      }
                    },
                    "rightOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "fl_start"
                        }
                      }
                    },
                    "operator": ">="
                  }
                },
                "operator": "&&"
              }
            }
          }
        ],
        "returnType": "static inline int"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_same_owner",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl1"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl2"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "EqualityExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_owner"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_owner"
                    }
                  }
                },
                "operator": "=="
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_insert_global_locks",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fll",
                "identifierType": "struct file_lock_list_struct *",
                "initialValue": "this_cpu_ptr(&file_lock_list)"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_rwsem_assert_held"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_link_cpu"
                    }
                  }
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [],
                    "callee": "smp_processor_id"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_link"
                          }
                        }
                      }
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "hlist"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "hlist_add_head"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_delete_global_locks",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fll",
                "identifierType": "struct file_lock_list_struct *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_rwsem_assert_held"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_link"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "callee": "hlist_unhashed"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "fll"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "file_lock_list"
                          }
                        }
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_link_cpu"
                          }
                        }
                      }
                    ],
                    "callee": "per_cpu_ptr"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_link"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "hlist_del_init"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_owner_key",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "castExpression": {
                "originalExpression": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_owner"
                    }
                  }
                },
                "target": "unsigned long"
              }
            }
          }
        ],
        "returnType": "static unsigned long"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_insert_global_blocked",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "waiter"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "lockdep_assert_held"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "blocked_hash"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_link"
                          }
                        }
                      }
                    }
                  },
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "waiter"
                        }
                      ],
                      "callee": "posix_owner_key"
                    }
                  }
                ],
                "callee": "hash_add"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_delete_global_blocked",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "waiter"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "lockdep_assert_held"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_link"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "hash_del"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "__locks_delete_block",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "waiter"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "waiter"
                  }
                ],
                "callee": "locks_delete_global_blocked"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocked_member"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "list_del_init"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "__locks_wake_up_blocks",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "blocker"
          }
        ],
        "functionBody": [
          {
            "whileStatement": {
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_blocked_requests"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "callee": "list_empty"
                    }
                  }
                }
              },
              "whileBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "waiter",
                        "identifierType": "struct file_lock *"
                      }
                    ]
                  },
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {
                    "expressionStatement": {}
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "waiter"
                          }
                        ],
                        "callee": "__locks_delete_block"
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "unaryExpression": {
                            "operand": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "waiter"
                                  }
                                ],
                                "callee": "lm_notify"
                              }
                            }
                          }
                        }
                      },
                      "condition": {
                        "AndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_lmops"
                              }
                            }
                          },
                          "rightOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "lm_notify"
                              }
                            }
                          },
                          "operator": "&&"
                        }
                      },
                      "elseBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "unaryOperationExpression": {
                                  "operator": "&",
                                  "operand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "fl_wait"
                                      }
                                    }
                                  }
                                }
                              }
                            ],
                            "callee": "wake_up"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_blocker"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "identifier": "NULL"
                          }
                        ],
                        "callee": "smp_store_release"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_delete_block",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "waiter"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "status",
                "identifierType": "int",
                "initialValue": "-ENOENT"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "status"
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocker"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "smp_load_acquire"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_blocked_requests"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "callee": "list_empty"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "status"
                    },
                    "rightOperand": {
                      "constant": "0"
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "fl_blocker"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "waiter"
                  }
                ],
                "callee": "__locks_wake_up_blocks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "waiter"
                  }
                ],
                "callee": "__locks_delete_block"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocker"
                          }
                        }
                      }
                    }
                  },
                  {
                    "identifier": "NULL"
                  }
                ],
                "callee": "smp_store_release"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "status"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__locks_insert_block",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "blocker"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "waiter"
          },
          {
            "parameterType": "bool ( struct file_lock * , struct file_lock * )",
            "parameter": "conflict"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocked_member"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty"
                        }
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "label": "new_blocker:"
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "blocker"
                        },
                        "rightOperand": {
                          "identifier": "fl"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "new_blocker"
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "fl"
                    },
                    {
                      "identifier": "waiter"
                    }
                  ],
                  "callee": "conflict"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_blocker"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "blocker"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocked_member"
                          }
                        }
                      }
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocked_requests"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "list_add_tail"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "waiter"
                      }
                    ],
                    "callee": "locks_insert_global_blocked"
                  }
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "blocker"
                        }
                      ],
                      "callee": "IS_POSIX"
                    }
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "blocker"
                            }
                          ],
                          "callee": "IS_OFDLCK"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "waiter"
                  }
                ],
                "callee": "__locks_wake_up_blocks"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_insert_block",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "blocker"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "waiter"
          },
          {
            "parameterType": "bool ( struct file_lock * , struct file_lock * )",
            "parameter": "conflict"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "blocker"
                  },
                  {
                    "identifier": "waiter"
                  },
                  {
                    "identifier": "conflict"
                  }
                ],
                "callee": "__locks_insert_block"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_wake_up_blocks",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "blocker"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_blocked_requests"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "callee": "list_empty"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "blocker"
                  }
                ],
                "callee": "__locks_wake_up_blocks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_insert_lock_ctx",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "before"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_list"
                          }
                        }
                      }
                    }
                  },
                  {
                    "identifier": "before"
                  }
                ],
                "callee": "list_add_tail"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_insert_global_locks"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_unlink_lock_ctx",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_delete_global_locks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_list"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "list_del_init"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_wake_up_blocks"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_delete_lock_ctx",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "dispose"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_unlink_lock_ctx"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_list"
                              }
                            }
                          }
                        }
                      },
                      {
                        "identifier": "dispose"
                      }
                    ],
                    "callee": "list_add"
                  }
                }
              },
              "condition": {
                "identifier": "dispose"
              },
              "elseBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "locks_free_lock"
                  }
                }
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_conflict",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "caller_fl"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "sys_fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "true"
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_type"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "F_WRLCK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "true"
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_type"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "F_WRLCK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_locks_conflict",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "caller_fl"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "sys_fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "false"
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "caller_fl"
                    },
                    {
                      "identifier": "sys_fl"
                    }
                  ],
                  "callee": "posix_same_owner"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "false"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "caller_fl"
                        },
                        {
                          "identifier": "sys_fl"
                        }
                      ],
                      "callee": "locks_overlap"
                    }
                  }
                }
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "caller_fl"
                  },
                  {
                    "identifier": "sys_fl"
                  }
                ],
                "callee": "locks_conflict"
              }
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "flock_locks_conflict",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "caller_fl"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "sys_fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "false"
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_file"
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_file"
                      }
                    }
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "caller_fl"
                  },
                  {
                    "identifier": "sys_fl"
                  }
                ],
                "callee": "locks_conflict"
              }
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_test_lock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "cfl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "owner",
                "identifierType": "void *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "func",
                "identifierType": "void ( * ) ( void )"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_type"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "F_UNLCK"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "returnStatement": {}
                  }
                ]
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "ctx"
                      }
                    }
                  },
                  "rightOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "flc_posix"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "callee": "list_empty_careful"
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "label": "retry:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {}
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "what_owner_is_waiting_for",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "block_fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "whileStatement": {
                          "condition": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_blocker"
                              }
                            }
                          },
                          "whileBlock": {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "fl"
                                },
                                "rightOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocker"
                                    }
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        }
                      },
                      {
                        "returnStatement": {
                          "identifier": "fl"
                        }
                      }
                    ]
                  },
                  "condition": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "fl"
                        },
                        {
                          "identifier": "block_fl"
                        }
                      ],
                      "callee": "posix_same_owner"
                    }
                  }
                }
              }
            ]
          },
          {
            "returnStatement": {
              "identifier": "NULL"
            }
          }
        ],
        "returnType": "static struct file_lock *"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_locks_deadlock",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "caller_fl"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "block_fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "i",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "blocked_lock_lock"
                      }
                    }
                  }
                ],
                "callee": "lockdep_assert_held"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "constant": "0"
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "caller_fl"
                    }
                  ],
                  "callee": "IS_OFDLCK"
                }
              }
            }
          },
          {
            "whileStatement": {
              "condition": {
                "AssignmentExpression": {
                  "leftOperand": {
                    "identifier": "block_fl"
                  },
                  "rightOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "block_fl"
                        }
                      ],
                      "callee": "what_owner_is_waiting_for"
                    }
                  },
                  "operator": "="
                }
              },
              "whileBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "constant": "0"
                        }
                      },
                      "condition": {
                        "RelationalExpression": {
                          "leftOperand": {
                            "postIncDecOperationExpression": {
                              "operand": {
                                "identifier": "i"
                              },
                              "operator": "++"
                            }
                          },
                          "rightOperand": {
                            "identifier": "MAX_DEADLK_ITERATIONS"
                          },
                          "operator": ">"
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "constant": "1"
                        }
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "caller_fl"
                            },
                            {
                              "identifier": "block_fl"
                            }
                          ],
                          "callee": "posix_same_owner"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "flock_lock_inode",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "request"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "new_fl",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "found",
                "identifierType": "bool",
                "initialValue": "false"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "inode"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      }
                    ],
                    "callee": "locks_get_lock_context"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "ENOMEM"
                            }
                          }
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_type"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "F_UNLCK"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "conditionalExpression": {
                        "condition": {
                          "BitAndExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_flags"
                                }
                              }
                            },
                            "rightOperand": {
                              "identifier": "FL_EXISTS"
                            },
                            "operator": "&"
                          }
                        },
                        "trueExpression": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "ENOENT"
                            }
                          }
                        },
                        "falseExpression": {
                          "constant": "0"
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "new_fl"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [],
                            "callee": "locks_alloc_lock"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "ENOMEM"
                            }
                          }
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "new_fl"
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_flags"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "FL_ACCESS"
                          },
                          "operator": "&"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "F_UNLCK"
                      },
                      "operator": "!="
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "find_conflict"
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_flags"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "FL_ACCESS"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_file"
                          }
                        }
                      },
                      "rightOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_file"
                          }
                        }
                      },
                      "operator": "!="
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  },
                  "condition": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      },
                      "rightOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      },
                      "operator": "=="
                    }
                  }
                }
              },
              {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "found"
                    },
                    "rightOperand": {
                      "identifier": "true"
                    },
                    "operator": "="
                  }
                }
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "dispose"
                          }
                        }
                      }
                    ],
                    "callee": "locks_delete_lock_ctx"
                  }
                }
              },
              {
                "breakStatement": "break"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "error"
                            },
                            "rightOperand": {
                              "unaryOperationExpression": {
                                "operator": "-",
                                "operand": {
                                  "identifier": "ENOENT"
                                }
                              }
                            },
                            "operator": "="
                          }
                        }
                      },
                      "condition": {
                        "AndExpression": {
                          "leftOperand": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_flags"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "FL_EXISTS"
                              },
                              "operator": "&"
                            }
                          },
                          "rightOperand": {
                            "unaryOperationExpression": {
                              "operator": "!",
                              "operand": {
                                "identifier": "found"
                              }
                            }
                          },
                          "operator": "&&"
                        }
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_type"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "F_UNLCK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "label": "find_conflict:"
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "request"
                            },
                            {
                              "identifier": "fl"
                            }
                          ],
                          "callee": "flock_locks_conflict"
                        }
                      }
                    }
                  }
                }
              },
              {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "error"
                    },
                    "rightOperand": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "EAGAIN"
                        }
                      }
                    },
                    "operator": "="
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  },
                  "condition": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_flags"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "FL_SLEEP"
                          },
                          "operator": "&"
                        }
                      }
                    }
                  }
                }
              },
              {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "error"
                    },
                    "rightOperand": {
                      "identifier": "FILE_LOCK_DEFERRED"
                    },
                    "operator": "="
                  }
                }
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      },
                      {
                        "identifier": "request"
                      },
                      {
                        "identifier": "flock_locks_conflict"
                      }
                    ],
                    "callee": "locks_insert_block"
                  }
                }
              },
              {
                "gotoStatement": {
                  "goto": "out"
                }
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_flags"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "FL_ACCESS"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "new_fl"
                  },
                  {
                    "identifier": "request"
                  }
                ],
                "callee": "locks_copy_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "new_fl"
                  },
                  {
                    "identifier": "request"
                  }
                ],
                "callee": "locks_move_blocks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "new_fl"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_flock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "locks_insert_lock_ctx"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "new_fl"
                },
                "rightOperand": {
                  "identifier": "NULL"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_up_read"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "new_fl"
                      }
                    ],
                    "callee": "locks_free_lock"
                  }
                }
              },
              "condition": {
                "identifier": "new_fl"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "locks_dispose_list"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "request"
                  },
                  {
                    "identifier": "error"
                  }
                ],
                "callee": "trace_flock_lock_inode"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_lock_inode",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "request"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "conflock"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "tmp",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "new_fl",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "new_fl2",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "left",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "right",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "added",
                "identifierType": "bool",
                "initialValue": "false"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "owner",
                "identifierType": "void *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "func",
                "identifierType": "void ( * ) ( void )"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "inode"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      }
                    ],
                    "callee": "locks_get_lock_context"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "conditionalExpression": {
                    "condition": {
                      "EqualityExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_type"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "F_UNLCK"
                        },
                        "operator": "=="
                      }
                    },
                    "trueExpression": {
                      "constant": "0"
                    },
                    "falseExpression": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "ENOMEM"
                        }
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "new_fl"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [],
                            "callee": "locks_alloc_lock"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "new_fl2"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [],
                            "callee": "locks_alloc_lock"
                          }
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_flags"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "FL_ACCESS"
                          },
                          "operator": "&"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "OrExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_type"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "F_UNLCK"
                          },
                          "operator": "!="
                        }
                      },
                      "rightOperand": {
                        "OrExpression": {
                          "leftOperand": {
                            "EqualityExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_start"
                                  }
                                }
                              },
                              "rightOperand": {
                                "constant": "0"
                              },
                              "operator": "!="
                            }
                          },
                          "rightOperand": {
                            "EqualityExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_end"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "OFFSET_MAX"
                              },
                              "operator": "!="
                            }
                          },
                          "operator": "||"
                        }
                      },
                      "operator": "||"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "label": "retry:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_lock_file",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "conflock"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "filp"
                        }
                      ],
                      "callee": "locks_inode"
                    }
                  },
                  {
                    "identifier": "fl"
                  },
                  {
                    "identifier": "conflock"
                  }
                ],
                "callee": "posix_lock_inode"
              }
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_lock_inode_wait",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "might_sleep"
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_clear_pending",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "int",
            "parameter": "arg"
          }
        ],
        "functionBody": [
          {
            "switchStatement": {
              "condition": {
                "identifier": "arg"
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case F_UNLCK:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "~FL_UNLOCK_PENDING"
                        },
                        "operator": "&="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "identifier": "fallthrough"
                    }
                  },
                  {
                    "label": "case F_RDLCK:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "~FL_DOWNGRADE_PENDING"
                        },
                        "operator": "&="
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_modify",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "int",
            "parameter": "arg"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "dispose"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int",
                "initialValue": "assign_type(fl, arg)"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "error"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  },
                  {
                    "identifier": "arg"
                  }
                ],
                "callee": "lease_clear_pending"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_wake_up_blocks"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "filp",
                        "identifierType": "struct file *",
                        "initialValue": "fl->fl_file"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          }
                        ],
                        "callee": "f_delown"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "memberAccess": {
                                "leftOperand": "f_owner",
                                "rightOperand": "signum",
                                "operator": "."
                              }
                            }
                          }
                        },
                        "rightOperand": {
                          "constant": "0"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "constant": "0"
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_file"
                              }
                            }
                          },
                          {
                            "constant": "0"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_fasync"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "fasync_helper"
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {
                            "expressionStatement": {}
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_fasync"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "identifier": "NULL"
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_fasync"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "NULL"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          },
                          {
                            "identifier": "dispose"
                          }
                        ],
                        "callee": "locks_delete_lock_ctx"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "arg"
                  },
                  "rightOperand": {
                    "identifier": "F_UNLCK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "past_time",
        "parameterList": [
          {
            "parameterType": "unsigned long",
            "parameter": "then"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "false"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "then"
                  }
                }
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "jiffies"
                  },
                  {
                    "identifier": "then"
                  }
                ],
                "callee": "time_after"
              }
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "time_out_leases",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "dispose"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *",
                "initialValue": "inode->i_flctx"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "tmp",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "lockdep_assert_held"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "inode"
                      },
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "trace_time_out_leases"
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          },
                          {
                            "identifier": "F_RDLCK"
                          },
                          {
                            "identifier": "dispose"
                          }
                        ],
                        "callee": "lease_modify"
                      }
                    }
                  },
                  "condition": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_downgrade_time"
                            }
                          }
                        }
                      ],
                      "callee": "past_time"
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          },
                          {
                            "identifier": "F_UNLCK"
                          },
                          {
                            "identifier": "dispose"
                          }
                        ],
                        "callee": "lease_modify"
                      }
                    }
                  },
                  "condition": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_break_time"
                            }
                          }
                        }
                      ],
                      "callee": "past_time"
                    }
                  }
                }
              }
            ]
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "leases_conflict",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "lease"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "breaker"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "rc",
                "identifierType": "bool"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "false"
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "lm_breaker_owns_lease"
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryExpression": {
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "lease"
                            }
                          ],
                          "callee": "lm_breaker_owns_lease"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "rc"
                        },
                        "rightOperand": {
                          "identifier": "false"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "trace"
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "FL_LAYOUT"
                      },
                      "operator": "&"
                    }
                  },
                  "rightOperand": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "FL_LAYOUT"
                      },
                      "operator": "&"
                    }
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "rc"
                        },
                        "rightOperand": {
                          "identifier": "false"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "trace"
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "FL_DELEG"
                      },
                      "operator": "&"
                    }
                  },
                  "rightOperand": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "FL_LEASE"
                      },
                      "operator": "&"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "rc"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "breaker"
                      },
                      {
                        "identifier": "lease"
                      }
                    ],
                    "callee": "locks_conflict"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "label": "trace:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "rc"
                  },
                  {
                    "identifier": "lease"
                  },
                  {
                    "identifier": "breaker"
                  }
                ],
                "callee": "trace_leases_conflict"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "rc"
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "any_leases_conflict",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "breaker"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *",
                "initialValue": "inode->i_flctx"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "lockdep_assert_held"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "returnStatement": {
                      "identifier": "true"
                    }
                  },
                  "condition": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "fl"
                        },
                        {
                          "identifier": "breaker"
                        }
                      ],
                      "callee": "leases_conflict"
                    }
                  }
                }
              }
            ]
          },
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "static bool"
      }
    },
    {
      "functionDef": {
        "functionName": "__break_lease",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "mode"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "type"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "new_fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "tmp",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "break_time",
                "identifierType": "unsigned long"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "want_write",
                "identifierType": "int",
                "initialValue": "(mode & O_ACCMODE) != O_RDONLY"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "new_fl"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "NULL"
                      },
                      {
                        "conditionalExpression": {
                          "condition": {
                            "identifier": "want_write"
                          },
                          "trueExpression": {
                            "identifier": "F_WRLCK"
                          },
                          "falseExpression": {
                            "identifier": "F_RDLCK"
                          }
                        }
                      }
                    ],
                    "callee": "lease_alloc"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "new_fl"
                      }
                    ],
                    "callee": "PTR_ERR"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "new_fl"
                    }
                  ],
                  "callee": "IS_ERR"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_flags"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "type"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "constant": "1"
                          }
                        ],
                        "callee": "WARN_ON_ONCE"
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "free_lock"
                    }
                  }
                ]
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "time_out_leases"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "inode"
                        },
                        {
                          "identifier": "new_fl"
                        }
                      ],
                      "callee": "any_leases_conflict"
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "break_time"
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "break_time"
                        },
                        "rightOperand": {
                          "AdditiveExpression": {
                            "leftOperand": {
                              "identifier": "jiffies"
                            },
                            "rightOperand": {
                              "MultiplicativeExpression": {
                                "leftOperand": {
                                  "identifier": "lease_break_time"
                                },
                                "rightOperand": {
                                  "identifier": "HZ"
                                },
                                "operator": "*"
                              }
                            },
                            "operator": "+"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "postIncDecOperationExpression": {
                            "operand": {
                              "identifier": "break_time"
                            },
                            "operator": "++"
                          }
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "break_time"
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "=="
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "lease_break_time"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": ">"
                }
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "fl"
                            },
                            {
                              "identifier": "new_fl"
                            }
                          ],
                          "callee": "leases_conflict"
                        }
                      }
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "ifStatement": {
                          "ifBlock": {
                            "continueStatement": "continue"
                          },
                          "condition": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_flags"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "FL_UNLOCK_PENDING"
                              },
                              "operator": "&"
                            }
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_flags"
                                }
                              }
                            },
                            "rightOperand": {
                              "identifier": "FL_UNLOCK_PENDING"
                            },
                            "operator": "|="
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_break_time"
                                }
                              }
                            },
                            "rightOperand": {
                              "identifier": "break_time"
                            },
                            "operator": "="
                          }
                        }
                      }
                    ]
                  },
                  "condition": {
                    "identifier": "want_write"
                  },
                  "elseBlock": {
                    "compoundStatement": [
                      {
                        "ifStatement": {
                          "ifBlock": {
                            "continueStatement": "continue"
                          },
                          "condition": {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "fl"
                                }
                              ],
                              "callee": "lease_breaking"
                            }
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_flags"
                                }
                              }
                            },
                            "rightOperand": {
                              "identifier": "FL_DOWNGRADE_PENDING"
                            },
                            "operator": "|="
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_downgrade_time"
                                }
                              }
                            },
                            "rightOperand": {
                              "identifier": "break_time"
                            },
                            "operator": "="
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "dispose"
                              }
                            }
                          }
                        ],
                        "callee": "locks_delete_lock_ctx"
                      }
                    }
                  },
                  "condition": {
                    "unaryExpression": {
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "fl"
                            }
                          ],
                          "callee": "lm_break"
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "flc_lease"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "callee": "list_empty"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          },
                          {
                            "identifier": "new_fl"
                          }
                        ],
                        "callee": "trace_break_lease_noblock"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EWOULDBLOCK"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  }
                ]
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "identifier": "mode"
                  },
                  "rightOperand": {
                    "identifier": "O_NONBLOCK"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "label": "restart:"
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "expressionStatement": {}
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "break_time"
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_break_time"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "break_time"
                    },
                    "rightOperand": {
                      "identifier": "jiffies"
                    },
                    "operator": "-="
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "break_time"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "postIncDecOperationExpression": {
                    "operand": {
                      "identifier": "break_time"
                    },
                    "operator": "++"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "break_time"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  },
                  {
                    "identifier": "new_fl"
                  },
                  {
                    "identifier": "leases_conflict"
                  }
                ],
                "callee": "locks_insert_block"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "new_fl"
                  }
                ],
                "callee": "trace_break_lease_block"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_up_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "locks_dispose_list"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_wait"
                          }
                        }
                      },
                      {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_blocked_member"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty"
                        }
                      },
                      {
                        "identifier": "break_time"
                      }
                    ],
                    "callee": "wait_event_interruptible_timeout"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "new_fl"
                  }
                ],
                "callee": "trace_break_lease_unblock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "new_fl"
                  }
                ],
                "callee": "locks_delete_block"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "inode"
                              },
                              {
                                "unaryOperationExpression": {
                                  "operator": "&",
                                  "operand": {
                                    "identifier": "dispose"
                                  }
                                }
                              }
                            ],
                            "callee": "time_out_leases"
                          }
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "error"
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "=="
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "restart"
                        }
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "inode"
                            },
                            {
                              "identifier": "new_fl"
                            }
                          ],
                          "callee": "any_leases_conflict"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "constant": "0"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "error"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": ">="
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_up_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "locks_dispose_list"
              }
            }
          },
          {
            "label": "free_lock:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "new_fl"
                  }
                ],
                "callee": "locks_free_lock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_get_mtime",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct timespec64 *",
            "parameter": "time"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "has_lease",
                "identifierType": "bool",
                "initialValue": "false"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_lock"
                      }
                    }
                  },
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {
                    "expressionStatement": {}
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "has_lease"
                            },
                            "rightOperand": {
                              "identifier": "true"
                            },
                            "operator": "="
                          }
                        }
                      },
                      "condition": {
                        "AndExpression": {
                          "leftOperand": {
                            "identifier": "fl"
                          },
                          "rightOperand": {
                            "EqualityExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_type"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "F_WRLCK"
                              },
                              "operator": "=="
                            }
                          },
                          "operator": "&&"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_unlock"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "identifier": "ctx"
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "flc_lease"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty_careful"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "unaryOperationExpression": {
                        "operator": "*",
                        "operand": {
                          "identifier": "time"
                        }
                      }
                    },
                    "rightOperand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          }
                        ],
                        "callee": "current_time"
                      }
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "identifier": "has_lease"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "fcntl_getlease",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "type",
                "identifierType": "int",
                "initialValue": "F_UNLCK"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "file_rwsem"
                              }
                            }
                          }
                        ],
                        "callee": "percpu_down_read"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_lock"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "dispose"
                              }
                            }
                          }
                        ],
                        "callee": "time_out_leases"
                      }
                    }
                  },
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {},
                  {
                    "compoundStatement": [
                      {
                        "ifStatement": {
                          "ifBlock": {
                            "continueStatement": "continue"
                          },
                          "condition": {
                            "EqualityExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_file"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "filp"
                              },
                              "operator": "!="
                            }
                          }
                        }
                      },
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "type"
                            },
                            "rightOperand": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "fl"
                                  }
                                ],
                                "callee": "target_leasetype"
                              }
                            },
                            "operator": "="
                          }
                        }
                      },
                      {
                        "breakStatement": "break"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "flc_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_unlock"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "file_rwsem"
                              }
                            }
                          }
                        ],
                        "callee": "percpu_up_read"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "dispose"
                              }
                            }
                          }
                        ],
                        "callee": "locks_dispose_list"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "identifier": "ctx"
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "flc_lease"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "list_empty_careful"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "type"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "check_conflicting_open",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "const long",
            "parameter": "arg"
          },
          {
            "parameterType": "int",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "self_wcount",
                "identifierType": "int",
                "initialValue": "0"
              },
              {
                "identifier": "self_rcount",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "constant": "0"
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "identifier": "flags"
                  },
                  "rightOperand": {
                    "identifier": "FL_LAYOUT"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "constant": "0"
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "identifier": "flags"
                  },
                  "rightOperand": {
                    "identifier": "FL_DELEG"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "conditionalExpression": {
                    "condition": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          }
                        ],
                        "callee": "inode_is_open_for_write"
                      }
                    },
                    "trueExpression": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "EAGAIN"
                        }
                      }
                    },
                    "falseExpression": {
                      "constant": "0"
                    }
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "arg"
                  },
                  "rightOperand": {
                    "identifier": "F_RDLCK"
                  },
                  "operator": "=="
                }
              },
              "elseBlock": {
                "ifStatement": {
                  "ifBlock": {
                    "returnStatement": {
                      "constant": "0"
                    }
                  },
                  "condition": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "arg"
                      },
                      "rightOperand": {
                        "identifier": "F_WRLCK"
                      },
                      "operator": "!="
                    }
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "self_wcount"
                    },
                    "rightOperand": {
                      "constant": "1"
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "f_mode"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "FMODE_WRITE"
                  },
                  "operator": "&"
                }
              },
              "elseBlock": {
                "ifStatement": {
                  "ifBlock": {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "self_rcount"
                        },
                        "rightOperand": {
                          "constant": "1"
                        },
                        "operator": "="
                      }
                    }
                  },
                  "condition": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "f_mode"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "FMODE_READ"
                      },
                      "operator": "&"
                    }
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EAGAIN"
                    }
                  }
                }
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "i_writecount"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "atomic_read"
                        }
                      },
                      "rightOperand": {
                        "identifier": "self_wcount"
                      },
                      "operator": "!="
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "i_readcount"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "atomic_read"
                        }
                      },
                      "rightOperand": {
                        "identifier": "self_rcount"
                      },
                      "operator": "!="
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "generic_add_lease",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "arg"
          },
          {
            "parameterType": "struct file_lock * *",
            "parameter": "flp"
          },
          {
            "parameterType": "void * *",
            "parameter": "priv"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "my_fl",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              },
              {
                "identifier": "lease",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "is_deleg",
                "identifierType": "bool",
                "initialValue": "(*flp)->fl_flags & FL_DELEG"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "lease"
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "*",
                    "operand": {
                      "identifier": "flp"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "lease"
                  }
                ],
                "callee": "trace_generic_add_lease"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "inode"
                      },
                      {
                        "identifier": "arg"
                      }
                    ],
                    "callee": "locks_get_lock_context"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "ENOMEM"
                    }
                  }
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EAGAIN"
                    }
                  }
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "identifier": "is_deleg"
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "inode"
                            }
                          ],
                          "callee": "inode_trylock"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          }
                        ],
                        "callee": "inode_unlock"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "constant": "1"
                          }
                        ],
                        "callee": "WARN_ON_ONCE"
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "EINVAL"
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "identifier": "is_deleg"
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "arg"
                      },
                      "rightOperand": {
                        "identifier": "F_WRLCK"
                      },
                      "operator": "=="
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "time_out_leases"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "arg"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      }
                    ],
                    "callee": "check_conflicting_open"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EAGAIN"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "my_fl"
                            },
                            "rightOperand": {
                              "identifier": "fl"
                            },
                            "operator": "="
                          }
                        }
                      },
                      {
                        "continueStatement": "continue"
                      }
                    ]
                  },
                  "condition": {
                    "AndExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_file"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "filp"
                          },
                          "operator": "=="
                        }
                      },
                      "rightOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_owner"
                              }
                            }
                          },
                          "rightOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_owner"
                              }
                            }
                          },
                          "operator": "=="
                        }
                      },
                      "operator": "&&"
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  },
                  "condition": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "arg"
                      },
                      "rightOperand": {
                        "identifier": "F_WRLCK"
                      },
                      "operator": "=="
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  },
                  "condition": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "FL_UNLOCK_PENDING"
                      },
                      "operator": "&"
                    }
                  }
                }
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "lease"
                        },
                        "rightOperand": {
                          "identifier": "my_fl"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryExpression": {
                            "operand": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "lease"
                                  },
                                  {
                                    "identifier": "arg"
                                  },
                                  {
                                    "unaryOperationExpression": {
                                      "operator": "&",
                                      "operand": {
                                        "identifier": "dispose"
                                      }
                                    }
                                  }
                                ],
                                "callee": "lm_change"
                              }
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "identifier": "error"
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "out_setup"
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "my_fl"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EINVAL"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "leases_enable"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "lease"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lease"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "locks_insert_lock_ctx"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "smp_mb"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "arg"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_flags"
                          }
                        }
                      }
                    ],
                    "callee": "check_conflicting_open"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "lease"
                          }
                        ],
                        "callee": "locks_unlink_lock_ctx"
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  }
                ]
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "label": "out_setup:"
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "unaryExpression": {
                    "operand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "lease"
                          },
                          {
                            "identifier": "priv"
                          }
                        ],
                        "callee": "lm_setup"
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "lm_setup"
                  }
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_up_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "locks_dispose_list"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "inode"
                      }
                    ],
                    "callee": "inode_unlock"
                  }
                }
              },
              "condition": {
                "identifier": "is_deleg"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "unaryOperationExpression": {
                        "operator": "*",
                        "operand": {
                          "identifier": "flp"
                        }
                      }
                    },
                    "rightOperand": {
                      "identifier": "NULL"
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "error"
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "my_fl"
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "generic_delete_lease",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "void *",
            "parameter": "owner"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int",
                "initialValue": "-EAGAIN"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "victim",
                "identifierType": "struct file_lock *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "inode"
                          },
                          {
                            "identifier": "NULL"
                          }
                        ],
                        "callee": "trace_generic_delete_lease"
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "identifier": "error"
                    }
                  }
                ]
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "victim"
                            },
                            "rightOperand": {
                              "identifier": "fl"
                            },
                            "operator": "="
                          }
                        }
                      },
                      {
                        "breakStatement": "break"
                      }
                    ]
                  },
                  "condition": {
                    "AndExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_file"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "filp"
                          },
                          "operator": "=="
                        }
                      },
                      "rightOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_owner"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "owner"
                          },
                          "operator": "=="
                        }
                      },
                      "operator": "&&"
                    }
                  }
                }
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "victim"
                  }
                ],
                "callee": "trace_generic_delete_lease"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "error"
                    },
                    "rightOperand": {
                      "unaryExpression": {
                        "operand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "victim"
                              },
                              {
                                "identifier": "F_UNLCK"
                              },
                              {
                                "unaryOperationExpression": {
                                  "operator": "&",
                                  "operand": {
                                    "identifier": "dispose"
                                  }
                                }
                              }
                            ],
                            "callee": "lm_change"
                          }
                        }
                      }
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "identifier": "victim"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_up_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "locks_dispose_list"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "generic_setlease",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "arg"
          },
          {
            "parameterType": "struct file_lock * *",
            "parameter": "flp"
          },
          {
            "parameterType": "void * *",
            "parameter": "priv"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EACCES"
                    }
                  }
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "callExpression": {
                                "argumentList": [],
                                "callee": "current_fsuid"
                              }
                            },
                            {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "i_uid"
                                }
                              }
                            }
                          ],
                          "callee": "uid_eq"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "CAP_LEASE"
                            }
                          ],
                          "callee": "capable"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EINVAL"
                    }
                  }
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "i_mode"
                            }
                          }
                        }
                      ],
                      "callee": "S_ISREG"
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "arg"
                      }
                    ],
                    "callee": "security_file_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "error"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "switchStatement": {
              "condition": {
                "identifier": "arg"
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case F_UNLCK:"
                  },
                  {
                    "returnStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "*",
                              "operand": {
                                "identifier": "priv"
                              }
                            }
                          }
                        ],
                        "callee": "generic_delete_lease"
                      }
                    }
                  },
                  {
                    "label": "case F_RDLCK:"
                  },
                  {
                    "label": "case F_WRLCK:"
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "constant": "1"
                                  }
                                ],
                                "callee": "WARN_ON_ONCE"
                              }
                            }
                          },
                          {
                            "returnStatement": {
                              "unaryOperationExpression": {
                                "operator": "-",
                                "operand": {
                                  "identifier": "ENOLCK"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "ptrMemberAccess": {
                              "leftOperand": "(*flp)->fl_lmops",
                              "rightOperand": "lm_break",
                              "operator": "->"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "identifier": "arg"
                          },
                          {
                            "identifier": "flp"
                          },
                          {
                            "identifier": "priv"
                          }
                        ],
                        "callee": "generic_add_lease"
                      }
                    }
                  },
                  {
                    "label": "default:"
                  },
                  {
                    "returnStatement": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "EINVAL"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "lease_notifier_chain",
          "identifierType": "struct srcu_notifier_head"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "lease_notifier_chain_init",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "lease_notifier_chain"
                      }
                    }
                  }
                ],
                "callee": "srcu_init_notifier_head"
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "setlease_notifier",
        "parameterList": [
          {
            "parameterType": "long",
            "parameter": "arg"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "lease"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "lease_notifier_chain"
                          }
                        }
                      },
                      {
                        "identifier": "arg"
                      },
                      {
                        "identifier": "lease"
                      }
                    ],
                    "callee": "srcu_notifier_call_chain"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "arg"
                  },
                  "rightOperand": {
                    "identifier": "F_UNLCK"
                  },
                  "operator": "!="
                }
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_register_notifier",
        "parameterList": [
          {
            "parameterType": "struct notifier_block *",
            "parameter": "nb"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "lease_notifier_chain"
                      }
                    }
                  },
                  {
                    "identifier": "nb"
                  }
                ],
                "callee": "srcu_notifier_chain_register"
              }
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_unregister_notifier",
        "parameterList": [
          {
            "parameterType": "struct notifier_block *",
            "parameter": "nb"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "lease_notifier_chain"
                      }
                    }
                  },
                  {
                    "identifier": "nb"
                  }
                ],
                "callee": "srcu_notifier_chain_unregister"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_notifier_chain_init",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "setlease_notifier",
        "parameterList": [
          {
            "parameterType": "long",
            "parameter": "arg"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "lease"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_register_notifier",
        "parameterList": [
          {
            "parameterType": "struct notifier_block *",
            "parameter": "nb"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "lease_unregister_notifier",
        "parameterList": [
          {
            "parameterType": "struct notifier_block *",
            "parameter": "nb"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "vfs_setlease",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "arg"
          },
          {
            "parameterType": "struct file_lock * *",
            "parameter": "lease"
          },
          {
            "parameterType": "void * *",
            "parameter": "priv"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "arg"
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "*",
                          "operand": {
                            "identifier": "lease"
                          }
                        }
                      }
                    ],
                    "callee": "setlease_notifier"
                  }
                }
              },
              "condition": {
                "identifier": "lease"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryExpression": {
                    "operand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "identifier": "arg"
                          },
                          {
                            "identifier": "lease"
                          },
                          {
                            "identifier": "priv"
                          }
                        ],
                        "callee": "setlease"
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "setlease"
                  }
                }
              },
              "elseBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "arg"
                      },
                      {
                        "identifier": "lease"
                      },
                      {
                        "identifier": "priv"
                      }
                    ],
                    "callee": "generic_setlease"
                  }
                }
              }
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "do_fcntl_add_lease",
        "parameterList": [
          {
            "parameterType": "unsigned int",
            "parameter": "fd"
          },
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "arg"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {},
          {},
          {},
          {},
          {
            "expressionStatement": {}
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "fl"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "arg"
                      }
                    ],
                    "callee": "lease_alloc"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "PTR_ERR"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "fl"
                    }
                  ],
                  "callee": "IS_ERR"
                }
              }
            }
          },
          {},
          {},
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "fasync_alloc"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "locks_free_lock"
                  }
                }
              },
              {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "ENOMEM"
                    }
                  }
                }
              }
            ]
          },
          {},
          {},
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "fa_fd"
                },
                "rightOperand": {
                  "identifier": "fd"
                },
                "operator": "="
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "expressionStatement": {}
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "locks_free_lock"
                  }
                }
              },
              "condition": {
                "identifier": "fl"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "expressionStatement": {}
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "fcntl_setlease",
        "parameterList": [
          {
            "parameterType": "unsigned int",
            "parameter": "fd"
          },
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "long",
            "parameter": "arg"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "F_UNLCK"
                      },
                      {
                        "identifier": "NULL"
                      },
                      {
                        "castExpression": {
                          "originalExpression": {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "filp"
                              }
                            }
                          },
                          "target": "void **"
                        }
                      }
                    ],
                    "callee": "vfs_setlease"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "arg"
                  },
                  "rightOperand": {
                    "identifier": "F_UNLCK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fd"
                  },
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "arg"
                  }
                ],
                "callee": "do_fcntl_add_lease"
              }
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "flock_lock_inode_wait",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "might_sleep"
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_lock_inode_wait",
        "parameterList": [
          {
            "parameterType": "struct inode *",
            "parameter": "inode"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "res",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {
            "switchStatement": {
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_flags"
                      }
                    }
                  },
                  "rightOperand": {
                    "InclusiveOrExpression": {
                      "leftOperand": {
                        "identifier": "FL_POSIX"
                      },
                      "rightOperand": {
                        "identifier": "FL_FLOCK"
                      },
                      "operator": "|"
                    }
                  },
                  "operator": "&"
                }
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case FL_POSIX:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "res"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "inode"
                              },
                              {
                                "identifier": "fl"
                              }
                            ],
                            "callee": "posix_lock_inode_wait"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "case FL_FLOCK:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "res"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "inode"
                              },
                              {
                                "identifier": "fl"
                              }
                            ],
                            "callee": "flock_lock_inode_wait"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "default:"
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [],
                        "callee": "BUG"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "res"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "SYSCALL_DEFINE2"
      }
    },
    {
      "functionDef": {
        "functionName": "vfs_test_lock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryExpression": {
                    "operand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "identifier": "F_GETLK"
                          },
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "lock"
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "lock"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "posix_test_lock"
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_translate_pid",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct pid_namespace *",
            "parameter": "ns"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "vnr",
                "identifierType": "pid_t"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "pid",
                "identifierType": "struct pid *"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "constant": "1"
                    }
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "fl"
                    }
                  ],
                  "callee": "IS_OFDLCK"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_pid"
                    }
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "fl"
                    }
                  ],
                  "callee": "IS_REMOTELCK"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "castExpression": {
                    "originalExpression": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "fl_pid"
                        }
                      }
                    },
                    "target": "pid_t"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "ns"
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "init_pid_ns"
                      }
                    }
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "rcu_read_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "pid"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_pid"
                          }
                        }
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "init_pid_ns"
                          }
                        }
                      }
                    ],
                    "callee": "find_pid_ns"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "vnr"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "pid"
                      },
                      {
                        "identifier": "ns"
                      }
                    ],
                    "callee": "pid_nr_ns"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "rcu_read_unlock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "vnr"
            }
          }
        ],
        "returnType": "static pid_t"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_lock_to_flock",
        "parameterList": [
          {
            "parameterType": "struct flock *",
            "parameter": "flock"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_pid"
                    }
                  }
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      },
                      {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "current"
                            }
                          ],
                          "callee": "task_active_pid_ns"
                        }
                      }
                    ],
                    "callee": "locks_translate_pid"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EOVERFLOW"
                    }
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_start"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "OFFT_OFFSET_MAX"
                  },
                  "operator": ">"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EOVERFLOW"
                    }
                  }
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_end"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "OFFSET_MAX"
                      },
                      "operator": "!="
                    }
                  },
                  "rightOperand": {
                    "RelationalExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_end"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "OFFT_OFFSET_MAX"
                      },
                      "operator": ">"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_start"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_start"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_len"
                    }
                  }
                },
                "rightOperand": {
                  "conditionalExpression": {
                    "condition": {
                      "EqualityExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_end"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "OFFSET_MAX"
                        },
                        "operator": "=="
                      }
                    },
                    "trueExpression": {
                      "constant": "0"
                    },
                    "falseExpression": {
                      "AdditiveExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_end"
                            }
                          }
                        },
                        "rightOperand": {
                          "AdditiveExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_start"
                                }
                              }
                            },
                            "rightOperand": {
                              "constant": "1"
                            },
                            "operator": "+"
                          }
                        },
                        "operator": "-"
                      }
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_whence"
                    }
                  }
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_type"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_type"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "posix_lock_to_flock64",
        "parameterList": [
          {
            "parameterType": "struct flock64 *",
            "parameter": "flock"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_pid"
                    }
                  }
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      },
                      {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "current"
                            }
                          ],
                          "callee": "task_active_pid_ns"
                        }
                      }
                    ],
                    "callee": "locks_translate_pid"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_start"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_start"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_len"
                    }
                  }
                },
                "rightOperand": {
                  "conditionalExpression": {
                    "condition": {
                      "EqualityExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_end"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "OFFSET_MAX"
                        },
                        "operator": "=="
                      }
                    },
                    "trueExpression": {
                      "constant": "0"
                    },
                    "falseExpression": {
                      "AdditiveExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_end"
                            }
                          }
                        },
                        "rightOperand": {
                          "AdditiveExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_start"
                                }
                              }
                            },
                            "rightOperand": {
                              "constant": "1"
                            },
                            "operator": "+"
                          }
                        },
                        "operator": "-"
                      }
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_whence"
                    }
                  }
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_type"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_type"
                    }
                  }
                },
                "operator": "="
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "fcntl_getlk",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct flock *",
            "parameter": "flock"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "fl"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [],
                    "callee": "locks_alloc_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "ENOMEM"
                    }
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "fl"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EINVAL"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "l_type"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "F_RDLCK"
                      },
                      "operator": "!="
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "l_type"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "F_WRLCK"
                      },
                      "operator": "!="
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "fl"
                      },
                      {
                        "identifier": "flock"
                      }
                    ],
                    "callee": "flock_to_posix_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EINVAL"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "l_pid"
                              }
                            }
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_OFDLCK"
                        },
                        "operator": "|="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_owner"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "filp"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "cmd"
                  },
                  "rightOperand": {
                    "identifier": "F_OFD_GETLK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "vfs_test_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_type"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_type"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "flock"
                              },
                              {
                                "identifier": "fl"
                              }
                            ],
                            "callee": "posix_lock_to_flock"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "identifier": "error"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_type"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "F_UNLCK"
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_free_lock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "vfs_lock_file",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "conf"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryExpression": {
                    "operand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "identifier": "cmd"
                          },
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "lock"
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "lock"
                  }
                }
              },
              "elseBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "fl"
                      },
                      {
                        "identifier": "conf"
                      }
                    ],
                    "callee": "posix_lock_file"
                  }
                }
              }
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "functionDef": {
        "functionName": "do_lock_file_wait",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_type"
                          }
                        }
                      }
                    ],
                    "callee": "security_file_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "error"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "check_fmode_for_setlk",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "switchStatement": {
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "fl_type"
                  }
                }
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case F_RDLCK:"
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EBADF"
                            }
                          }
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "f_mode"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "FMODE_READ"
                              },
                              "operator": "&"
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "case F_WRLCK:"
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EBADF"
                            }
                          }
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "f_mode"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "FMODE_WRITE"
                              },
                              "operator": "&"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "fcntl_setlk",
        "parameterList": [
          {
            "parameterType": "unsigned int",
            "parameter": "fd"
          },
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct flock *",
            "parameter": "flock"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "file_lock",
                "identifierType": "struct file_lock *",
                "initialValue": "locks_alloc_lock()"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "f",
                "identifierType": "struct file *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "ENOLCK"
                    }
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "file_lock"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "file_lock"
                      },
                      {
                        "identifier": "flock"
                      }
                    ],
                    "callee": "flock_to_posix_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "file_lock"
                      }
                    ],
                    "callee": "check_fmode_for_setlk"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "switchStatement": {
              "condition": {
                "identifier": "cmd"
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case F_OFD_SETLK:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EINVAL"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "l_pid"
                              }
                            }
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "cmd"
                        },
                        "rightOperand": {
                          "identifier": "F_SETLK"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_OFDLCK"
                        },
                        "operator": "|="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_owner"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "filp"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "case F_OFD_SETLKW:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EINVAL"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "l_pid"
                              }
                            }
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "cmd"
                        },
                        "rightOperand": {
                          "identifier": "F_SETLKW"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_OFDLCK"
                        },
                        "operator": "|="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_owner"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "filp"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "identifier": "fallthrough"
                    }
                  },
                  {
                    "label": "case F_SETLKW:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_SLEEP"
                        },
                        "operator": "|="
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "cmd"
                      },
                      {
                        "identifier": "file_lock"
                      }
                    ],
                    "callee": "do_lock_file_wait"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "files",
                        "identifierType": "struct files_struct *",
                        "initialValue": "current->files"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "file_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_lock"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "f"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "files"
                              },
                              {
                                "identifier": "fd"
                              }
                            ],
                            "callee": "files_lookup_fd_locked"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "file_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_unlock"
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_type"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "identifier": "F_UNLCK"
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "error"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "filp"
                                      },
                                      {
                                        "identifier": "cmd"
                                      },
                                      {
                                        "identifier": "file_lock"
                                      }
                                    ],
                                    "callee": "do_lock_file_wait"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "error"
                                  }
                                ],
                                "callee": "WARN_ON_ONCE"
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "error"
                                },
                                "rightOperand": {
                                  "unaryOperationExpression": {
                                    "operator": "-",
                                    "operand": {
                                      "identifier": "EBADF"
                                    }
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "f"
                          },
                          "rightOperand": {
                            "identifier": "filp"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "error"
                      }
                    }
                  },
                  "rightOperand": {
                    "AndExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_type"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "F_UNLCK"
                          },
                          "operator": "!="
                        }
                      },
                      "rightOperand": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_flags"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "FL_OFDLCK"
                              },
                              "operator": "&"
                            }
                          }
                        }
                      },
                      "operator": "&&"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "inode"
                  },
                  {
                    "identifier": "file_lock"
                  },
                  {
                    "identifier": "error"
                  }
                ],
                "callee": "trace_fcntl_setlk"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "file_lock"
                  }
                ],
                "callee": "locks_free_lock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "fcntl_getlk64",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct flock64 *",
            "parameter": "flock"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "fl"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [],
                    "callee": "locks_alloc_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "ENOMEM"
                    }
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "fl"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "EINVAL"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "l_type"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "F_RDLCK"
                      },
                      "operator": "!="
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "l_type"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "F_WRLCK"
                      },
                      "operator": "!="
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "fl"
                      },
                      {
                        "identifier": "flock"
                      }
                    ],
                    "callee": "flock64_to_posix_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EINVAL"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "l_pid"
                              }
                            }
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "cmd"
                        },
                        "rightOperand": {
                          "identifier": "F_GETLK64"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_OFDLCK"
                        },
                        "operator": "|="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_owner"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "filp"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "cmd"
                  },
                  "rightOperand": {
                    "identifier": "F_OFD_GETLK"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "vfs_test_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "l_type"
                    }
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "fl_type"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "flock"
                      },
                      {
                        "identifier": "fl"
                      }
                    ],
                    "callee": "posix_lock_to_flock64"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_type"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "F_UNLCK"
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "fl"
                  }
                ],
                "callee": "locks_free_lock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "fcntl_setlk64",
        "parameterList": [
          {
            "parameterType": "unsigned int",
            "parameter": "fd"
          },
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "cmd"
          },
          {
            "parameterType": "struct flock64 *",
            "parameter": "flock"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "file_lock",
                "identifierType": "struct file_lock *",
                "initialValue": "locks_alloc_lock()"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "f",
                "identifierType": "struct file *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "-",
                    "operand": {
                      "identifier": "ENOLCK"
                    }
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "file_lock"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "file_lock"
                      },
                      {
                        "identifier": "flock"
                      }
                    ],
                    "callee": "flock64_to_posix_lock"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "file_lock"
                      }
                    ],
                    "callee": "check_fmode_for_setlk"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "gotoStatement": {
                  "goto": "out"
                }
              },
              "condition": {
                "identifier": "error"
              }
            }
          },
          {
            "switchStatement": {
              "condition": {
                "identifier": "cmd"
              },
              "switchBlock": {
                "compoundStatement": [
                  {
                    "label": "case F_OFD_SETLK:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EINVAL"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "l_pid"
                              }
                            }
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "cmd"
                        },
                        "rightOperand": {
                          "identifier": "F_SETLK64"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_OFDLCK"
                        },
                        "operator": "|="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_owner"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "filp"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "breakStatement": "break"
                  },
                  {
                    "label": "case F_OFD_SETLKW:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "error"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "-",
                            "operand": {
                              "identifier": "EINVAL"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "gotoStatement": {
                          "goto": "out"
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "l_pid"
                              }
                            }
                          },
                          "rightOperand": {
                            "constant": "0"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "cmd"
                        },
                        "rightOperand": {
                          "identifier": "F_SETLKW64"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_OFDLCK"
                        },
                        "operator": "|="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_owner"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "filp"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "identifier": "fallthrough"
                    }
                  },
                  {
                    "label": "case F_SETLKW64:"
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "fl_flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "FL_SLEEP"
                        },
                        "operator": "|="
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "cmd"
                      },
                      {
                        "identifier": "file_lock"
                      }
                    ],
                    "callee": "do_lock_file_wait"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "files",
                        "identifierType": "struct files_struct *",
                        "initialValue": "current->files"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "file_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_lock"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "f"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "files"
                              },
                              {
                                "identifier": "fd"
                              }
                            ],
                            "callee": "files_lookup_fd_locked"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "file_lock"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "spin_unlock"
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "fl_type"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "identifier": "F_UNLCK"
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "error"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "filp"
                                      },
                                      {
                                        "identifier": "cmd"
                                      },
                                      {
                                        "identifier": "file_lock"
                                      }
                                    ],
                                    "callee": "do_lock_file_wait"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "error"
                                  }
                                ],
                                "callee": "WARN_ON_ONCE"
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "error"
                                },
                                "rightOperand": {
                                  "unaryOperationExpression": {
                                    "operator": "-",
                                    "operand": {
                                      "identifier": "EBADF"
                                    }
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "f"
                          },
                          "rightOperand": {
                            "identifier": "filp"
                          },
                          "operator": "!="
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "error"
                      }
                    }
                  },
                  "rightOperand": {
                    "AndExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_type"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "F_UNLCK"
                          },
                          "operator": "!="
                        }
                      },
                      "rightOperand": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_flags"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "FL_OFDLCK"
                              },
                              "operator": "&"
                            }
                          }
                        }
                      },
                      "operator": "&&"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "file_lock"
                  }
                ],
                "callee": "locks_free_lock"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "error"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_remove_posix",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "fl_owner_t",
            "parameter": "owner"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "error",
                "identifierType": "int"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "lock",
                "identifierType": "struct file_lock"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "ctx"
                      }
                    }
                  },
                  "rightOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "flc_posix"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "callee": "list_empty"
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "lock"
                      }
                    }
                  }
                ],
                "callee": "locks_init_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_type",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "F_UNLCK"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_flags",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "InclusiveOrExpression": {
                    "leftOperand": {
                      "identifier": "FL_POSIX"
                    },
                    "rightOperand": {
                      "identifier": "FL_CLOSE"
                    },
                    "operator": "|"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_start",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_end",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "OFFSET_MAX"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_owner",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "owner"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_pid",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "tgid"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_file",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "filp"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_ops",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "NULL"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "lock",
                    "rightOperand": "fl_lmops",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "NULL"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "error"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "filp"
                      },
                      {
                        "identifier": "F_SETLK"
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "lock"
                          }
                        }
                      },
                      {
                        "identifier": "NULL"
                      }
                    ],
                    "callee": "vfs_lock_file"
                  }
                },
                "operator": "="
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_remove_flock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock_context *",
            "parameter": "flctx"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "flc_flock"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "callee": "list_empty"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "LOCK_UN"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "fl"
                      }
                    }
                  }
                ],
                "callee": "flock_make_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "memberAccess": {
                    "leftOperand": "fl",
                    "rightOperand": "fl_flags",
                    "operator": "."
                  }
                },
                "rightOperand": {
                  "identifier": "FL_CLOSE"
                },
                "operator": "|="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "unaryExpression": {
                    "operand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "identifier": "F_SETLKW"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "fl"
                              }
                            }
                          }
                        ],
                        "callee": "flock"
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "flock"
                  }
                }
              },
              "elseBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "inode"
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "fl"
                          }
                        }
                      }
                    ],
                    "callee": "flock_lock_inode"
                  }
                }
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_remove_lease",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock_context *",
            "parameter": "ctx"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "tmp",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "dispose"
                  }
                ],
                "callee": "LIST_HEAD"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "flc_lease"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "callee": "list_empty"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_down_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      },
                      {
                        "identifier": "F_UNLCK"
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "identifier": "dispose"
                          }
                        }
                      }
                    ],
                    "callee": "lease_modify"
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "filp"
                  },
                  "rightOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_file"
                      }
                    }
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "file_rwsem"
                      }
                    }
                  }
                ],
                "callee": "percpu_up_read"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "dispose"
                      }
                    }
                  }
                ],
                "callee": "locks_dispose_list"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_remove_file",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "ptrMemberAccess": {
                              "leftOperand": "locks_inode(filp)",
                              "rightOperand": "i_flctx",
                              "operator": "->"
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "filp"
                  }
                ],
                "callee": "locks_remove_posix"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "ctx"
                  }
                ],
                "callee": "locks_remove_flock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "ctx"
                  }
                ],
                "callee": "locks_remove_lease"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_posix"
                          }
                        }
                      }
                    }
                  },
                  {
                    "constant": "\"POSIX\""
                  }
                ],
                "callee": "locks_check_ctx_file_list"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_flock"
                          }
                        }
                      }
                    }
                  },
                  {
                    "constant": "\"FLOCK\""
                  }
                ],
                "callee": "locks_check_ctx_file_list"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "filp"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lease"
                          }
                        }
                      }
                    }
                  },
                  {
                    "constant": "\"LEASE\""
                  }
                ],
                "callee": "locks_check_ctx_file_list"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "vfs_cancel_lock",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryExpression": {
                    "operand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "filp"
                          },
                          {
                            "identifier": "F_CANCELLK"
                          },
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "lock"
                      }
                    }
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "lock"
                  }
                }
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL_GPL"
      }
    },
    {
      "classDefStatement": {
        "className": "locks_iterator",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "li_cpu",
                  "identifierType": "int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "li_pos",
                  "identifierType": "loff_t"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "functionDef": {
        "functionName": "lock_get_status",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "f"
          },
          {
            "parameterType": "struct file_lock *",
            "parameter": "fl"
          },
          {
            "parameterType": "loff_t",
            "parameter": "id"
          },
          {
            "parameterType": "char *",
            "parameter": "pfx"
          },
          {
            "parameterType": "int",
            "parameter": "repeat"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl_pid",
                "identifierType": "unsigned int"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "proc_pidns",
                "identifierType": "struct pid_namespace *",
                "initialValue": "proc_pid_ns(file_inode(f->file)->i_sb)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "type",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "fl_pid"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "fl"
                      },
                      {
                        "identifier": "proc_pidns"
                      }
                    ],
                    "callee": "locks_translate_pid"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "inode"
                    },
                    "rightOperand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_file"
                              }
                            }
                          }
                        ],
                        "callee": "locks_inode"
                      }
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "fl_file"
                      }
                    }
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "!="
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "f"
                  },
                  {
                    "constant": "\"%lld: \""
                  },
                  {
                    "identifier": "id"
                  }
                ],
                "callee": "seq_printf"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "f"
                      },
                      {
                        "constant": "\"%*s\""
                      },
                      {
                        "AdditiveExpression": {
                          "leftOperand": {
                            "identifier": "repeat"
                          },
                          "rightOperand": {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "constant": "1"
                              },
                              "rightOperand": {
                                "castExpression": {
                                  "originalExpression": {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "pfx"
                                        }
                                      ],
                                      "callee": "strlen"
                                    }
                                  },
                                  "target": "int"
                                }
                              },
                              "operator": "+"
                            }
                          },
                          "operator": "-"
                        }
                      },
                      {
                        "identifier": "pfx"
                      }
                    ],
                    "callee": "seq_printf"
                  }
                }
              },
              "condition": {
                "identifier": "repeat"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "f"
                              },
                              {
                                "constant": "\"ACCESS\""
                              }
                            ],
                            "callee": "seq_puts"
                          }
                        }
                      },
                      "condition": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_flags"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "FL_ACCESS"
                          },
                          "operator": "&"
                        }
                      },
                      "elseBlock": {
                        "ifStatement": {
                          "ifBlock": {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "f"
                                  },
                                  {
                                    "constant": "\"OFDLCK\""
                                  }
                                ],
                                "callee": "seq_puts"
                              }
                            }
                          },
                          "condition": {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "fl"
                                }
                              ],
                              "callee": "IS_OFDLCK"
                            }
                          },
                          "elseBlock": {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "f"
                                  },
                                  {
                                    "constant": "\"POSIX \""
                                  }
                                ],
                                "callee": "seq_puts"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "f"
                          },
                          {
                            "constant": "\" %s \""
                          },
                          {
                            "conditionalExpression": {
                              "condition": {
                                "EqualityExpression": {
                                  "leftOperand": {
                                    "identifier": "inode"
                                  },
                                  "rightOperand": {
                                    "identifier": "NULL"
                                  },
                                  "operator": "=="
                                }
                              },
                              "trueExpression": {
                                "constant": "\"*NOINODE*\""
                              },
                              "falseExpression": {
                                "constant": "\"ADVISORY \""
                              }
                            }
                          }
                        ],
                        "callee": "seq_printf"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "fl"
                    }
                  ],
                  "callee": "IS_POSIX"
                }
              },
              "elseBlock": {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "f"
                              },
                              {
                                "constant": "\"FLOCK  ADVISORY  \""
                              }
                            ],
                            "callee": "seq_puts"
                          }
                        }
                      }
                    ]
                  },
                  "condition": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "fl"
                        }
                      ],
                      "callee": "IS_FLOCK"
                    }
                  },
                  "elseBlock": {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "ifStatement": {
                              "ifBlock": {
                                "expressionStatement": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "f"
                                      },
                                      {
                                        "constant": "\"DELEG  \""
                                      }
                                    ],
                                    "callee": "seq_puts"
                                  }
                                }
                              },
                              "condition": {
                                "BitAndExpression": {
                                  "leftOperand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "fl_flags"
                                      }
                                    }
                                  },
                                  "rightOperand": {
                                    "identifier": "FL_DELEG"
                                  },
                                  "operator": "&"
                                }
                              },
                              "elseBlock": {
                                "expressionStatement": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "f"
                                      },
                                      {
                                        "constant": "\"LEASE  \""
                                      }
                                    ],
                                    "callee": "seq_puts"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "ifStatement": {
                              "ifBlock": {
                                "expressionStatement": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "f"
                                      },
                                      {
                                        "constant": "\"BREAKING  \""
                                      }
                                    ],
                                    "callee": "seq_puts"
                                  }
                                }
                              },
                              "condition": {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "fl"
                                    }
                                  ],
                                  "callee": "lease_breaking"
                                }
                              },
                              "elseBlock": {
                                "ifStatement": {
                                  "ifBlock": {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "f"
                                          },
                                          {
                                            "constant": "\"ACTIVE    \""
                                          }
                                        ],
                                        "callee": "seq_puts"
                                      }
                                    }
                                  },
                                  "condition": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "fl_file"
                                      }
                                    }
                                  },
                                  "elseBlock": {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "f"
                                          },
                                          {
                                            "constant": "\"BREAKER   \""
                                          }
                                        ],
                                        "callee": "seq_puts"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "fl"
                            }
                          ],
                          "callee": "IS_LEASE"
                        }
                      },
                      "elseBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "f"
                                  },
                                  {
                                    "constant": "\"UNKNOWN UNKNOWN  \""
                                  }
                                ],
                                "callee": "seq_puts"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "type"
                },
                "rightOperand": {
                  "conditionalExpression": {
                    "condition": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "IS_LEASE"
                      }
                    },
                    "trueExpression": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "fl"
                          }
                        ],
                        "callee": "target_leasetype"
                      }
                    },
                    "falseExpression": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "fl_type"
                        }
                      }
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "f"
                  },
                  {
                    "constant": "\"%s \""
                  },
                  {
                    "conditionalExpression": {
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "type"
                          },
                          "rightOperand": {
                            "identifier": "F_WRLCK"
                          },
                          "operator": "=="
                        }
                      },
                      "trueExpression": {
                        "constant": "\"WRITE\""
                      },
                      "falseExpression": {
                        "conditionalExpression": {
                          "condition": {
                            "EqualityExpression": {
                              "leftOperand": {
                                "identifier": "type"
                              },
                              "rightOperand": {
                                "identifier": "F_RDLCK"
                              },
                              "operator": "=="
                            }
                          },
                          "trueExpression": {
                            "constant": "\"READ\""
                          },
                          "falseExpression": {
                            "constant": "\"UNLCK\""
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "seq_printf"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "f"
                          },
                          {
                            "constant": "\"%d %02x:%02x:%lu \""
                          },
                          {
                            "identifier": "fl_pid"
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "s_dev"
                                    }
                                  }
                                }
                              ],
                              "callee": "MAJOR"
                            }
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "s_dev"
                                    }
                                  }
                                }
                              ],
                              "callee": "MINOR"
                            }
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_ino"
                              }
                            }
                          }
                        ],
                        "callee": "seq_printf"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "identifier": "inode"
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "f"
                          },
                          {
                            "constant": "\"%d <none>:0 \""
                          },
                          {
                            "identifier": "fl_pid"
                          }
                        ],
                        "callee": "seq_printf"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "f"
                              },
                              {
                                "constant": "\"%Ld EOF\\n\""
                              },
                              {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_start"
                                  }
                                }
                              }
                            ],
                            "callee": "seq_printf"
                          }
                        }
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_end"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "OFFSET_MAX"
                          },
                          "operator": "=="
                        }
                      },
                      "elseBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "f"
                              },
                              {
                                "constant": "\"%Ld %Ld\\n\""
                              },
                              {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_start"
                                  }
                                }
                              },
                              {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "fl_end"
                                  }
                                }
                              }
                            ],
                            "callee": "seq_printf"
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "fl"
                    }
                  ],
                  "callee": "IS_POSIX"
                }
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "f"
                          },
                          {
                            "constant": "\"0 EOF\\n\""
                          }
                        ],
                        "callee": "seq_puts"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "get_next_blocked_member",
        "parameterList": [
          {
            "parameterType": "struct file_lock *",
            "parameter": "node"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "tmp",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "NULL"
                }
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "node"
                      },
                      "rightOperand": {
                        "identifier": "NULL"
                      },
                      "operator": "=="
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_blocker"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "NULL"
                      },
                      "operator": "=="
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "tmp"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "node"
                      },
                      {
                        "identifier": "fl_blocked_member"
                      }
                    ],
                    "callee": "list_next_entry"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "returnStatement": {
                      "identifier": "NULL"
                    }
                  }
                ]
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "tmp"
                        },
                        {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "fl_blocked_requests"
                                }
                              }
                            }
                          }
                        },
                        {
                          "identifier": "fl_blocked_member"
                        }
                      ],
                      "callee": "list_entry_is_head"
                    }
                  },
                  "rightOperand": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "tmp"
                      },
                      "rightOperand": {
                        "identifier": "node"
                      },
                      "operator": "=="
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "tmp"
            }
          }
        ],
        "returnType": "static struct file_lock *"
      }
    },
    {
      "functionDef": {
        "functionName": "locks_show",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "f"
          },
          {
            "parameterType": "void *",
            "parameter": "v"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "iter",
                "identifierType": "struct locks_iterator *",
                "initialValue": "f->private"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "cur",
                "identifierType": "struct file_lock *"
              },
              {
                "identifier": "tmp",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "proc_pidns",
                "identifierType": "struct pid_namespace *",
                "initialValue": "proc_pid_ns(file_inode(f->file)->i_sb)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "level",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "expressionStatement": {}
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "constant": "0"
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "cur"
                        },
                        {
                          "identifier": "proc_pidns"
                        }
                      ],
                      "callee": "locks_translate_pid"
                    }
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "whileStatement": {
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "cur"
                  },
                  "rightOperand": {
                    "identifier": "NULL"
                  },
                  "operator": "!="
                }
              },
              "whileBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "f"
                              },
                              {
                                "identifier": "cur"
                              },
                              {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "li_pos"
                                  }
                                }
                              },
                              {
                                "constant": "\"-> \""
                              },
                              {
                                "identifier": "level"
                              }
                            ],
                            "callee": "lock_get_status"
                          }
                        }
                      },
                      "condition": {
                        "identifier": "level"
                      },
                      "elseBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "f"
                              },
                              {
                                "identifier": "cur"
                              },
                              {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "li_pos"
                                  }
                                }
                              },
                              {
                                "constant": "\"\""
                              },
                              {
                                "identifier": "level"
                              }
                            ],
                            "callee": "lock_get_status"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {},
                          {
                            "expressionStatement": {}
                          },
                          {
                            "expressionStatement": {
                              "postIncDecOperationExpression": {
                                "operand": {
                                  "identifier": "level"
                                },
                                "operator": "++"
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "unaryOperationExpression": {
                                    "operator": "&",
                                    "operand": {
                                      "unaryExpression": {
                                        "operand": {
                                          "identifier": "fl_blocked_requests"
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              "callee": "list_empty"
                            }
                          }
                        }
                      },
                      "elseBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "tmp"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "cur"
                                      }
                                    ],
                                    "callee": "get_next_blocked_member"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "whileStatement": {
                              "condition": {
                                "AndExpression": {
                                  "leftOperand": {
                                    "EqualityExpression": {
                                      "leftOperand": {
                                        "identifier": "tmp"
                                      },
                                      "rightOperand": {
                                        "identifier": "NULL"
                                      },
                                      "operator": "=="
                                    }
                                  },
                                  "rightOperand": {
                                    "EqualityExpression": {
                                      "leftOperand": {
                                        "unaryExpression": {
                                          "operand": {
                                            "identifier": "fl_blocker"
                                          }
                                        }
                                      },
                                      "rightOperand": {
                                        "identifier": "NULL"
                                      },
                                      "operator": "!="
                                    }
                                  },
                                  "operator": "&&"
                                }
                              },
                              "whileBlock": {
                                "compoundStatement": [
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "identifier": "cur"
                                        },
                                        "rightOperand": {
                                          "unaryExpression": {
                                            "operand": {
                                              "identifier": "fl_blocker"
                                            }
                                          }
                                        },
                                        "operator": "="
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "postIncDecOperationExpression": {
                                        "operand": {
                                          "identifier": "level"
                                        },
                                        "operator": "--"
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "identifier": "tmp"
                                        },
                                        "rightOperand": {
                                          "callExpression": {
                                            "argumentList": [
                                              {
                                                "identifier": "cur"
                                              }
                                            ],
                                            "callee": "get_next_blocked_member"
                                          }
                                        },
                                        "operator": "="
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "cur"
                                },
                                "rightOperand": {
                                  "identifier": "tmp"
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "__show_fd_locks",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "f"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "head"
          },
          {
            "parameterType": "int *",
            "parameter": "id"
          },
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct files_struct *",
            "parameter": "files"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "fl",
                "identifierType": "struct file_lock *"
              }
            ]
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "EqualityExpression": {
                      "leftOperand": {
                        "identifier": "filp"
                      },
                      "rightOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "fl_file"
                          }
                        }
                      },
                      "operator": "!="
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "AndExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_owner"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "files"
                          },
                          "operator": "!="
                        }
                      },
                      "rightOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "fl_owner"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "filp"
                          },
                          "operator": "!="
                        }
                      },
                      "operator": "&&"
                    }
                  }
                }
              },
              {
                "expressionStatement": {
                  "postIncDecOperationExpression": {
                    "operand": {
                      "unaryOperationExpression": {
                        "operator": "*",
                        "operand": {
                          "identifier": "id"
                        }
                      }
                    },
                    "operator": "++"
                  }
                }
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "f"
                      },
                      {
                        "constant": "\"lock:\\t\""
                      }
                    ],
                    "callee": "seq_puts"
                  }
                }
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "f"
                      },
                      {
                        "identifier": "fl"
                      },
                      {
                        "unaryOperationExpression": {
                          "operator": "*",
                          "operand": {
                            "identifier": "id"
                          }
                        }
                      },
                      {
                        "constant": "\"\""
                      },
                      {
                        "constant": "0"
                      }
                    ],
                    "callee": "lock_get_status"
                  }
                }
              }
            ]
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "show_fd_locks",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "f"
          },
          {
            "parameterType": "struct file *",
            "parameter": "filp"
          },
          {
            "parameterType": "struct files_struct *",
            "parameter": "files"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "inode",
                "identifierType": "struct inode *",
                "initialValue": "locks_inode(filp)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ctx",
                "identifierType": "struct file_lock_context *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "id",
                "identifierType": "int",
                "initialValue": "0"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "ctx"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "i_flctx"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "smp_load_acquire"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "ctx"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_lock"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "f"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_flock"
                          }
                        }
                      }
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "id"
                      }
                    }
                  },
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "files"
                  }
                ],
                "callee": "__show_fd_locks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "f"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_posix"
                          }
                        }
                      }
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "id"
                      }
                    }
                  },
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "files"
                  }
                ],
                "callee": "__show_fd_locks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "f"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lease"
                          }
                        }
                      }
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "id"
                      }
                    }
                  },
                  {
                    "identifier": "filp"
                  },
                  {
                    "identifier": "files"
                  }
                ],
                "callee": "__show_fd_locks"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flc_lock"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "spin_unlock"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "iter",
          "identifierType": "struct locks_iterator *"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "locks_next",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "f"
          },
          {
            "parameterType": "void *",
            "parameter": "v"
          },
          {
            "parameterType": "loff_t *",
            "parameter": "pos"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "iter",
                "identifierType": "struct locks_iterator *",
                "initialValue": "f->private"
              }
            ]
          },
          {
            "expressionStatement": {
              "unaryExpression": {
                "operator": "++",
                "operand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "li_pos"
                    }
                  }
                }
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "v"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "memberAccess": {
                          "leftOperand": "file_lock_list",
                          "rightOperand": "hlist",
                          "operator": "."
                        }
                      }
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "li_cpu"
                          }
                        }
                      }
                    }
                  },
                  {
                    "identifier": "pos"
                  }
                ],
                "callee": "seq_hlist_next_percpu"
              }
            }
          }
        ],
        "returnType": "static void *"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "locks_seq_operations",
          "identifierType": "const struct seq_operations"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "proc_locks_init",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "constant": "\"locks\""
                  },
                  {
                    "constant": "0"
                  },
                  {
                    "identifier": "NULL"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "locks_seq_operations"
                      }
                    }
                  },
                  {
                    "sizeofExpression": {
                      "operator": "sizeof",
                      "operand": {}
                    }
                  },
                  {
                    "identifier": "NULL"
                  }
                ],
                "callee": "proc_create_seq_private"
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int __init"
      }
    },
    {
      "functionDef": {
        "functionName": "fs_initcall"
      }
    },
    {
      "functionDef": {
        "functionName": "filelock_init",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "i",
                "identifierType": "int"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "flctx_cache"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "constant": "\"file_lock_ctx\""
                      },
                      {
                        "sizeofExpression": {
                          "operator": "sizeof",
                          "operand": {}
                        }
                      },
                      {
                        "constant": "0"
                      },
                      {
                        "identifier": "SLAB_PANIC"
                      },
                      {
                        "identifier": "NULL"
                      }
                    ],
                    "callee": "kmem_cache_create"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "filelock_cache"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "constant": "\"file_lock_cache\""
                      },
                      {
                        "sizeofExpression": {
                          "operator": "sizeof",
                          "operand": {}
                        }
                      },
                      {
                        "constant": "0"
                      },
                      {
                        "identifier": "SLAB_PANIC"
                      },
                      {
                        "identifier": "NULL"
                      }
                    ],
                    "callee": "kmem_cache_create"
                  }
                },
                "operator": "="
              }
            }
          },
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "identifierDeclStatement": [
                  {
                    "identifier": "fll",
                    "identifierType": "struct file_lock_list_struct *",
                    "initialValue": "per_cpu_ptr(&file_lock_list, i)"
                  }
                ]
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "lock"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "spin_lock_init"
                  }
                }
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "&",
                          "operand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "hlist"
                              }
                            }
                          }
                        }
                      }
                    ],
                    "callee": "INIT_HLIST_HEAD"
                  }
                }
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [],
                "callee": "lease_notifier_chain_init"
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static int __init"
      }
    },
    {
      "functionDef": {
        "functionName": "core_initcall"
      }
    }
  ]
}

{
  "filename": "slob.c",
  "content": [
    {
      "classDefStatement": {
        "className": "kmem_cache",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "object_size",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "size",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "align",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "flags",
                  "identifierType": "slab_flags_t"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "useroffset",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "usersize",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "name",
                  "identifierType": "const char *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "refcount",
                  "identifierType": "int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "ctor",
                  "identifierType": "void ( * ) ( void * )"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "list",
                  "identifierType": "struct list_head"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "classDefStatement": {
        "className": "slab_state",
        "definition": {
          "compoundStatement": []
        }
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "slab_state",
          "identifierType": "enum slab_state"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "slab_mutex",
          "identifierType": "struct mutex"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "slab_caches",
          "identifierType": "struct list_head"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "kmem_cache",
          "identifierType": "struct kmem_cache *"
        }
      ]
    },
    {
      "classDefStatement": {
        "className": "kmalloc_info_struct",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "name",
                  "identifierType": "const char * [ NR_KMALLOC_TYPES ]"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "size",
                  "identifierType": "unsigned int"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "kmalloc_info[]",
          "identifierType": "kmalloc_info_struct"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "setup_kmalloc_cache_index_table",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "create_kmalloc_caches",
        "parameterList": [
          {
            "parameterType": "slab_flags_t",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "kmalloc_slab",
        "parameterList": [
          {
            "parameterType": "size_t",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "kmalloc_fix_flags",
        "parameterList": [
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [],
        "returnType": "gfp_t"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_create",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "create_kmalloc_cache",
        "parameterList": [
          {
            "parameterType": "const char *",
            "parameter": "name"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "size"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "useroffset"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "usersize"
          }
        ],
        "functionBody": [],
        "returnType": "struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "create_boot_cache",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "const char *",
            "parameter": "name"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "size"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "useroffset"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "usersize"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_unmergeable",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "find_mergeable",
        "parameterList": [
          {
            "parameterType": "unsigned",
            "parameter": "size"
          },
          {
            "parameterType": "unsigned",
            "parameter": "align"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "const char *",
            "parameter": "name"
          },
          {
            "parameterType": "(( void * ) void) *",
            "parameter": "ctor"
          }
        ],
        "functionBody": [],
        "returnType": "struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_alias",
        "parameterList": [
          {
            "parameterType": "const char *",
            "parameter": "name"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "size"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "align"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "(( void * ) void) *",
            "parameter": "ctor"
          }
        ],
        "functionBody": [],
        "returnType": "struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_flags",
        "parameterList": [
          {
            "parameterType": "unsigned int",
            "parameter": "object_size"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "const char *",
            "parameter": "name"
          }
        ],
        "functionBody": [],
        "returnType": "slab_flags_t"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_alias",
        "parameterList": [
          {
            "parameterType": "const char *",
            "parameter": "name"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "size"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "align"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "(( void * ) void) *",
            "parameter": "ctor"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "identifier": "NULL"
            }
          }
        ],
        "returnType": "static inline struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_flags",
        "parameterList": [
          {
            "parameterType": "unsigned int",
            "parameter": "object_size"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          },
          {
            "parameterType": "const char *",
            "parameter": "name"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "identifier": "flags"
            }
          }
        ],
        "returnType": "static inline slab_flags_t"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_empty",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "bool"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_shutdown",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_release",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_shrink",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_kmem_cache_release",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "classDefStatement": {
        "className": "slabinfo",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "active_objs",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "num_objs",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "active_slabs",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "num_slabs",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "shared_avail",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "limit",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "batchcount",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "shared",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "objects_per_slab",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "cache_order",
                  "identifierType": "unsigned int"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "functionDef": {
        "functionName": "get_slabinfo",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct slabinfo *",
            "parameter": "sinfo"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "slabinfo_show_stats",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "m"
          },
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "slabinfo_write",
        "parameterList": [
          {
            "parameterType": "struct file *",
            "parameter": "file"
          },
          {
            "parameterType": "const char __user *",
            "parameter": "buffer"
          },
          {
            "parameterType": "size_t",
            "parameter": "count"
          },
          {
            "parameterType": "loff_t *",
            "parameter": "ppos"
          }
        ],
        "functionBody": [],
        "returnType": "ssize_t"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_free_bulk",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "size_t",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "void * *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_alloc_bulk",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "size_t",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "void * *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "cache_vmstat_idx",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "conditionalExpression": {
                "condition": {
                  "BitAndExpression": {
                    "leftOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "flags"
                        }
                      }
                    },
                    "rightOperand": {
                      "identifier": "SLAB_RECLAIM_ACCOUNT"
                    },
                    "operator": "&"
                  }
                },
                "trueExpression": {
                  "identifier": "NR_SLAB_RECLAIMABLE_B"
                },
                "falseExpression": {
                  "identifier": "NR_SLAB_UNRECLAIMABLE_B"
                }
              }
            }
          }
        ],
        "returnType": "static inline enum node_stat_item"
      }
    },
    {
      "functionDef": {
        "functionName": "DECLARE_STATIC_KEY_TRUE"
      }
    },
    {
      "functionDef": {
        "functionName": "DECLARE_STATIC_KEY_FALSE"
      }
    },
    {
      "functionDef": {
        "functionName": "print_tracking",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "void *",
            "parameter": "object"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "validate_slab_cache",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [],
        "returnType": "long"
      }
    },
    {
      "functionDef": {
        "functionName": "__slub_debug_enabled",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "slub_debug_enabled"
                      }
                    }
                  }
                ],
                "callee": "static_branch_unlikely"
              }
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "print_tracking",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "void *",
            "parameter": "object"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "__slub_debug_enabled",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_debug_flags",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "BitAndExpression": {
                              "leftOperand": {
                                "identifier": "flags"
                              },
                              "rightOperand": {
                                "identifier": "SLAB_DEBUG_FLAGS"
                              },
                              "operator": "&"
                            }
                          }
                        }
                      }
                    ],
                    "callee": "VM_WARN_ON_ONCE"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "CONFIG_SLUB_DEBUG"
                    }
                  ],
                  "callee": "IS_ENABLED"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "BitAndExpression": {
                    "leftOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "flags"
                        }
                      }
                    },
                    "rightOperand": {
                      "identifier": "flags"
                    },
                    "operator": "&"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [],
                  "callee": "__slub_debug_enabled"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_alloc_page_obj_cgroups",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "page"
          },
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "bool",
            "parameter": "new_page"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "mod_objcg_state",
        "parameterList": [
          {
            "parameterType": "struct obj_cgroup *",
            "parameter": "objcg"
          },
          {
            "parameterType": "struct pglist_data *",
            "parameter": "pgdat"
          },
          {
            "parameterType": "enum node_stat_item",
            "parameter": "idx"
          },
          {
            "parameterType": "int",
            "parameter": "nr"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_free_page_obj_cgroups",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "page"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "page"
                        }
                      ],
                      "callee": "page_objcgs"
                    }
                  }
                ],
                "callee": "kfree"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "memcg_data"
                    }
                  }
                },
                "rightOperand": {
                  "constant": "0"
                },
                "operator": "="
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "obj_full_size",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "AdditiveExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "size"
                    }
                  }
                },
                "rightOperand": {
                  "sizeofExpression": {
                    "operator": "sizeof",
                    "operand": {}
                  }
                },
                "operator": "+"
              }
            }
          }
        ],
        "returnType": "static inline size_t"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_pre_alloc_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct obj_cgroup * *",
            "parameter": "objcgp"
          },
          {
            "parameterType": "size_t",
            "parameter": "objects"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "objcg",
                "identifierType": "struct obj_cgroup *"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "true"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [],
                      "callee": "memcg_kmem_enabled"
                    }
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "true"
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "identifier": "flags"
                          },
                          "rightOperand": {
                            "identifier": "__GFP_ACCOUNT"
                          },
                          "operator": "&"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "flags"
                              }
                            }
                          },
                          "rightOperand": {
                            "identifier": "SLAB_ACCOUNT"
                          },
                          "operator": "&"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "objcg"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [],
                    "callee": "get_obj_cgroup_from_current"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "true"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "objcg"
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "objcg"
                          }
                        ],
                        "callee": "obj_cgroup_put"
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "identifier": "false"
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "objcg"
                    },
                    {
                      "identifier": "flags"
                    },
                    {
                      "MultiplicativeExpression": {
                        "leftOperand": {
                          "identifier": "objects"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "s"
                              }
                            ],
                            "callee": "obj_full_size"
                          }
                        },
                        "operator": "*"
                      }
                    }
                  ],
                  "callee": "obj_cgroup_charge"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryOperationExpression": {
                    "operator": "*",
                    "operand": {
                      "identifier": "objcgp"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "objcg"
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "true"
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_post_alloc_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct obj_cgroup *",
            "parameter": "objcg"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          },
          {
            "parameterType": "size_t",
            "parameter": "size"
          },
          {
            "parameterType": "void * *",
            "parameter": "p"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "page",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "off",
                "identifierType": "unsigned long"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "i",
                "identifierType": "size_t"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "OrExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [],
                          "callee": "memcg_kmem_enabled"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "objcg"
                      }
                    }
                  },
                  "operator": "||"
                }
              }
            }
          },
          {
            "forStatement": {
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "i"
                  },
                  "rightOperand": {
                    "identifier": "size"
                  },
                  "operator": "<"
                }
              },
              "forInit": {
                "AssignmentExpression": {
                  "leftOperand": {
                    "identifier": "i"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "="
                }
              },
              "forBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "page"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "arrayIndexing": {
                                          "array": "p",
                                          "index": {
                                            "identifier": "i"
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "virt_to_head_page"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "ifStatement": {
                              "ifBlock": {
                                "compoundStatement": [
                                  {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "objcg"
                                          },
                                          {
                                            "callExpression": {
                                              "argumentList": [
                                                {
                                                  "identifier": "s"
                                                }
                                              ],
                                              "callee": "obj_full_size"
                                            }
                                          }
                                        ],
                                        "callee": "obj_cgroup_uncharge"
                                      }
                                    }
                                  },
                                  {
                                    "continueStatement": "continue"
                                  }
                                ]
                              },
                              "condition": {
                                "AndExpression": {
                                  "leftOperand": {
                                    "unaryOperationExpression": {
                                      "operator": "!",
                                      "operand": {
                                        "callExpression": {
                                          "argumentList": [
                                            {
                                              "identifier": "page"
                                            }
                                          ],
                                          "callee": "page_objcgs"
                                        }
                                      }
                                    }
                                  },
                                  "rightOperand": {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "page"
                                        },
                                        {
                                          "identifier": "s"
                                        },
                                        {
                                          "identifier": "flags"
                                        },
                                        {
                                          "identifier": "false"
                                        }
                                      ],
                                      "callee": "memcg_alloc_page_obj_cgroups"
                                    }
                                  },
                                  "operator": "&&"
                                }
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "off"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "s"
                                      },
                                      {
                                        "identifier": "page"
                                      },
                                      {
                                        "arrayIndexing": {
                                          "array": "p",
                                          "index": {
                                            "identifier": "i"
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "obj_to_index"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "objcg"
                                  }
                                ],
                                "callee": "obj_cgroup_get"
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "arrayIndexing": {
                                    "array": "page_objcgs(page)",
                                    "index": {
                                      "identifier": "off"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "identifier": "objcg"
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "objcg"
                                  },
                                  {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "page"
                                        }
                                      ],
                                      "callee": "page_pgdat"
                                    }
                                  },
                                  {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "s"
                                        }
                                      ],
                                      "callee": "cache_vmstat_idx"
                                    }
                                  },
                                  {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "s"
                                        }
                                      ],
                                      "callee": "obj_full_size"
                                    }
                                  }
                                ],
                                "callee": "mod_objcg_state"
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "arrayIndexing": {
                                "array": "p",
                                "index": {
                                  "identifier": "i"
                                }
                              }
                            }
                          ],
                          "callee": "likely"
                        }
                      },
                      "elseBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "objcg"
                                  },
                                  {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "s"
                                        }
                                      ],
                                      "callee": "obj_full_size"
                                    }
                                  }
                                ],
                                "callee": "obj_cgroup_uncharge"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "forLoop": {
                "postIncDecOperationExpression": {
                  "operand": {
                    "identifier": "i"
                  },
                  "operator": "++"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "objcg"
                  }
                ],
                "callee": "obj_cgroup_put"
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_free_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s_orig"
          },
          {
            "parameterType": "void * *",
            "parameter": "p"
          },
          {
            "parameterType": "int",
            "parameter": "objects"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "s",
                "identifierType": "struct kmem_cache *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "objcgs",
                "identifierType": "struct obj_cgroup * *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "objcg",
                "identifierType": "struct obj_cgroup *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "page",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "off",
                "identifierType": "unsigned int"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "i",
                "identifierType": "int"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [],
                      "callee": "memcg_kmem_enabled"
                    }
                  }
                }
              }
            }
          },
          {
            "forStatement": {
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "i"
                  },
                  "rightOperand": {
                    "identifier": "objects"
                  },
                  "operator": "<"
                }
              },
              "forInit": {
                "AssignmentExpression": {
                  "leftOperand": {
                    "identifier": "i"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "="
                }
              },
              "forBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "continueStatement": "continue"
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "unaryOperationExpression": {
                                "operator": "!",
                                "operand": {
                                  "arrayIndexing": {
                                    "array": "p",
                                    "index": {
                                      "identifier": "i"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "callee": "unlikely"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "page"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "arrayIndexing": {
                                  "array": "p",
                                  "index": {
                                    "identifier": "i"
                                  }
                                }
                              }
                            ],
                            "callee": "virt_to_head_page"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "objcgs"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "page"
                              }
                            ],
                            "callee": "page_objcgs_check"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "continueStatement": "continue"
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "objcgs"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "s"
                            },
                            "rightOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "slab_cache"
                                }
                              }
                            },
                            "operator": "="
                          }
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "s_orig"
                          }
                        }
                      },
                      "elseBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "s"
                            },
                            "rightOperand": {
                              "identifier": "s_orig"
                            },
                            "operator": "="
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "off"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "s"
                              },
                              {
                                "identifier": "page"
                              },
                              {
                                "arrayIndexing": {
                                  "array": "p",
                                  "index": {
                                    "identifier": "i"
                                  }
                                }
                              }
                            ],
                            "callee": "obj_to_index"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "objcg"
                        },
                        "rightOperand": {
                          "arrayIndexing": {
                            "array": "objcgs",
                            "index": {
                              "identifier": "off"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "continueStatement": "continue"
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "objcg"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "arrayIndexing": {
                            "array": "objcgs",
                            "index": {
                              "identifier": "off"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "NULL"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "objcg"
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "s"
                                }
                              ],
                              "callee": "obj_full_size"
                            }
                          }
                        ],
                        "callee": "obj_cgroup_uncharge"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "objcg"
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "page"
                                }
                              ],
                              "callee": "page_pgdat"
                            }
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "s"
                                }
                              ],
                              "callee": "cache_vmstat_idx"
                            }
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "-",
                              "operand": {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "s"
                                    }
                                  ],
                                  "callee": "obj_full_size"
                                }
                              }
                            }
                          }
                        ],
                        "callee": "mod_objcg_state"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "objcg"
                          }
                        ],
                        "callee": "obj_cgroup_put"
                      }
                    }
                  }
                ]
              },
              "forLoop": {
                "postIncDecOperationExpression": {
                  "operand": {
                    "identifier": "i"
                  },
                  "operator": "++"
                }
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_from_slab_obj",
        "parameterList": [
          {
            "parameterType": "void *",
            "parameter": "ptr"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "identifier": "NULL"
            }
          }
        ],
        "returnType": "static inline struct mem_cgroup *"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_alloc_page_obj_cgroups",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "page"
          },
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "bool",
            "parameter": "new_page"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static inline int"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_free_page_obj_cgroups",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "page"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_pre_alloc_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct obj_cgroup * *",
            "parameter": "objcgp"
          },
          {
            "parameterType": "size_t",
            "parameter": "objects"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "identifier": "true"
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_post_alloc_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct obj_cgroup *",
            "parameter": "objcg"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          },
          {
            "parameterType": "size_t",
            "parameter": "size"
          },
          {
            "parameterType": "void * *",
            "parameter": "p"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_free_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "void * *",
            "parameter": "p"
          },
          {
            "parameterType": "int",
            "parameter": "objects"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "virt_to_cache",
        "parameterList": [
          {
            "parameterType": "const void *",
            "parameter": "obj"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "page",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "page"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "obj"
                      }
                    ],
                    "callee": "virt_to_head_page"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "NULL"
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "!",
                        "operand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "page"
                              }
                            ],
                            "callee": "PageSlab"
                          }
                        }
                      }
                    },
                    {
                      "constant": "\"%s: Object is not a Slab page!\\n\""
                    },
                    {
                      "identifier": "__func__"
                    }
                  ],
                  "callee": "WARN_ONCE"
                }
              }
            }
          },
          {
            "returnStatement": {
              "unaryExpression": {
                "operand": {
                  "identifier": "slab_cache"
                }
              }
            }
          }
        ],
        "returnType": "static inline struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "account_slab_page",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "page"
          },
          {
            "parameterType": "int",
            "parameter": "order"
          },
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "page"
                      },
                      {
                        "identifier": "s"
                      },
                      {
                        "identifier": "gfp"
                      },
                      {
                        "identifier": "true"
                      }
                    ],
                    "callee": "memcg_alloc_page_obj_cgroups"
                  }
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "callExpression": {
                      "argumentList": [],
                      "callee": "memcg_kmem_enabled"
                    }
                  },
                  "rightOperand": {
                    "BitAndExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "flags"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "SLAB_ACCOUNT"
                      },
                      "operator": "&"
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "page"
                        }
                      ],
                      "callee": "page_pgdat"
                    }
                  },
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "s"
                        }
                      ],
                      "callee": "cache_vmstat_idx"
                    }
                  },
                  {
                    "ShiftExpression": {
                      "leftOperand": {
                        "identifier": "PAGE_SIZE"
                      },
                      "rightOperand": {
                        "identifier": "order"
                      },
                      "operator": "<<"
                    }
                  }
                ],
                "callee": "mod_node_page_state"
              }
            }
          }
        ],
        "returnType": "static __always_inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "unaccount_slab_page",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "page"
          },
          {
            "parameterType": "int",
            "parameter": "order"
          },
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "page"
                      }
                    ],
                    "callee": "memcg_free_page_obj_cgroups"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [],
                  "callee": "memcg_kmem_enabled"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "page"
                        }
                      ],
                      "callee": "page_pgdat"
                    }
                  },
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "s"
                        }
                      ],
                      "callee": "cache_vmstat_idx"
                    }
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "-",
                      "operand": {
                        "ShiftExpression": {
                          "leftOperand": {
                            "identifier": "PAGE_SIZE"
                          },
                          "rightOperand": {
                            "identifier": "order"
                          },
                          "operator": "<<"
                        }
                      }
                    }
                  }
                ],
                "callee": "mod_node_page_state"
              }
            }
          }
        ],
        "returnType": "static __always_inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "cache_from_obj",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "void *",
            "parameter": "x"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "cachep",
                "identifierType": "struct kmem_cache *"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "s"
                }
              },
              "condition": {
                "AndExpression": {
                  "leftOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "CONFIG_SLAB_FREELIST_HARDENED"
                            }
                          ],
                          "callee": "IS_ENABLED"
                        }
                      }
                    }
                  },
                  "rightOperand": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "s"
                            },
                            {
                              "identifier": "SLAB_CONSISTENCY_CHECKS"
                            }
                          ],
                          "callee": "kmem_cache_debug_flags"
                        }
                      }
                    }
                  },
                  "operator": "&&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "cachep"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "x"
                      }
                    ],
                    "callee": "virt_to_cache"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "cachep"
                      },
                      {
                        "identifier": "x"
                      }
                    ],
                    "callee": "print_tracking"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "AndExpression": {
                        "leftOperand": {
                          "identifier": "cachep"
                        },
                        "rightOperand": {
                          "EqualityExpression": {
                            "leftOperand": {
                              "identifier": "cachep"
                            },
                            "rightOperand": {
                              "identifier": "s"
                            },
                            "operator": "!="
                          }
                        },
                        "operator": "&&"
                      }
                    },
                    {
                      "constant": "\"%s: Wrong slab cache. %s but object is from %s\\n\""
                    },
                    {
                      "identifier": "__func__"
                    },
                    {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "name"
                        }
                      }
                    },
                    {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "name"
                        }
                      }
                    }
                  ],
                  "callee": "WARN"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "cachep"
            }
          }
        ],
        "returnType": "static inline struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_ksize",
        "parameterList": [
          {
            "parameterType": "const struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "unaryExpression": {
                "operand": {
                  "identifier": "object_size"
                }
              }
            }
          }
        ],
        "returnType": "static inline size_t"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_pre_alloc_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct obj_cgroup * *",
            "parameter": "objcgp"
          },
          {
            "parameterType": "size_t",
            "parameter": "size"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "flags"
                },
                "rightOperand": {
                  "identifier": "gfp_allowed_mask"
                },
                "operator": "&="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "flags"
                  }
                ],
                "callee": "might_alloc"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "NULL"
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "s"
                    },
                    {
                      "identifier": "flags"
                    }
                  ],
                  "callee": "should_failslab"
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "NULL"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "s"
                        },
                        {
                          "identifier": "objcgp"
                        },
                        {
                          "identifier": "size"
                        },
                        {
                          "identifier": "flags"
                        }
                      ],
                      "callee": "memcg_slab_pre_alloc_hook"
                    }
                  }
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "s"
            }
          }
        ],
        "returnType": "static inline struct kmem_cache *"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_post_alloc_hook",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "struct obj_cgroup *",
            "parameter": "objcg"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          },
          {
            "parameterType": "size_t",
            "parameter": "size"
          },
          {
            "parameterType": "void * *",
            "parameter": "p"
          },
          {
            "parameterType": "bool",
            "parameter": "init"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "i",
                "identifierType": "size_t"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "flags"
                },
                "rightOperand": {
                  "identifier": "gfp_allowed_mask"
                },
                "operator": "&="
              }
            }
          },
          {
            "forStatement": {
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "i"
                  },
                  "rightOperand": {
                    "identifier": "size"
                  },
                  "operator": "<"
                }
              },
              "forInit": {
                "AssignmentExpression": {
                  "leftOperand": {
                    "identifier": "i"
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "="
                }
              },
              "forBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "arrayIndexing": {
                            "array": "p",
                            "index": {
                              "identifier": "i"
                            }
                          }
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "s"
                              },
                              {
                                "arrayIndexing": {
                                  "array": "p",
                                  "index": {
                                    "identifier": "i"
                                  }
                                }
                              },
                              {
                                "identifier": "flags"
                              },
                              {
                                "identifier": "init"
                              }
                            ],
                            "callee": "kasan_slab_alloc"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "arrayIndexing": {
                                  "array": "p",
                                  "index": {
                                    "identifier": "i"
                                  }
                                }
                              },
                              {
                                "constant": "0"
                              },
                              {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "object_size"
                                  }
                                }
                              }
                            ],
                            "callee": "memset"
                          }
                        }
                      },
                      "condition": {
                        "AndExpression": {
                          "leftOperand": {
                            "arrayIndexing": {
                              "array": "p",
                              "index": {
                                "identifier": "i"
                              }
                            }
                          },
                          "rightOperand": {
                            "AndExpression": {
                              "leftOperand": {
                                "identifier": "init"
                              },
                              "rightOperand": {
                                "unaryOperationExpression": {
                                  "operator": "!",
                                  "operand": {
                                    "callExpression": {
                                      "argumentList": [],
                                      "callee": "kasan_has_integrated_init"
                                    }
                                  }
                                }
                              },
                              "operator": "&&"
                            }
                          },
                          "operator": "&&"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "arrayIndexing": {
                              "array": "p",
                              "index": {
                                "identifier": "i"
                              }
                            }
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "object_size"
                              }
                            }
                          },
                          {
                            "constant": "1"
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "flags"
                              }
                            }
                          },
                          {
                            "identifier": "flags"
                          }
                        ],
                        "callee": "kmemleak_alloc_recursive"
                      }
                    }
                  }
                ]
              },
              "forLoop": {
                "postIncDecOperationExpression": {
                  "operand": {
                    "identifier": "i"
                  },
                  "operator": "++"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "s"
                  },
                  {
                    "identifier": "objcg"
                  },
                  {
                    "identifier": "flags"
                  },
                  {
                    "identifier": "size"
                  },
                  {
                    "identifier": "p"
                  }
                ],
                "callee": "memcg_slab_post_alloc_hook"
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "classDefStatement": {
        "className": "kmem_cache_node",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "list_lock",
                  "identifierType": "spinlock_t"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "slabs_partial",
                  "identifierType": "struct list_head"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "slabs_full",
                  "identifierType": "struct list_head"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "slabs_free",
                  "identifierType": "struct list_head"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "total_slabs",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "free_slabs",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "free_objects",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "free_limit",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "colour_next",
                  "identifierType": "unsigned int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "shared",
                  "identifierType": "struct array_cache *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "alien",
                  "identifierType": "struct alien_cache * *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "next_reap",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "free_touched",
                  "identifierType": "int"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "nr_partial",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "partial",
                  "identifierType": "struct list_head"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "nr_slabs",
                  "identifierType": "atomic_long_t"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "total_objects",
                  "identifierType": "atomic_long_t"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "full",
                  "identifierType": "struct list_head"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "functionDef": {
        "functionName": "get_node",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "unaryExpression": {
                "operand": {
                  "arrayIndexing": {
                    "array": "node",
                    "index": {
                      "identifier": "node"
                    }
                  }
                }
              }
            }
          }
        ],
        "returnType": "static inline struct kmem_cache_node *"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_start",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "m"
          },
          {
            "parameterType": "loff_t *",
            "parameter": "pos"
          }
        ],
        "functionBody": [],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_next",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "m"
          },
          {
            "parameterType": "void *",
            "parameter": "p"
          },
          {
            "parameterType": "loff_t *",
            "parameter": "pos"
          }
        ],
        "functionBody": [],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_stop",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "m"
          },
          {
            "parameterType": "void *",
            "parameter": "p"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "memcg_slab_show",
        "parameterList": [
          {
            "parameterType": "struct seq_file *",
            "parameter": "m"
          },
          {
            "parameterType": "void *",
            "parameter": "p"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "dump_unreclaimable_slab",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "dump_unreclaimable_slab",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "___cache_free",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cache"
          },
          {
            "parameterType": "void *",
            "parameter": "x"
          },
          {
            "parameterType": "unsigned long",
            "parameter": "addr"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "cache_random_seq_create",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cachep"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "count"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          }
        ],
        "functionBody": [],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "cache_random_seq_destroy",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cachep"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "cache_random_seq_create",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cachep"
          },
          {
            "parameterType": "unsigned int",
            "parameter": "count"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "static inline int"
      }
    },
    {
      "functionDef": {
        "functionName": "cache_random_seq_destroy",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cachep"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_want_init_on_alloc",
        "parameterList": [
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          },
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "identifier": "false"
                        }
                      },
                      "condition": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "ctor"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "BitAndExpression": {
                            "leftOperand": {
                              "identifier": "flags"
                            },
                            "rightOperand": {
                              "identifier": "__GFP_ZERO"
                            },
                            "operator": "&"
                          }
                        }
                      },
                      "condition": {
                        "BitAndExpression": {
                          "leftOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "flags"
                              }
                            }
                          },
                          "rightOperand": {
                            "InclusiveOrExpression": {
                              "leftOperand": {
                                "identifier": "SLAB_TYPESAFE_BY_RCU"
                              },
                              "rightOperand": {
                                "identifier": "SLAB_POISON"
                              },
                              "operator": "|"
                            }
                          },
                          "operator": "&"
                        }
                      }
                    }
                  },
                  {
                    "returnStatement": {
                      "identifier": "true"
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "CONFIG_INIT_ON_ALLOC_DEFAULT_ON"
                    },
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "identifier": "init_on_alloc"
                        }
                      }
                    }
                  ],
                  "callee": "static_branch_maybe"
                }
              }
            }
          },
          {
            "returnStatement": {
              "BitAndExpression": {
                "leftOperand": {
                  "identifier": "flags"
                },
                "rightOperand": {
                  "identifier": "__GFP_ZERO"
                },
                "operator": "&"
              }
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "slab_want_init_on_free",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryOperationExpression": {
                    "operator": "!",
                    "operand": {
                      "OrExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "ctor"
                            }
                          }
                        },
                        "rightOperand": {
                          "BitAndExpression": {
                            "leftOperand": {
                              "unaryExpression": {
                                "operand": {
                                  "identifier": "flags"
                                }
                              }
                            },
                            "rightOperand": {
                              "InclusiveOrExpression": {
                                "leftOperand": {
                                  "identifier": "SLAB_TYPESAFE_BY_RCU"
                                },
                                "rightOperand": {
                                  "identifier": "SLAB_POISON"
                                },
                                "operator": "|"
                              }
                            },
                            "operator": "&"
                          }
                        },
                        "operator": "||"
                      }
                    }
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "CONFIG_INIT_ON_FREE_DEFAULT_ON"
                    },
                    {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "identifier": "init_on_free"
                        }
                      }
                    }
                  ],
                  "callee": "static_branch_maybe"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "false"
            }
          }
        ],
        "returnType": "static inline bool"
      }
    },
    {
      "functionDef": {
        "functionName": "debugfs_slab_release",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "debugfs_slab_release",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "s"
          }
        ],
        "functionBody": [],
        "returnType": "static inline void"
      }
    },
    {
      "classDefStatement": {
        "className": "kmem_obj_info",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_ptr",
                  "identifierType": "void *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_page",
                  "identifierType": "struct page *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_objp",
                  "identifierType": "void *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_data_offset",
                  "identifierType": "unsigned long"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_slab_cache",
                  "identifierType": "struct kmem_cache *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_ret",
                  "identifierType": "void *"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_stack",
                  "identifierType": "void * [ KS_ADDRS_COUNT ]"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "kp_free_stack",
                  "identifierType": "void * [ 16 ]"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_obj_info",
        "parameterList": [
          {
            "parameterType": "struct kmem_obj_info *",
            "parameter": "kpp"
          },
          {
            "parameterType": "void *",
            "parameter": "object"
          },
          {
            "parameterType": "struct page *",
            "parameter": "page"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "slobidx_t",
          "identifierType": "s16"
        }
      ]
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "slobidx_t",
          "identifierType": "s32"
        }
      ]
    },
    {
      "classDefStatement": {
        "className": "slob_block",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "units",
                  "identifierType": "slobidx_t"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "slob_t",
          "identifierType": "struct slob_block"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "LIST_HEAD"
      }
    },
    {
      "functionDef": {
        "functionName": "LIST_HEAD"
      }
    },
    {
      "functionDef": {
        "functionName": "LIST_HEAD"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_page_free",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "sp"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "sp"
                  }
                ],
                "callee": "PageSlobFree"
              }
            }
          }
        ],
        "returnType": "static inline int"
      }
    },
    {
      "functionDef": {
        "functionName": "set_slob_page_free",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "sp"
          },
          {
            "parameterType": "struct list_head *",
            "parameter": "list"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "slab_list"
                          }
                        }
                      }
                    }
                  },
                  {
                    "identifier": "list"
                  }
                ],
                "callee": "list_add"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "sp"
                  }
                ],
                "callee": "__SetPageSlobFree"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "clear_slob_page_free",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "sp"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "slab_list"
                          }
                        }
                      }
                    }
                  }
                ],
                "callee": "list_del"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "sp"
                  }
                ],
                "callee": "__ClearPageSlobFree"
              }
            }
          }
        ],
        "returnType": "static inline void"
      }
    },
    {
      "classDefStatement": {
        "className": "slob_rcu",
        "definition": {
          "compoundStatement": [
            {
              "identifierDeclStatement": [
                {
                  "identifier": "head",
                  "identifierType": "struct rcu_head"
                }
              ]
            },
            {
              "identifierDeclStatement": [
                {
                  "identifier": "size",
                  "identifierType": "int"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "functionDef": {
        "functionName": "DEFINE_SPINLOCK"
      }
    },
    {
      "functionDef": {
        "functionName": "set_slob",
        "parameterList": [
          {
            "parameterType": "slob_t *",
            "parameter": "s"
          },
          {
            "parameterType": "slobidx_t",
            "parameter": "size"
          },
          {
            "parameterType": "slob_t *",
            "parameter": "next"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "base",
                "identifierType": "slob_t *",
                "initialValue": "(slob_t *)((unsigned long)s & PAGE_MASK)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "offset",
                "identifierType": "slobidx_t",
                "initialValue": "next - base"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "memberAccess": {
                            "leftOperand": "s[0]",
                            "rightOperand": "units",
                            "operator": "."
                          }
                        },
                        "rightOperand": {
                          "identifier": "size"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "memberAccess": {
                            "leftOperand": "s[1]",
                            "rightOperand": "units",
                            "operator": "."
                          }
                        },
                        "rightOperand": {
                          "identifier": "offset"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "size"
                  },
                  "rightOperand": {
                    "constant": "1"
                  },
                  "operator": ">"
                }
              },
              "elseBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "memberAccess": {
                        "leftOperand": "s[0]",
                        "rightOperand": "units",
                        "operator": "."
                      }
                    },
                    "rightOperand": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "identifier": "offset"
                        }
                      }
                    },
                    "operator": "="
                  }
                }
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_units",
        "parameterList": [
          {
            "parameterType": "slob_t *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "units"
                    }
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "units"
                      }
                    }
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": ">"
                }
              }
            }
          },
          {
            "returnStatement": {
              "constant": "1"
            }
          }
        ],
        "returnType": "static slobidx_t"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_next",
        "parameterList": [
          {
            "parameterType": "slob_t *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "base",
                "identifierType": "slob_t *",
                "initialValue": "(slob_t *)((unsigned long)s & PAGE_MASK)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "next",
                "identifierType": "slobidx_t"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "next"
                    },
                    "rightOperand": {
                      "unaryOperationExpression": {
                        "operator": "-",
                        "operand": {
                          "memberAccess": {
                            "leftOperand": "s[0]",
                            "rightOperand": "units",
                            "operator": "."
                          }
                        }
                      }
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "memberAccess": {
                      "leftOperand": "s[0]",
                      "rightOperand": "units",
                      "operator": "."
                    }
                  },
                  "rightOperand": {
                    "constant": "0"
                  },
                  "operator": "<"
                }
              },
              "elseBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "next"
                    },
                    "rightOperand": {
                      "memberAccess": {
                        "leftOperand": "s[1]",
                        "rightOperand": "units",
                        "operator": "."
                      }
                    },
                    "operator": "="
                  }
                }
              }
            }
          },
          {
            "returnStatement": {
              "AdditiveExpression": {
                "leftOperand": {
                  "identifier": "base"
                },
                "rightOperand": {
                  "identifier": "next"
                },
                "operator": "+"
              }
            }
          }
        ],
        "returnType": "static slob_t *"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_last",
        "parameterList": [
          {
            "parameterType": "slob_t *",
            "parameter": "s"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "unaryOperationExpression": {
                "operator": "!",
                "operand": {
                  "BitAndExpression": {
                    "leftOperand": {
                      "castExpression": {
                        "originalExpression": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "s"
                              }
                            ],
                            "callee": "slob_next"
                          }
                        },
                        "target": "unsigned long"
                      }
                    },
                    "rightOperand": {
                      "identifier": "~PAGE_MASK"
                    },
                    "operator": "&"
                  }
                }
              }
            }
          }
        ],
        "returnType": "static int"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_new_pages",
        "parameterList": [
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "int",
            "parameter": "order"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "page",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "page"
                    },
                    "rightOperand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "node"
                          },
                          {
                            "identifier": "gfp"
                          },
                          {
                            "identifier": "order"
                          }
                        ],
                        "callee": "__alloc_pages_node"
                      }
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "identifier": "node"
                  },
                  "rightOperand": {
                    "identifier": "NUMA_NO_NODE"
                  },
                  "operator": "!="
                }
              },
              "elseBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "page"
                    },
                    "rightOperand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "gfp"
                          },
                          {
                            "identifier": "order"
                          }
                        ],
                        "callee": "alloc_pages"
                      }
                    },
                    "operator": "="
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "identifier": "NULL"
                }
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "page"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "page"
                        }
                      ],
                      "callee": "page_pgdat"
                    }
                  },
                  {
                    "identifier": "NR_SLAB_UNRECLAIMABLE_B"
                  },
                  {
                    "ShiftExpression": {
                      "leftOperand": {
                        "identifier": "PAGE_SIZE"
                      },
                      "rightOperand": {
                        "identifier": "order"
                      },
                      "operator": "<<"
                    }
                  }
                ],
                "callee": "mod_node_page_state"
              }
            }
          },
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "page"
                  }
                ],
                "callee": "page_address"
              }
            }
          }
        ],
        "returnType": "static void *"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_free_pages",
        "parameterList": [
          {
            "parameterType": "void *",
            "parameter": "b"
          },
          {
            "parameterType": "int",
            "parameter": "order"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "sp",
                "identifierType": "struct page *",
                "initialValue": "virt_to_page(b)"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "unaryExpression": {
                        "operand": {
                          "identifier": "reclaimed_slab"
                        }
                      }
                    },
                    "rightOperand": {
                      "ShiftExpression": {
                        "leftOperand": {
                          "constant": "1"
                        },
                        "rightOperand": {
                          "identifier": "order"
                        },
                        "operator": "<<"
                      }
                    },
                    "operator": "+="
                  }
                }
              },
              "condition": {
                "unaryExpression": {
                  "operand": {
                    "identifier": "reclaim_state"
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "sp"
                        }
                      ],
                      "callee": "page_pgdat"
                    }
                  },
                  {
                    "identifier": "NR_SLAB_UNRECLAIMABLE_B"
                  },
                  {
                    "unaryOperationExpression": {
                      "operator": "-",
                      "operand": {
                        "ShiftExpression": {
                          "leftOperand": {
                            "identifier": "PAGE_SIZE"
                          },
                          "rightOperand": {
                            "identifier": "order"
                          },
                          "operator": "<<"
                        }
                      }
                    }
                  }
                ],
                "callee": "mod_node_page_state"
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "sp"
                  },
                  {
                    "identifier": "order"
                  }
                ],
                "callee": "__free_pages"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_page_alloc",
        "parameterList": [
          {
            "parameterType": "struct page *",
            "parameter": "sp"
          },
          {
            "parameterType": "size_t",
            "parameter": "size"
          },
          {
            "parameterType": "int",
            "parameter": "align"
          },
          {
            "parameterType": "int",
            "parameter": "align_offset"
          },
          {
            "parameterType": "bool *",
            "parameter": "page_removed_from_list"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "prev",
                "identifierType": "slob_t *"
              },
              {
                "identifier": "cur",
                "identifierType": "slob_t *"
              },
              {
                "identifier": "aligned",
                "identifierType": "slob_t *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "delta",
                "identifierType": "int",
                "initialValue": "0"
              },
              {
                "identifier": "units",
                "identifierType": "int",
                "initialValue": "DIV_ROUND_UP(size, sizeof(slob_t))"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryOperationExpression": {
                    "operator": "*",
                    "operand": {
                      "identifier": "page_removed_from_list"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "false"
                },
                "operator": "="
              }
            }
          },
          {
            "forStatement": {
              "condition": {},
              "forInit": {},
              "forBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "avail",
                        "identifierType": "slobidx_t",
                        "initialValue": "slob_units(cur)"
                      }
                    ]
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "aligned"
                                },
                                "rightOperand": {
                                  "castExpression": {
                                    "originalExpression": {
                                      "AdditiveExpression": {
                                        "leftOperand": {
                                          "callExpression": {
                                            "argumentList": [
                                              {
                                                "AdditiveExpression": {
                                                  "leftOperand": {
                                                    "castExpression": {
                                                      "originalExpression": {
                                                        "identifier": "cur"
                                                      },
                                                      "target": "unsigned long"
                                                    }
                                                  },
                                                  "rightOperand": {
                                                    "identifier": "align_offset"
                                                  },
                                                  "operator": "+"
                                                }
                                              },
                                              {
                                                "identifier": "align"
                                              }
                                            ],
                                            "callee": "ALIGN"
                                          }
                                        },
                                        "rightOperand": {
                                          "identifier": "align_offset"
                                        },
                                        "operator": "-"
                                      }
                                    },
                                    "target": "slob_t *"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "delta"
                                },
                                "rightOperand": {
                                  "AdditiveExpression": {
                                    "leftOperand": {
                                      "identifier": "aligned"
                                    },
                                    "rightOperand": {
                                      "identifier": "cur"
                                    },
                                    "operator": "-"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "identifier": "align"
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "identifierDeclStatement": [
                              {
                                "identifier": "next",
                                "identifierType": "slob_t *"
                              }
                            ]
                          },
                          {
                            "ifStatement": {
                              "ifBlock": {
                                "compoundStatement": [
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "identifier": "next"
                                        },
                                        "rightOperand": {
                                          "callExpression": {
                                            "argumentList": [
                                              {
                                                "identifier": "cur"
                                              }
                                            ],
                                            "callee": "slob_next"
                                          }
                                        },
                                        "operator": "="
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "aligned"
                                          },
                                          {
                                            "AdditiveExpression": {
                                              "leftOperand": {
                                                "identifier": "avail"
                                              },
                                              "rightOperand": {
                                                "identifier": "delta"
                                              },
                                              "operator": "-"
                                            }
                                          },
                                          {
                                            "identifier": "next"
                                          }
                                        ],
                                        "callee": "set_slob"
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "cur"
                                          },
                                          {
                                            "identifier": "delta"
                                          },
                                          {
                                            "identifier": "aligned"
                                          }
                                        ],
                                        "callee": "set_slob"
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "identifier": "prev"
                                        },
                                        "rightOperand": {
                                          "identifier": "cur"
                                        },
                                        "operator": "="
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "identifier": "cur"
                                        },
                                        "rightOperand": {
                                          "identifier": "aligned"
                                        },
                                        "operator": "="
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "identifier": "avail"
                                        },
                                        "rightOperand": {
                                          "callExpression": {
                                            "argumentList": [
                                              {
                                                "identifier": "cur"
                                              }
                                            ],
                                            "callee": "slob_units"
                                          }
                                        },
                                        "operator": "="
                                      }
                                    }
                                  }
                                ]
                              },
                              "condition": {
                                "identifier": "delta"
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "next"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "cur"
                                      }
                                    ],
                                    "callee": "slob_next"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "ifStatement": {
                              "ifBlock": {
                                "compoundStatement": [
                                  {
                                    "ifStatement": {
                                      "ifBlock": {
                                        "expressionStatement": {
                                          "callExpression": {
                                            "argumentList": [
                                              {
                                                "identifier": "prev"
                                              },
                                              {
                                                "callExpression": {
                                                  "argumentList": [
                                                    {
                                                      "identifier": "prev"
                                                    }
                                                  ],
                                                  "callee": "slob_units"
                                                }
                                              },
                                              {
                                                "identifier": "next"
                                              }
                                            ],
                                            "callee": "set_slob"
                                          }
                                        }
                                      },
                                      "condition": {
                                        "identifier": "prev"
                                      },
                                      "elseBlock": {
                                        "expressionStatement": {
                                          "AssignmentExpression": {
                                            "leftOperand": {
                                              "unaryExpression": {
                                                "operand": {
                                                  "identifier": "freelist"
                                                }
                                              }
                                            },
                                            "rightOperand": {
                                              "identifier": "next"
                                            },
                                            "operator": "="
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              },
                              "condition": {
                                "EqualityExpression": {
                                  "leftOperand": {
                                    "identifier": "avail"
                                  },
                                  "rightOperand": {
                                    "identifier": "units"
                                  },
                                  "operator": "=="
                                }
                              },
                              "elseBlock": {
                                "compoundStatement": [
                                  {
                                    "ifStatement": {
                                      "ifBlock": {
                                        "expressionStatement": {
                                          "callExpression": {
                                            "argumentList": [
                                              {
                                                "identifier": "prev"
                                              },
                                              {
                                                "callExpression": {
                                                  "argumentList": [
                                                    {
                                                      "identifier": "prev"
                                                    }
                                                  ],
                                                  "callee": "slob_units"
                                                }
                                              },
                                              {
                                                "AdditiveExpression": {
                                                  "leftOperand": {
                                                    "identifier": "cur"
                                                  },
                                                  "rightOperand": {
                                                    "identifier": "units"
                                                  },
                                                  "operator": "+"
                                                }
                                              }
                                            ],
                                            "callee": "set_slob"
                                          }
                                        }
                                      },
                                      "condition": {
                                        "identifier": "prev"
                                      },
                                      "elseBlock": {
                                        "expressionStatement": {
                                          "AssignmentExpression": {
                                            "leftOperand": {
                                              "unaryExpression": {
                                                "operand": {
                                                  "identifier": "freelist"
                                                }
                                              }
                                            },
                                            "rightOperand": {
                                              "AdditiveExpression": {
                                                "leftOperand": {
                                                  "identifier": "cur"
                                                },
                                                "rightOperand": {
                                                  "identifier": "units"
                                                },
                                                "operator": "+"
                                              }
                                            },
                                            "operator": "="
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "AdditiveExpression": {
                                              "leftOperand": {
                                                "identifier": "cur"
                                              },
                                              "rightOperand": {
                                                "identifier": "units"
                                              },
                                              "operator": "+"
                                            }
                                          },
                                          {
                                            "AdditiveExpression": {
                                              "leftOperand": {
                                                "identifier": "avail"
                                              },
                                              "rightOperand": {
                                                "identifier": "units"
                                              },
                                              "operator": "-"
                                            }
                                          },
                                          {
                                            "identifier": "next"
                                          }
                                        ],
                                        "callee": "set_slob"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "units"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "identifier": "units"
                                },
                                "operator": "-="
                              }
                            }
                          },
                          {
                            "ifStatement": {
                              "ifBlock": {
                                "compoundStatement": [
                                  {
                                    "expressionStatement": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "sp"
                                          }
                                        ],
                                        "callee": "clear_slob_page_free"
                                      }
                                    }
                                  },
                                  {
                                    "expressionStatement": {
                                      "AssignmentExpression": {
                                        "leftOperand": {
                                          "unaryOperationExpression": {
                                            "operator": "*",
                                            "operand": {
                                              "identifier": "page_removed_from_list"
                                            }
                                          }
                                        },
                                        "rightOperand": {
                                          "identifier": "true"
                                        },
                                        "operator": "="
                                      }
                                    }
                                  }
                                ]
                              },
                              "condition": {
                                "unaryOperationExpression": {
                                  "operator": "!",
                                  "operand": {
                                    "unaryExpression": {
                                      "operand": {
                                        "identifier": "units"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            "returnStatement": {
                              "identifier": "cur"
                            }
                          }
                        ]
                      },
                      "condition": {
                        "RelationalExpression": {
                          "leftOperand": {
                            "identifier": "avail"
                          },
                          "rightOperand": {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "identifier": "units"
                              },
                              "rightOperand": {
                                "identifier": "delta"
                              },
                              "operator": "+"
                            }
                          },
                          "operator": ">="
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "identifier": "NULL"
                        }
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "cur"
                            }
                          ],
                          "callee": "slob_last"
                        }
                      }
                    }
                  }
                ]
              },
              "forLoop": {}
            }
          }
        ],
        "returnType": "static void *"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_alloc",
        "parameterList": [
          {
            "parameterType": "size_t",
            "parameter": "size"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "int",
            "parameter": "align"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          },
          {
            "parameterType": "int",
            "parameter": "align_offset"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "sp",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "slob_list",
                "identifierType": "struct list_head *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "b",
                "identifierType": "slob_t *",
                "initialValue": "NULL"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "flags",
                "identifierType": "unsigned long"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "_unused",
                "identifierType": "bool"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "slob_list"
                    },
                    "rightOperand": {
                      "unaryOperationExpression": {
                        "operator": "&",
                        "operand": {
                          "identifier": "free_slob_small"
                        }
                      }
                    },
                    "operator": "="
                  }
                }
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "size"
                  },
                  "rightOperand": {
                    "constant": "256"
                  },
                  "operator": "<"
                }
              },
              "elseBlock": {
                "ifStatement": {
                  "ifBlock": {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "slob_list"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "identifier": "free_slob_medium"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  "condition": {
                    "RelationalExpression": {
                      "leftOperand": {
                        "identifier": "size"
                      },
                      "rightOperand": {
                        "constant": "1024"
                      },
                      "operator": "<"
                    }
                  },
                  "elseBlock": {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "slob_list"
                        },
                        "rightOperand": {
                          "unaryOperationExpression": {
                            "operator": "&",
                            "operand": {
                              "identifier": "free_slob_large"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "slob_lock"
                      }
                    }
                  },
                  {
                    "identifier": "flags"
                  }
                ],
                "callee": "spin_lock_irqsave"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {
                "identifierDeclStatement": [
                  {
                    "identifier": "page_removed_from_list",
                    "identifierType": "bool",
                    "initialValue": "false"
                  }
                ]
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "AndExpression": {
                      "leftOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "identifier": "node"
                          },
                          "rightOperand": {
                            "identifier": "NUMA_NO_NODE"
                          },
                          "operator": "!="
                        }
                      },
                      "rightOperand": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "sp"
                                }
                              ],
                              "callee": "page_to_nid"
                            }
                          },
                          "rightOperand": {
                            "identifier": "node"
                          },
                          "operator": "!="
                        }
                      },
                      "operator": "&&"
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "RelationalExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "units"
                          }
                        }
                      },
                      "rightOperand": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "size"
                            },
                            {
                              "sizeofExpression": {
                                "operator": "sizeof",
                                "operand": {
                                  "identifier": "slob_t"
                                }
                              }
                            }
                          ],
                          "callee": "DIV_ROUND_UP"
                        }
                      },
                      "operator": "<"
                    }
                  }
                }
              },
              {
                "expressionStatement": {
                  "AssignmentExpression": {
                    "leftOperand": {
                      "identifier": "b"
                    },
                    "rightOperand": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          },
                          {
                            "identifier": "size"
                          },
                          {
                            "identifier": "align"
                          },
                          {
                            "identifier": "align_offset"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "page_removed_from_list"
                              }
                            }
                          }
                        ],
                        "callee": "slob_page_alloc"
                      }
                    },
                    "operator": "="
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "continueStatement": "continue"
                  },
                  "condition": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "b"
                      }
                    }
                  }
                }
              },
              {
                "ifStatement": {
                  "ifBlock": {
                    "compoundStatement": [
                      {
                        "ifStatement": {
                          "ifBlock": {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "unaryOperationExpression": {
                                      "operator": "&",
                                      "operand": {
                                        "unaryExpression": {
                                          "operand": {
                                            "identifier": "slab_list"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "identifier": "slob_list"
                                  }
                                ],
                                "callee": "list_rotate_to_front"
                              }
                            }
                          },
                          "condition": {
                            "unaryOperationExpression": {
                              "operator": "!",
                              "operand": {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "unaryOperationExpression": {
                                        "operator": "&",
                                        "operand": {
                                          "unaryExpression": {
                                            "operand": {
                                              "identifier": "slab_list"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "identifier": "slob_list"
                                    }
                                  ],
                                  "callee": "list_is_first"
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "condition": {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "page_removed_from_list"
                      }
                    }
                  }
                }
              },
              {
                "breakStatement": "break"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "slob_lock"
                      }
                    }
                  },
                  {
                    "identifier": "flags"
                  }
                ],
                "callee": "spin_unlock_irqrestore"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "b"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "BitAndExpression": {
                                  "leftOperand": {
                                    "identifier": "gfp"
                                  },
                                  "rightOperand": {
                                    "identifier": "~__GFP_ZERO"
                                  },
                                  "operator": "&"
                                }
                              },
                              {
                                "constant": "0"
                              },
                              {
                                "identifier": "node"
                              }
                            ],
                            "callee": "slob_new_pages"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "identifier": "NULL"
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "b"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "sp"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "b"
                              }
                            ],
                            "callee": "virt_to_page"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          }
                        ],
                        "callee": "__SetPageSlab"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "slob_lock"
                              }
                            }
                          },
                          {
                            "identifier": "flags"
                          }
                        ],
                        "callee": "spin_lock_irqsave"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "units"
                            }
                          }
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "PAGE_SIZE"
                              },
                              {
                                "sizeofExpression": {
                                  "operator": "sizeof",
                                  "operand": {
                                    "identifier": "slob_t"
                                  }
                                }
                              }
                            ],
                            "callee": "DIV_ROUND_UP"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "freelist"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "b"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "slab_list"
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "callee": "INIT_LIST_HEAD"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "b"
                          },
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "PAGE_SIZE"
                                },
                                {
                                  "sizeofExpression": {
                                    "operator": "sizeof",
                                    "operand": {
                                      "identifier": "slob_t"
                                    }
                                  }
                                }
                              ],
                              "callee": "DIV_ROUND_UP"
                            }
                          },
                          {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "identifier": "b"
                              },
                              "rightOperand": {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "PAGE_SIZE"
                                    },
                                    {
                                      "sizeofExpression": {
                                        "operator": "sizeof",
                                        "operand": {
                                          "identifier": "slob_t"
                                        }
                                      }
                                    }
                                  ],
                                  "callee": "DIV_ROUND_UP"
                                }
                              },
                              "operator": "+"
                            }
                          }
                        ],
                        "callee": "set_slob"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          },
                          {
                            "identifier": "slob_list"
                          }
                        ],
                        "callee": "set_slob_page_free"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "b"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "sp"
                              },
                              {
                                "identifier": "PAGE_SIZE"
                              },
                              {
                                "identifier": "align"
                              },
                              {
                                "identifier": "align_offset"
                              },
                              {
                                "unaryOperationExpression": {
                                  "operator": "&",
                                  "operand": {
                                    "identifier": "_unused"
                                  }
                                }
                              }
                            ],
                            "callee": "slob_page_alloc"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "!",
                              "operand": {
                                "identifier": "b"
                              }
                            }
                          }
                        ],
                        "callee": "BUG_ON"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "slob_lock"
                              }
                            }
                          },
                          {
                            "identifier": "flags"
                          }
                        ],
                        "callee": "spin_unlock_irqrestore"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "identifier": "b"
                  }
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "b"
                      },
                      {
                        "constant": "0"
                      },
                      {
                        "identifier": "PAGE_SIZE"
                      }
                    ],
                    "callee": "memset"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "BitAndExpression": {
                        "leftOperand": {
                          "identifier": "gfp"
                        },
                        "rightOperand": {
                          "identifier": "__GFP_ZERO"
                        },
                        "operator": "&"
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "b"
            }
          }
        ],
        "returnType": "static void *"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_free",
        "parameterList": [
          {
            "parameterType": "void *",
            "parameter": "block"
          },
          {
            "parameterType": "int",
            "parameter": "PAGE_SIZE"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "sp",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "prev",
                "identifierType": "slob_t *"
              },
              {
                "identifier": "next",
                "identifierType": "slob_t *"
              },
              {
                "identifier": "b",
                "identifierType": "slob_t *",
                "initialValue": "(slob_t *)block"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "units",
                "identifierType": "slobidx_t"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "flags",
                "identifierType": "unsigned long"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "slob_list",
                "identifierType": "struct list_head *"
              }
            ]
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "block"
                          }
                        ],
                        "callee": "ZERO_OR_NULL_PTR"
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "PAGE_SIZE"
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "sp"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "block"
                      }
                    ],
                    "callee": "virt_to_page"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "units"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "PAGE_SIZE"
                      },
                      {
                        "sizeofExpression": {
                          "operator": "sizeof",
                          "operand": {
                            "identifier": "slob_t"
                          }
                        }
                      }
                    ],
                    "callee": "DIV_ROUND_UP"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "slob_lock"
                      }
                    }
                  },
                  {
                    "identifier": "flags"
                  }
                ],
                "callee": "spin_lock_irqsave"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "sp"
                              }
                            ],
                            "callee": "clear_slob_page_free"
                          }
                        }
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "sp"
                            }
                          ],
                          "callee": "slob_page_free"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "identifier": "slob_lock"
                              }
                            }
                          },
                          {
                            "identifier": "flags"
                          }
                        ],
                        "callee": "spin_unlock_irqrestore"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          }
                        ],
                        "callee": "__ClearPageSlab"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          }
                        ],
                        "callee": "page_mapcount_reset"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "b"
                          },
                          {
                            "constant": "0"
                          }
                        ],
                        "callee": "slob_free_pages"
                      }
                    }
                  },
                  {
                    "returnStatement": {}
                  }
                ]
              },
              "condition": {
                "EqualityExpression": {
                  "leftOperand": {
                    "AdditiveExpression": {
                      "leftOperand": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "units"
                          }
                        }
                      },
                      "rightOperand": {
                        "identifier": "units"
                      },
                      "operator": "+"
                    }
                  },
                  "rightOperand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "PAGE_SIZE"
                        },
                        {
                          "sizeofExpression": {
                            "operator": "sizeof",
                            "operand": {
                              "identifier": "slob_t"
                            }
                          }
                        }
                      ],
                      "callee": "DIV_ROUND_UP"
                    }
                  },
                  "operator": "=="
                }
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "units"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "units"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "freelist"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "b"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "b"
                          },
                          {
                            "identifier": "units"
                          },
                          {
                            "castExpression": {
                              "originalExpression": {
                                "BitAndExpression": {
                                  "leftOperand": {
                                    "castExpression": {
                                      "originalExpression": {
                                        "AdditiveExpression": {
                                          "leftOperand": {
                                            "identifier": "b"
                                          },
                                          "rightOperand": {
                                            "callExpression": {
                                              "argumentList": [
                                                {
                                                  "identifier": "PAGE_SIZE"
                                                },
                                                {
                                                  "sizeofExpression": {
                                                    "operator": "sizeof",
                                                    "operand": {
                                                      "identifier": "slob_t"
                                                    }
                                                  }
                                                }
                                              ],
                                              "callee": "DIV_ROUND_UP"
                                            }
                                          },
                                          "operator": "+"
                                        }
                                      },
                                      "target": "unsigned long"
                                    }
                                  },
                                  "rightOperand": {
                                    "identifier": "PAGE_MASK"
                                  },
                                  "operator": "&"
                                }
                              },
                              "target": "void *"
                            }
                          }
                        ],
                        "callee": "set_slob"
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "slob_list"
                            },
                            "rightOperand": {
                              "unaryOperationExpression": {
                                "operator": "&",
                                "operand": {
                                  "identifier": "free_slob_small"
                                }
                              }
                            },
                            "operator": "="
                          }
                        }
                      },
                      "condition": {
                        "RelationalExpression": {
                          "leftOperand": {
                            "identifier": "PAGE_SIZE"
                          },
                          "rightOperand": {
                            "constant": "256"
                          },
                          "operator": "<"
                        }
                      },
                      "elseBlock": {
                        "ifStatement": {
                          "ifBlock": {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "slob_list"
                                },
                                "rightOperand": {
                                  "unaryOperationExpression": {
                                    "operator": "&",
                                    "operand": {
                                      "identifier": "free_slob_medium"
                                    }
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          "condition": {
                            "RelationalExpression": {
                              "leftOperand": {
                                "identifier": "PAGE_SIZE"
                              },
                              "rightOperand": {
                                "constant": "1024"
                              },
                              "operator": "<"
                            }
                          },
                          "elseBlock": {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "slob_list"
                                },
                                "rightOperand": {
                                  "unaryOperationExpression": {
                                    "operator": "&",
                                    "operand": {
                                      "identifier": "free_slob_large"
                                    }
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          },
                          {
                            "identifier": "slob_list"
                          }
                        ],
                        "callee": "set_slob_page_free"
                      }
                    }
                  },
                  {
                    "gotoStatement": {
                      "goto": "out"
                    }
                  }
                ]
              },
              "condition": {
                "unaryOperationExpression": {
                  "operator": "!",
                  "operand": {
                    "callExpression": {
                      "argumentList": [
                        {
                          "identifier": "sp"
                        }
                      ],
                      "callee": "slob_page_free"
                    }
                  }
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "units"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "units"
                },
                "operator": "+="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "units"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "unaryExpression": {
                                          "operand": {
                                            "identifier": "freelist"
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "slob_units"
                                  }
                                },
                                "operator": "+="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "freelist"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "unaryExpression": {
                                          "operand": {
                                            "identifier": "freelist"
                                          }
                                        }
                                      }
                                    ],
                                    "callee": "slob_next"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "identifier": "b"
                              },
                              "rightOperand": {
                                "identifier": "units"
                              },
                              "operator": "+"
                            }
                          },
                          "rightOperand": {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "freelist"
                              }
                            }
                          },
                          "operator": "=="
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "b"
                          },
                          {
                            "identifier": "units"
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "freelist"
                              }
                            }
                          }
                        ],
                        "callee": "set_slob"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "freelist"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "b"
                        },
                        "operator": "="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "b"
                  },
                  "rightOperand": {
                    "castExpression": {
                      "originalExpression": {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "freelist"
                          }
                        }
                      },
                      "target": "slob_t *"
                    }
                  },
                  "operator": "<"
                }
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "prev"
                        },
                        "rightOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "freelist"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "next"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "prev"
                              }
                            ],
                            "callee": "slob_next"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "whileStatement": {
                      "condition": {
                        "RelationalExpression": {
                          "leftOperand": {
                            "identifier": "b"
                          },
                          "rightOperand": {
                            "identifier": "next"
                          },
                          "operator": ">"
                        }
                      },
                      "whileBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "prev"
                                },
                                "rightOperand": {
                                  "identifier": "next"
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "next"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "prev"
                                      }
                                    ],
                                    "callee": "slob_next"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "units"
                                },
                                "rightOperand": {
                                  "callExpression": {
                                    "argumentList": [
                                      {
                                        "identifier": "next"
                                      }
                                    ],
                                    "callee": "slob_units"
                                  }
                                },
                                "operator": "+="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "b"
                                  },
                                  {
                                    "identifier": "units"
                                  },
                                  {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "next"
                                        }
                                      ],
                                      "callee": "slob_next"
                                    }
                                  }
                                ],
                                "callee": "set_slob"
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "AndExpression": {
                          "leftOperand": {
                            "unaryOperationExpression": {
                              "operator": "!",
                              "operand": {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "prev"
                                    }
                                  ],
                                  "callee": "slob_last"
                                }
                              }
                            }
                          },
                          "rightOperand": {
                            "EqualityExpression": {
                              "leftOperand": {
                                "AdditiveExpression": {
                                  "leftOperand": {
                                    "identifier": "b"
                                  },
                                  "rightOperand": {
                                    "identifier": "units"
                                  },
                                  "operator": "+"
                                }
                              },
                              "rightOperand": {
                                "identifier": "next"
                              },
                              "operator": "=="
                            }
                          },
                          "operator": "&&"
                        }
                      },
                      "elseBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "b"
                              },
                              {
                                "identifier": "units"
                              },
                              {
                                "identifier": "next"
                              }
                            ],
                            "callee": "set_slob"
                          }
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "compoundStatement": [
                          {
                            "expressionStatement": {
                              "AssignmentExpression": {
                                "leftOperand": {
                                  "identifier": "units"
                                },
                                "rightOperand": {
                                  "AdditiveExpression": {
                                    "leftOperand": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "b"
                                          }
                                        ],
                                        "callee": "slob_units"
                                      }
                                    },
                                    "rightOperand": {
                                      "callExpression": {
                                        "argumentList": [
                                          {
                                            "identifier": "prev"
                                          }
                                        ],
                                        "callee": "slob_units"
                                      }
                                    },
                                    "operator": "+"
                                  }
                                },
                                "operator": "="
                              }
                            }
                          },
                          {
                            "expressionStatement": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "prev"
                                  },
                                  {
                                    "identifier": "units"
                                  },
                                  {
                                    "callExpression": {
                                      "argumentList": [
                                        {
                                          "identifier": "b"
                                        }
                                      ],
                                      "callee": "slob_next"
                                    }
                                  }
                                ],
                                "callee": "set_slob"
                              }
                            }
                          }
                        ]
                      },
                      "condition": {
                        "EqualityExpression": {
                          "leftOperand": {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "identifier": "prev"
                              },
                              "rightOperand": {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "prev"
                                    }
                                  ],
                                  "callee": "slob_units"
                                }
                              },
                              "operator": "+"
                            }
                          },
                          "rightOperand": {
                            "identifier": "b"
                          },
                          "operator": "=="
                        }
                      },
                      "elseBlock": {
                        "expressionStatement": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "prev"
                              },
                              {
                                "callExpression": {
                                  "argumentList": [
                                    {
                                      "identifier": "prev"
                                    }
                                  ],
                                  "callee": "slob_units"
                                }
                              },
                              {
                                "identifier": "b"
                              }
                            ],
                            "callee": "set_slob"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "label": "out:"
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "&",
                      "operand": {
                        "identifier": "slob_lock"
                      }
                    }
                  },
                  {
                    "identifier": "flags"
                  }
                ],
                "callee": "spin_unlock_irqrestore"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_obj_info",
        "parameterList": [
          {
            "parameterType": "struct kmem_obj_info *",
            "parameter": "kpp"
          },
          {
            "parameterType": "void *",
            "parameter": "object"
          },
          {
            "parameterType": "struct page *",
            "parameter": "page"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "kp_ptr"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "object"
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "kp_page"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "page"
                },
                "operator": "="
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "__do_kmalloc_node",
        "parameterList": [
          {
            "parameterType": "size_t",
            "parameter": "PAGE_SIZE"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          },
          {
            "parameterType": "unsigned long",
            "parameter": "caller"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "m",
                "identifierType": "unsigned int *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "minalign",
                "identifierType": "int",
                "initialValue": "max_t(size_t, ARCH_KMALLOC_MINALIGN, ARCH_SLAB_MINALIGN)"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "ret",
                "identifierType": "void *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "gfp"
                },
                "rightOperand": {
                  "identifier": "gfp_allowed_mask"
                },
                "operator": "&="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "gfp"
                  }
                ],
                "callee": "might_alloc"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "align",
                        "identifierType": "int",
                        "initialValue": "minalign"
                      }
                    ]
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "align"
                            },
                            "rightOperand": {
                              "callExpression": {
                                "argumentList": [
                                  {
                                    "identifier": "minalign"
                                  },
                                  {
                                    "castExpression": {
                                      "originalExpression": {
                                        "identifier": "PAGE_SIZE"
                                      },
                                      "target": "int"
                                    }
                                  }
                                ],
                                "callee": "max"
                              }
                            },
                            "operator": "="
                          }
                        }
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "PAGE_SIZE"
                            }
                          ],
                          "callee": "is_power_of_2"
                        }
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "identifier": "ZERO_SIZE_PTR"
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "PAGE_SIZE"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "m"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "AdditiveExpression": {
                                  "leftOperand": {
                                    "identifier": "PAGE_SIZE"
                                  },
                                  "rightOperand": {
                                    "identifier": "minalign"
                                  },
                                  "operator": "+"
                                }
                              },
                              {
                                "identifier": "gfp"
                              },
                              {
                                "identifier": "align"
                              },
                              {
                                "identifier": "node"
                              },
                              {
                                "identifier": "minalign"
                              }
                            ],
                            "callee": "slob_alloc"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "returnStatement": {
                          "identifier": "NULL"
                        }
                      },
                      "condition": {
                        "unaryOperationExpression": {
                          "operator": "!",
                          "operand": {
                            "identifier": "m"
                          }
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryOperationExpression": {
                            "operator": "*",
                            "operand": {
                              "identifier": "m"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "PAGE_SIZE"
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "ret"
                        },
                        "rightOperand": {
                          "AdditiveExpression": {
                            "leftOperand": {
                              "castExpression": {
                                "originalExpression": {
                                  "identifier": "m"
                                },
                                "target": "void *"
                              }
                            },
                            "rightOperand": {
                              "identifier": "minalign"
                            },
                            "operator": "+"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "caller"
                          },
                          {
                            "identifier": "ret"
                          },
                          {
                            "identifier": "PAGE_SIZE"
                          },
                          {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "identifier": "PAGE_SIZE"
                              },
                              "rightOperand": {
                                "identifier": "minalign"
                              },
                              "operator": "+"
                            }
                          },
                          {
                            "identifier": "gfp"
                          },
                          {
                            "identifier": "node"
                          }
                        ],
                        "callee": "trace_kmalloc_node"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "RelationalExpression": {
                  "leftOperand": {
                    "identifier": "PAGE_SIZE"
                  },
                  "rightOperand": {
                    "AdditiveExpression": {
                      "leftOperand": {
                        "identifier": "PAGE_SIZE"
                      },
                      "rightOperand": {
                        "identifier": "minalign"
                      },
                      "operator": "-"
                    }
                  },
                  "operator": "<"
                }
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "order",
                        "identifierType": "unsigned int",
                        "initialValue": "get_order(PAGE_SIZE)"
                      }
                    ]
                  },
                  {
                    "ifStatement": {
                      "ifBlock": {
                        "expressionStatement": {
                          "AssignmentExpression": {
                            "leftOperand": {
                              "identifier": "gfp"
                            },
                            "rightOperand": {
                              "identifier": "__GFP_COMP"
                            },
                            "operator": "|="
                          }
                        }
                      },
                      "condition": {
                        "callExpression": {
                          "argumentList": [
                            {
                              "identifier": "order"
                            }
                          ],
                          "callee": "likely"
                        }
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "ret"
                        },
                        "rightOperand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "gfp"
                              },
                              {
                                "identifier": "order"
                              },
                              {
                                "identifier": "node"
                              }
                            ],
                            "callee": "slob_new_pages"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "caller"
                          },
                          {
                            "identifier": "ret"
                          },
                          {
                            "identifier": "PAGE_SIZE"
                          },
                          {
                            "ShiftExpression": {
                              "leftOperand": {
                                "identifier": "PAGE_SIZE"
                              },
                              "rightOperand": {
                                "identifier": "order"
                              },
                              "operator": "<<"
                            }
                          },
                          {
                            "identifier": "gfp"
                          },
                          {
                            "identifier": "node"
                          }
                        ],
                        "callee": "trace_kmalloc_node"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "ret"
                  },
                  {
                    "identifier": "PAGE_SIZE"
                  },
                  {
                    "constant": "1"
                  },
                  {
                    "identifier": "gfp"
                  }
                ],
                "callee": "kmemleak_alloc"
              }
            }
          },
          {
            "returnStatement": {
              "identifier": "ret"
            }
          }
        ],
        "returnType": "static __always_inline void *"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmalloc",
        "parameterList": [
          {
            "parameterType": "size_t",
            "parameter": "PAGE_SIZE"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "PAGE_SIZE"
                  },
                  {
                    "identifier": "gfp"
                  },
                  {
                    "identifier": "NUMA_NO_NODE"
                  },
                  {
                    "identifier": "_RET_IP_"
                  }
                ],
                "callee": "__do_kmalloc_node"
              }
            }
          }
        ],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmalloc_track_caller",
        "parameterList": [
          {
            "parameterType": "size_t",
            "parameter": "PAGE_SIZE"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "unsigned long",
            "parameter": "caller"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "PAGE_SIZE"
                  },
                  {
                    "identifier": "gfp"
                  },
                  {
                    "identifier": "NUMA_NO_NODE"
                  },
                  {
                    "identifier": "caller"
                  }
                ],
                "callee": "__do_kmalloc_node"
              }
            }
          }
        ],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmalloc_node_track_caller",
        "parameterList": [
          {
            "parameterType": "size_t",
            "parameter": "PAGE_SIZE"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          },
          {
            "parameterType": "unsigned long",
            "parameter": "caller"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "PAGE_SIZE"
                  },
                  {
                    "identifier": "gfp"
                  },
                  {
                    "identifier": "node"
                  },
                  {
                    "identifier": "caller"
                  }
                ],
                "callee": "__do_kmalloc_node"
              }
            }
          }
        ],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "kfree",
        "parameterList": [
          {
            "parameterType": "const void *",
            "parameter": "block"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "sp",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "_RET_IP_"
                  },
                  {
                    "identifier": "block"
                  }
                ],
                "callee": "trace_kfree"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {}
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "block"
                          }
                        ],
                        "callee": "ZERO_OR_NULL_PTR"
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "block"
                  }
                ],
                "callee": "kmemleak_free"
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "sp"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "block"
                      }
                    ],
                    "callee": "virt_to_page"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "align",
                        "identifierType": "int",
                        "initialValue": "max_t(size_t, ARCH_KMALLOC_MINALIGN, ARCH_SLAB_MINALIGN)"
                      }
                    ]
                  },
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "m",
                        "identifierType": "unsigned int *",
                        "initialValue": "(unsigned int *)(block - align)"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "m"
                          },
                          {
                            "AdditiveExpression": {
                              "leftOperand": {
                                "unaryOperationExpression": {
                                  "operator": "*",
                                  "operand": {
                                    "identifier": "m"
                                  }
                                }
                              },
                              "rightOperand": {
                                "identifier": "align"
                              },
                              "operator": "+"
                            }
                          }
                        ],
                        "callee": "slob_free"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "identifier": "sp"
                    }
                  ],
                  "callee": "PageSlab"
                }
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "order",
                        "identifierType": "unsigned int",
                        "initialValue": "compound_order(sp)"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "identifier": "sp"
                                }
                              ],
                              "callee": "page_pgdat"
                            }
                          },
                          {
                            "identifier": "NR_SLAB_UNRECLAIMABLE_B"
                          },
                          {
                            "unaryOperationExpression": {
                              "operator": "-",
                              "operand": {
                                "ShiftExpression": {
                                  "leftOperand": {
                                    "identifier": "PAGE_SIZE"
                                  },
                                  "rightOperand": {
                                    "identifier": "order"
                                  },
                                  "operator": "<<"
                                }
                              }
                            }
                          }
                        ],
                        "callee": "mod_node_page_state"
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "sp"
                          },
                          {
                            "identifier": "order"
                          }
                        ],
                        "callee": "__free_pages"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__ksize",
        "parameterList": [
          {
            "parameterType": "const void *",
            "parameter": "block"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "sp",
                "identifierType": "struct page *"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "align",
                "identifierType": "int"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "m",
                "identifierType": "unsigned int *"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "unaryOperationExpression": {
                      "operator": "!",
                      "operand": {
                        "identifier": "block"
                      }
                    }
                  }
                ],
                "callee": "BUG_ON"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "constant": "0"
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "EqualityExpression": {
                        "leftOperand": {
                          "identifier": "block"
                        },
                        "rightOperand": {
                          "identifier": "ZERO_SIZE_PTR"
                        },
                        "operator": "=="
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "sp"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "block"
                      }
                    ],
                    "callee": "virt_to_page"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "returnStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "sp"
                      }
                    ],
                    "callee": "page_size"
                  }
                }
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "unaryOperationExpression": {
                        "operator": "!",
                        "operand": {
                          "callExpression": {
                            "argumentList": [
                              {
                                "identifier": "sp"
                              }
                            ],
                            "callee": "PageSlab"
                          }
                        }
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "align"
                },
                "rightOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "size_t"
                      },
                      {
                        "identifier": "ARCH_KMALLOC_MINALIGN"
                      },
                      {
                        "identifier": "ARCH_SLAB_MINALIGN"
                      }
                    ],
                    "callee": "max_t"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "m"
                },
                "rightOperand": {
                  "castExpression": {
                    "originalExpression": {
                      "AdditiveExpression": {
                        "leftOperand": {
                          "identifier": "block"
                        },
                        "rightOperand": {
                          "identifier": "align"
                        },
                        "operator": "-"
                      }
                    },
                    "target": "unsigned int *"
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "MultiplicativeExpression": {
                "leftOperand": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "unaryOperationExpression": {
                          "operator": "*",
                          "operand": {
                            "identifier": "m"
                          }
                        }
                      },
                      {
                        "sizeofExpression": {
                          "operator": "sizeof",
                          "operand": {
                            "identifier": "slob_t"
                          }
                        }
                      }
                    ],
                    "callee": "DIV_ROUND_UP"
                  }
                },
                "rightOperand": {
                  "sizeofExpression": {
                    "operator": "sizeof",
                    "operand": {
                      "identifier": "slob_t"
                    }
                  }
                },
                "operator": "*"
              }
            }
          }
        ],
        "returnType": "size_t"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_create",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          },
          {
            "parameterType": "slab_flags_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {},
                  {},
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "m"
                        },
                        "rightOperand": {
                          "sizeofExpression": {
                            "operator": "sizeof",
                            "operand": {}
                          }
                        },
                        "operator": "+="
                      }
                    }
                  }
                ]
              },
              "condition": {
                "BitAndExpression": {
                  "leftOperand": {
                    "identifier": "flags"
                  },
                  "rightOperand": {
                    "identifier": "SLAB_TYPESAFE_BY_RCU"
                  },
                  "operator": "&"
                }
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "unaryExpression": {
                    "operand": {
                      "identifier": "flags"
                    }
                  }
                },
                "rightOperand": {
                  "identifier": "flags"
                },
                "operator": "="
              }
            }
          },
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_alloc_node",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "b",
                "identifierType": "void *"
              }
            ]
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "flags"
                },
                "rightOperand": {
                  "identifier": "gfp_allowed_mask"
                },
                "operator": "&="
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "flags"
                  }
                ],
                "callee": "might_alloc"
              }
            }
          },
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {},
          {
            "compoundStatement": [
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {},
              {
                "expressionStatement": {}
              },
              {
                "expressionStatement": {
                  "callExpression": {
                    "argumentList": [
                      {
                        "identifier": "_RET_IP_"
                      },
                      {
                        "identifier": "b"
                      },
                      {
                        "unaryExpression": {
                          "operand": {
                            "identifier": "object_size"
                          }
                        }
                      },
                      {
                        "MultiplicativeExpression": {
                          "leftOperand": {
                            "callExpression": {
                              "argumentList": [
                                {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "size"
                                    }
                                  }
                                },
                                {
                                  "sizeofExpression": {
                                    "operator": "sizeof",
                                    "operand": {
                                      "identifier": "slob_t"
                                    }
                                  }
                                }
                              ],
                              "callee": "DIV_ROUND_UP"
                            }
                          },
                          "rightOperand": {
                            "sizeofExpression": {
                              "operator": "sizeof",
                              "operand": {
                                "identifier": "slob_t"
                              }
                            }
                          },
                          "operator": "*"
                        }
                      },
                      {
                        "identifier": "flags"
                      },
                      {
                        "identifier": "node"
                      }
                    ],
                    "callee": "trace_kmem_cache_alloc_node"
                  }
                }
              }
            ]
          }
        ],
        "returnType": "static void *"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_alloc",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cachep"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "flags"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "cachep"
                  },
                  {
                    "identifier": "flags"
                  },
                  {
                    "identifier": "NUMA_NO_NODE"
                  }
                ],
                "callee": "slob_alloc_node"
              }
            }
          }
        ],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__do_kmalloc_node"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_alloc_node",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "cachep"
          },
          {
            "parameterType": "gfp_t",
            "parameter": "gfp"
          },
          {
            "parameterType": "int",
            "parameter": "node"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "cachep"
                  },
                  {
                    "identifier": "gfp"
                  },
                  {
                    "identifier": "node"
                  }
                ],
                "callee": "slob_alloc_node"
              }
            }
          }
        ],
        "returnType": "void *"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_free",
        "parameterList": [
          {
            "parameterType": "b",
            "parameter": "<anonymous>"
          },
          {
            "parameterType": "c -> size",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [],
        "returnType": "(c->size < PAGE_SIZE)"
      }
    },
    {
      "functionDef": {
        "functionName": "slob_free_pages"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_rcu_free",
        "parameterList": [
          {
            "parameterType": "struct rcu_head *",
            "parameter": "head"
          }
        ],
        "functionBody": [
          {
            "identifierDeclStatement": [
              {
                "identifier": "slob_rcu",
                "identifierType": "struct slob_rcu *",
                "initialValue": "(struct slob_rcu *)head"
              }
            ]
          },
          {
            "identifierDeclStatement": [
              {
                "identifier": "b",
                "identifierType": "void *",
                "initialValue": "(void *)slob_rcu - (slob_rcu->c->size - sizeof(struct slob_rcu))"
              }
            ]
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "b"
                  },
                  {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "size"
                      }
                    }
                  }
                ],
                "callee": "__kmem_cache_free"
              }
            }
          }
        ],
        "returnType": "static void"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_free",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          },
          {
            "parameterType": "void *",
            "parameter": "b"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "b"
                  },
                  {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "flags"
                      }
                    }
                  }
                ],
                "callee": "kmemleak_free_recursive"
              }
            }
          },
          {
            "ifStatement": {
              "ifBlock": {
                "compoundStatement": [
                  {
                    "identifierDeclStatement": [
                      {
                        "identifier": "slob_rcu",
                        "identifierType": "struct slob_rcu *"
                      }
                    ]
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "identifier": "slob_rcu"
                        },
                        "rightOperand": {
                          "AdditiveExpression": {
                            "leftOperand": {
                              "identifier": "b"
                            },
                            "rightOperand": {
                              "AdditiveExpression": {
                                "leftOperand": {
                                  "unaryExpression": {
                                    "operand": {
                                      "identifier": "size"
                                    }
                                  }
                                },
                                "rightOperand": {
                                  "sizeofExpression": {
                                    "operator": "sizeof",
                                    "operand": {}
                                  }
                                },
                                "operator": "-"
                              }
                            },
                            "operator": "+"
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "AssignmentExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "size"
                            }
                          }
                        },
                        "rightOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "size"
                            }
                          }
                        },
                        "operator": "="
                      }
                    }
                  },
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "unaryOperationExpression": {
                              "operator": "&",
                              "operand": {
                                "unaryExpression": {
                                  "operand": {
                                    "identifier": "head"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "identifier": "kmem_rcu_free"
                          }
                        ],
                        "callee": "call_rcu"
                      }
                    }
                  }
                ]
              },
              "condition": {
                "callExpression": {
                  "argumentList": [
                    {
                      "BitAndExpression": {
                        "leftOperand": {
                          "unaryExpression": {
                            "operand": {
                              "identifier": "flags"
                            }
                          }
                        },
                        "rightOperand": {
                          "identifier": "SLAB_TYPESAFE_BY_RCU"
                        },
                        "operator": "&"
                      }
                    }
                  ],
                  "callee": "unlikely"
                }
              },
              "elseBlock": {
                "compoundStatement": [
                  {
                    "expressionStatement": {
                      "callExpression": {
                        "argumentList": [
                          {
                            "identifier": "b"
                          },
                          {
                            "unaryExpression": {
                              "operand": {
                                "identifier": "size"
                              }
                            }
                          }
                        ],
                        "callee": "__kmem_cache_free"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "expressionStatement": {
              "callExpression": {
                "argumentList": [
                  {
                    "identifier": "_RET_IP_"
                  },
                  {
                    "identifier": "b"
                  },
                  {
                    "unaryExpression": {
                      "operand": {
                        "identifier": "name"
                      }
                    }
                  }
                ],
                "callee": "trace_kmem_cache_free"
              }
            }
          }
        ],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_free_bulk"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_alloc_bulk"
      }
    },
    {
      "functionDef": {
        "functionName": "EXPORT_SYMBOL"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_shutdown",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_release",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "c"
          }
        ],
        "functionBody": [],
        "returnType": "void"
      }
    },
    {
      "functionDef": {
        "functionName": "__kmem_cache_shrink",
        "parameterList": [
          {
            "parameterType": "struct kmem_cache *",
            "parameter": "d"
          }
        ],
        "functionBody": [
          {
            "returnStatement": {
              "constant": "0"
            }
          }
        ],
        "returnType": "int"
      }
    },
    {
      "identifierDeclStatement": [
        {
          "identifier": "kmem_cache_boot",
          "identifierType": "struct kmem_cache"
        }
      ]
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_init",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "kmem_cache"
                },
                "rightOperand": {
                  "unaryOperationExpression": {
                    "operator": "&",
                    "operand": {
                      "identifier": "kmem_cache_boot"
                    }
                  }
                },
                "operator": "="
              }
            }
          },
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "slab_state"
                },
                "rightOperand": {
                  "identifier": "UP"
                },
                "operator": "="
              }
            }
          }
        ],
        "returnType": "void __init"
      }
    },
    {
      "functionDef": {
        "functionName": "kmem_cache_init_late",
        "parameterList": [
          {
            "parameterType": "void",
            "parameter": "<anonymous>"
          }
        ],
        "functionBody": [
          {
            "expressionStatement": {
              "AssignmentExpression": {
                "leftOperand": {
                  "identifier": "slab_state"
                },
                "rightOperand": {
                  "identifier": "FULL"
                },
                "operator": "="
              }
            }
          }
        ],
        "returnType": "void __init"
      }
    }
  ]
}
